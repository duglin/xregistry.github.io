{
  "capabilities": {
    "apis": [
      "/capabilities",
      "/export",
      "/model"
    ],
    "flags": null,
    "mutable": null,
    "pagination": false,
    "schemas": [
      "xregistry-json/1.0-rc1"
    ],
    "shortself": false,
    "specversions": [
      "1.0-rc1"
    ],
    "sticky": true
  },
  "createdat": "2025-04-30T14:59:15.791164476Z",
  "epoch": 7,
  "model": {
    "attributes": {
      "specversion": {
        "name": "specversion",
        "type": "string",
        "readonly": true,
        "required": true
      },
      "registryid": {
        "name": "registryid",
        "type": "string",
        "readonly": true,
        "immutable": true,
        "required": true
      },
      "self": {
        "name": "self",
        "type": "url",
        "readonly": true,
        "immutable": true,
        "required": true
      },
      "xid": {
        "name": "xid",
        "type": "xid",
        "readonly": true,
        "immutable": true,
        "required": true
      },
      "epoch": {
        "name": "epoch",
        "type": "uinteger",
        "readonly": true,
        "required": true
      },
      "name": {
        "name": "name",
        "type": "string"
      },
      "description": {
        "name": "description",
        "type": "string"
      },
      "documentation": {
        "name": "documentation",
        "type": "url"
      },
      "labels": {
        "name": "labels",
        "type": "map",
        "item": {
          "type": "string"
        }
      },
      "createdat": {
        "name": "createdat",
        "type": "timestamp",
        "required": true
      },
      "modifiedat": {
        "name": "modifiedat",
        "type": "timestamp",
        "required": true
      },
      "capabilities": {
        "name": "capabilities",
        "type": "object",
        "attributes": {
          "*": {
            "name": "*",
            "type": "any"
          }
        }
      },
      "model": {
        "name": "model",
        "type": "object",
        "attributes": {
          "*": {
            "name": "*",
            "type": "any"
          }
        }
      }
    },
    "groups": {
      "xregistryspecs": {
        "plural": "xregistryspecs",
        "singular": "xregistryspec",
        "attributes": {
          "xregistryspecid": {
            "name": "xregistryspecid",
            "type": "string",
            "immutable": true,
            "required": true
          },
          "self": {
            "name": "self",
            "type": "url",
            "readonly": true,
            "immutable": true,
            "required": true
          },
          "xid": {
            "name": "xid",
            "type": "xid",
            "readonly": true,
            "immutable": true,
            "required": true
          },
          "epoch": {
            "name": "epoch",
            "type": "uinteger",
            "readonly": true,
            "required": true
          },
          "name": {
            "name": "name",
            "type": "string"
          },
          "description": {
            "name": "description",
            "type": "string"
          },
          "documentation": {
            "name": "documentation",
            "type": "url"
          },
          "labels": {
            "name": "labels",
            "type": "map",
            "item": {
              "type": "string"
            }
          },
          "createdat": {
            "name": "createdat",
            "type": "timestamp",
            "required": true
          },
          "modifiedat": {
            "name": "modifiedat",
            "type": "timestamp",
            "required": true
          }
        },
        "resources": {
          "docs": {
            "plural": "docs",
            "singular": "doc",
            "maxversions": 0,
            "setversionid": true,
            "setdefaultversionsticky": true,
            "hasdocument": true,
            "singleversionroot": false,
            "attributes": {
              "docid": {
                "name": "docid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "versionid": {
                "name": "versionid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "self": {
                "name": "self",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xid": {
                "name": "xid",
                "type": "xid",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "epoch": {
                "name": "epoch",
                "type": "uinteger",
                "readonly": true,
                "required": true
              },
              "name": {
                "name": "name",
                "type": "string"
              },
              "isdefault": {
                "name": "isdefault",
                "type": "boolean",
                "readonly": true,
                "required": true,
                "default": false
              },
              "description": {
                "name": "description",
                "type": "string"
              },
              "documentation": {
                "name": "documentation",
                "type": "url"
              },
              "labels": {
                "name": "labels",
                "type": "map",
                "item": {
                  "type": "string"
                }
              },
              "createdat": {
                "name": "createdat",
                "type": "timestamp",
                "required": true
              },
              "modifiedat": {
                "name": "modifiedat",
                "type": "timestamp",
                "required": true
              },
              "ancestor": {
                "name": "ancestor",
                "type": "string",
                "required": true
              },
              "contenttype": {
                "name": "contenttype",
                "type": "string"
              },
              "docurl": {
                "name": "docurl",
                "type": "url"
              },
              "docproxyurl": {
                "name": "docproxyurl",
                "type": "url"
              },
              "doc": {
                "name": "doc",
                "type": "any"
              }
            },
            "metaattributes": {
              "docid": {
                "name": "docid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "self": {
                "name": "self",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xid": {
                "name": "xid",
                "type": "xid",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xref": {
                "name": "xref",
                "type": "url"
              },
              "epoch": {
                "name": "epoch",
                "type": "uinteger",
                "readonly": true,
                "required": true
              },
              "createdat": {
                "name": "createdat",
                "type": "timestamp",
                "required": true
              },
              "modifiedat": {
                "name": "modifiedat",
                "type": "timestamp",
                "required": true
              },
              "readonly": {
                "name": "readonly",
                "type": "boolean",
                "readonly": true,
                "required": true,
                "default": false
              },
              "compatibility": {
                "name": "compatibility",
                "type": "string",
                "enum": [
                  "none",
                  "backward",
                  "backward_transitive",
                  "forward",
                  "forward_transitive",
                  "full",
                  "full_transitive"
                ],
                "strict": false,
                "required": true,
                "default": "none"
              },
              "compatibilityauthority": {
                "name": "compatibilityauthority",
                "type": "string",
                "enum": [
                  "external",
                  "server"
                ],
                "strict": false
              },
              "deprecated": {
                "name": "deprecated",
                "type": "object",
                "attributes": {
                  "alternative": {
                    "name": "alternative",
                    "type": "url"
                  },
                  "docs": {
                    "name": "docs",
                    "type": "url"
                  },
                  "effective": {
                    "name": "effective",
                    "type": "timestamp"
                  },
                  "removal": {
                    "name": "removal",
                    "type": "timestamp"
                  },
                  "*": {
                    "name": "*",
                    "type": "any"
                  }
                }
              },
              "defaultversionid": {
                "name": "defaultversionid",
                "type": "string",
                "required": true
              },
              "defaultversionurl": {
                "name": "defaultversionurl",
                "type": "url",
                "readonly": true,
                "required": true
              },
              "defaultversionsticky": {
                "name": "defaultversionsticky",
                "type": "boolean",
                "required": true,
                "default": false
              }
            }
          },
          "samples": {
            "plural": "samples",
            "singular": "sample",
            "maxversions": 0,
            "setversionid": true,
            "setdefaultversionsticky": true,
            "hasdocument": true,
            "singleversionroot": false,
            "attributes": {
              "sampleid": {
                "name": "sampleid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "versionid": {
                "name": "versionid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "self": {
                "name": "self",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xid": {
                "name": "xid",
                "type": "xid",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "epoch": {
                "name": "epoch",
                "type": "uinteger",
                "readonly": true,
                "required": true
              },
              "name": {
                "name": "name",
                "type": "string"
              },
              "isdefault": {
                "name": "isdefault",
                "type": "boolean",
                "readonly": true,
                "required": true,
                "default": false
              },
              "description": {
                "name": "description",
                "type": "string"
              },
              "documentation": {
                "name": "documentation",
                "type": "url"
              },
              "labels": {
                "name": "labels",
                "type": "map",
                "item": {
                  "type": "string"
                }
              },
              "createdat": {
                "name": "createdat",
                "type": "timestamp",
                "required": true
              },
              "modifiedat": {
                "name": "modifiedat",
                "type": "timestamp",
                "required": true
              },
              "ancestor": {
                "name": "ancestor",
                "type": "string",
                "required": true
              },
              "contenttype": {
                "name": "contenttype",
                "type": "string"
              },
              "sampleurl": {
                "name": "sampleurl",
                "type": "url"
              },
              "sampleproxyurl": {
                "name": "sampleproxyurl",
                "type": "url"
              },
              "sample": {
                "name": "sample",
                "type": "any"
              }
            },
            "metaattributes": {
              "sampleid": {
                "name": "sampleid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "self": {
                "name": "self",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xid": {
                "name": "xid",
                "type": "xid",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xref": {
                "name": "xref",
                "type": "url"
              },
              "epoch": {
                "name": "epoch",
                "type": "uinteger",
                "readonly": true,
                "required": true
              },
              "createdat": {
                "name": "createdat",
                "type": "timestamp",
                "required": true
              },
              "modifiedat": {
                "name": "modifiedat",
                "type": "timestamp",
                "required": true
              },
              "readonly": {
                "name": "readonly",
                "type": "boolean",
                "readonly": true,
                "required": true,
                "default": false
              },
              "compatibility": {
                "name": "compatibility",
                "type": "string",
                "enum": [
                  "none",
                  "backward",
                  "backward_transitive",
                  "forward",
                  "forward_transitive",
                  "full",
                  "full_transitive"
                ],
                "strict": false,
                "required": true,
                "default": "none"
              },
              "compatibilityauthority": {
                "name": "compatibilityauthority",
                "type": "string",
                "enum": [
                  "external",
                  "server"
                ],
                "strict": false
              },
              "deprecated": {
                "name": "deprecated",
                "type": "object",
                "attributes": {
                  "alternative": {
                    "name": "alternative",
                    "type": "url"
                  },
                  "docs": {
                    "name": "docs",
                    "type": "url"
                  },
                  "effective": {
                    "name": "effective",
                    "type": "timestamp"
                  },
                  "removal": {
                    "name": "removal",
                    "type": "timestamp"
                  },
                  "*": {
                    "name": "*",
                    "type": "any"
                  }
                }
              },
              "defaultversionid": {
                "name": "defaultversionid",
                "type": "string",
                "required": true
              },
              "defaultversionurl": {
                "name": "defaultversionurl",
                "type": "url",
                "readonly": true,
                "required": true
              },
              "defaultversionsticky": {
                "name": "defaultversionsticky",
                "type": "boolean",
                "required": true,
                "default": false
              }
            }
          },
          "schemas": {
            "plural": "schemas",
            "singular": "schema",
            "maxversions": 0,
            "setversionid": true,
            "setdefaultversionsticky": true,
            "hasdocument": true,
            "singleversionroot": false,
            "attributes": {
              "schemaid": {
                "name": "schemaid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "versionid": {
                "name": "versionid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "self": {
                "name": "self",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xid": {
                "name": "xid",
                "type": "xid",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "epoch": {
                "name": "epoch",
                "type": "uinteger",
                "readonly": true,
                "required": true
              },
              "name": {
                "name": "name",
                "type": "string"
              },
              "isdefault": {
                "name": "isdefault",
                "type": "boolean",
                "readonly": true,
                "required": true,
                "default": false
              },
              "description": {
                "name": "description",
                "type": "string"
              },
              "documentation": {
                "name": "documentation",
                "type": "url"
              },
              "labels": {
                "name": "labels",
                "type": "map",
                "item": {
                  "type": "string"
                }
              },
              "createdat": {
                "name": "createdat",
                "type": "timestamp",
                "required": true
              },
              "modifiedat": {
                "name": "modifiedat",
                "type": "timestamp",
                "required": true
              },
              "ancestor": {
                "name": "ancestor",
                "type": "string",
                "required": true
              },
              "contenttype": {
                "name": "contenttype",
                "type": "string"
              },
              "schemaurl": {
                "name": "schemaurl",
                "type": "url"
              },
              "schemaproxyurl": {
                "name": "schemaproxyurl",
                "type": "url"
              },
              "schema": {
                "name": "schema",
                "type": "any"
              }
            },
            "metaattributes": {
              "schemaid": {
                "name": "schemaid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "self": {
                "name": "self",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xid": {
                "name": "xid",
                "type": "xid",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xref": {
                "name": "xref",
                "type": "url"
              },
              "epoch": {
                "name": "epoch",
                "type": "uinteger",
                "readonly": true,
                "required": true
              },
              "createdat": {
                "name": "createdat",
                "type": "timestamp",
                "required": true
              },
              "modifiedat": {
                "name": "modifiedat",
                "type": "timestamp",
                "required": true
              },
              "readonly": {
                "name": "readonly",
                "type": "boolean",
                "readonly": true,
                "required": true,
                "default": false
              },
              "compatibility": {
                "name": "compatibility",
                "type": "string",
                "enum": [
                  "none",
                  "backward",
                  "backward_transitive",
                  "forward",
                  "forward_transitive",
                  "full",
                  "full_transitive"
                ],
                "strict": false,
                "required": true,
                "default": "none"
              },
              "compatibilityauthority": {
                "name": "compatibilityauthority",
                "type": "string",
                "enum": [
                  "external",
                  "server"
                ],
                "strict": false
              },
              "deprecated": {
                "name": "deprecated",
                "type": "object",
                "attributes": {
                  "alternative": {
                    "name": "alternative",
                    "type": "url"
                  },
                  "docs": {
                    "name": "docs",
                    "type": "url"
                  },
                  "effective": {
                    "name": "effective",
                    "type": "timestamp"
                  },
                  "removal": {
                    "name": "removal",
                    "type": "timestamp"
                  },
                  "*": {
                    "name": "*",
                    "type": "any"
                  }
                }
              },
              "defaultversionid": {
                "name": "defaultversionid",
                "type": "string",
                "required": true
              },
              "defaultversionurl": {
                "name": "defaultversionurl",
                "type": "url",
                "readonly": true,
                "required": true
              },
              "defaultversionsticky": {
                "name": "defaultversionsticky",
                "type": "boolean",
                "required": true,
                "default": false
              }
            }
          }
        }
      }
    }
  },
  "modifiedat": "2025-04-30T14:59:20.791282513Z",
  "registryid": "xRegistry",
  "self": "#/",
  "specversion": "1.0-rc1",
  "xid": "/",
  "xregistryspecs": {
    "cloudevents-v1": {
      "xregistryspecid": "cloudevents-v1",
      "self": "#/xregistryspecs/cloudevents-v1",
      "xid": "/xregistryspecs/cloudevents-v1",
      "epoch": 14,
      "createdat": "2025-04-30T14:59:16.845759508Z",
      "modifiedat": "2025-04-30T14:59:17.986896821Z",
      "docsurl": "#/xregistryspecs/cloudevents-v1/docs",
      "docs": {
        "model.json": {
          "docid": "model.json",
          "self": "#/xregistryspecs/cloudevents-v1/docs/model.json",
          "xid": "/xregistryspecs/cloudevents-v1/docs/model.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/docs/model.json/meta",
          "meta": {
            "docid": "model.json",
            "self": "#/xregistryspecs/cloudevents-v1/docs/model.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/docs/model.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:16.845759508Z",
            "modifiedat": "2025-04-30T14:59:16.845759508Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/docs/model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/docs/model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "model.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/docs/model.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/docs/model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:16.845759508Z",
              "modifiedat": "2025-04-30T14:59:16.845759508Z",
              "ancestor": "v1.0-rc1",
              "docbase64": "ewogICJncm91cHMiOiB7CiAgICAiJGluY2x1ZGVzIjogWwogICAgICAiLi4vZW5kcG9pbnQvbW9kZWwuanNvbiNncm91cHMiLAogICAgICAiLi4vbWVzc2FnZS9tb2RlbC5qc29uI2dyb3VwcyIsCiAgICAgICIuLi9zY2hlbWEvbW9kZWwuanNvbiNncm91cHMiCiAgICBdCiAgfQp9Cg=="
            }
          },
          "versionscount": 1
        },
        "spec.md": {
          "docid": "spec.md",
          "self": "#/xregistryspecs/cloudevents-v1/docs/spec.md",
          "xid": "/xregistryspecs/cloudevents-v1/docs/spec.md",
          "metaurl": "#/xregistryspecs/cloudevents-v1/docs/spec.md/meta",
          "meta": {
            "docid": "spec.md",
            "self": "#/xregistryspecs/cloudevents-v1/docs/spec.md/meta",
            "xid": "/xregistryspecs/cloudevents-v1/docs/spec.md/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:16.94649365Z",
            "modifiedat": "2025-04-30T14:59:16.94649365Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/docs/spec.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/docs/spec.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "spec.md",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/docs/spec.md/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/docs/spec.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:16.94649365Z",
              "modifiedat": "2025-04-30T14:59:16.94649365Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "docscount": 2,
      "samplesurl": "#/xregistryspecs/cloudevents-v1/samples",
      "samples": {
        "contoso-erp-jsons07.xreg.json": {
          "sampleid": "contoso-erp-jsons07.xreg.json",
          "self": "#/xregistryspecs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json",
          "xid": "/xregistryspecs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/meta",
          "meta": {
            "sampleid": "contoso-erp-jsons07.xreg.json",
            "self": "#/xregistryspecs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:17.320875698Z",
            "modifiedat": "2025-04-30T14:59:17.320875698Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "contoso-erp-jsons07.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:17.320875698Z",
              "modifiedat": "2025-04-30T14:59:17.320875698Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "inkjet-proto3.xreg.json": {
          "sampleid": "inkjet-proto3.xreg.json",
          "self": "#/xregistryspecs/cloudevents-v1/samples/inkjet-proto3.xreg.json",
          "xid": "/xregistryspecs/cloudevents-v1/samples/inkjet-proto3.xreg.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/samples/inkjet-proto3.xreg.json/meta",
          "meta": {
            "sampleid": "inkjet-proto3.xreg.json",
            "self": "#/xregistryspecs/cloudevents-v1/samples/inkjet-proto3.xreg.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/samples/inkjet-proto3.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:17.403148202Z",
            "modifiedat": "2025-04-30T14:59:17.403148202Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/samples/inkjet-proto3.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/samples/inkjet-proto3.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "inkjet-proto3.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/samples/inkjet-proto3.xreg.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/samples/inkjet-proto3.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:17.403148202Z",
              "modifiedat": "2025-04-30T14:59:17.403148202Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "lightbulb-avro.xreg.json": {
          "sampleid": "lightbulb-avro.xreg.json",
          "self": "#/xregistryspecs/cloudevents-v1/samples/lightbulb-avro.xreg.json",
          "xid": "/xregistryspecs/cloudevents-v1/samples/lightbulb-avro.xreg.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/samples/lightbulb-avro.xreg.json/meta",
          "meta": {
            "sampleid": "lightbulb-avro.xreg.json",
            "self": "#/xregistryspecs/cloudevents-v1/samples/lightbulb-avro.xreg.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/samples/lightbulb-avro.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:17.483935578Z",
            "modifiedat": "2025-04-30T14:59:17.483935578Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/samples/lightbulb-avro.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/samples/lightbulb-avro.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "lightbulb-avro.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/samples/lightbulb-avro.xreg.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/samples/lightbulb-avro.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:17.483935578Z",
              "modifiedat": "2025-04-30T14:59:17.483935578Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "schemastore_org.xreg.json": {
          "sampleid": "schemastore_org.xreg.json",
          "self": "#/xregistryspecs/cloudevents-v1/samples/schemastore_org.xreg.json",
          "xid": "/xregistryspecs/cloudevents-v1/samples/schemastore_org.xreg.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/samples/schemastore_org.xreg.json/meta",
          "meta": {
            "sampleid": "schemastore_org.xreg.json",
            "self": "#/xregistryspecs/cloudevents-v1/samples/schemastore_org.xreg.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/samples/schemastore_org.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:17.986896821Z",
            "modifiedat": "2025-04-30T14:59:17.986896821Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/samples/schemastore_org.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/samples/schemastore_org.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "schemastore_org.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/samples/schemastore_org.xreg.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/samples/schemastore_org.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:17.986896821Z",
              "modifiedat": "2025-04-30T14:59:17.986896821Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "smartoven-xsd.xreg.json": {
          "sampleid": "smartoven-xsd.xreg.json",
          "self": "#/xregistryspecs/cloudevents-v1/samples/smartoven-xsd.xreg.json",
          "xid": "/xregistryspecs/cloudevents-v1/samples/smartoven-xsd.xreg.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/samples/smartoven-xsd.xreg.json/meta",
          "meta": {
            "sampleid": "smartoven-xsd.xreg.json",
            "self": "#/xregistryspecs/cloudevents-v1/samples/smartoven-xsd.xreg.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/samples/smartoven-xsd.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:17.564186813Z",
            "modifiedat": "2025-04-30T14:59:17.564186813Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/samples/smartoven-xsd.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/samples/smartoven-xsd.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "smartoven-xsd.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/samples/smartoven-xsd.xreg.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/samples/smartoven-xsd.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:17.564186813Z",
              "modifiedat": "2025-04-30T14:59:17.564186813Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "vacuumcleaner-avro.xreg.json": {
          "sampleid": "vacuumcleaner-avro.xreg.json",
          "self": "#/xregistryspecs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json",
          "xid": "/xregistryspecs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/meta",
          "meta": {
            "sampleid": "vacuumcleaner-avro.xreg.json",
            "self": "#/xregistryspecs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:17.645999378Z",
            "modifiedat": "2025-04-30T14:59:17.645999378Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "vacuumcleaner-avro.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:17.645999378Z",
              "modifiedat": "2025-04-30T14:59:17.645999378Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "watchkam-jsons07.xreg.json": {
          "sampleid": "watchkam-jsons07.xreg.json",
          "self": "#/xregistryspecs/cloudevents-v1/samples/watchkam-jsons07.xreg.json",
          "xid": "/xregistryspecs/cloudevents-v1/samples/watchkam-jsons07.xreg.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/meta",
          "meta": {
            "sampleid": "watchkam-jsons07.xreg.json",
            "self": "#/xregistryspecs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:17.732263108Z",
            "modifiedat": "2025-04-30T14:59:17.732263108Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "watchkam-jsons07.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:17.732263108Z",
              "modifiedat": "2025-04-30T14:59:17.732263108Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "waterboiler-mqtt5-jsons07.xreg.json": {
          "sampleid": "waterboiler-mqtt5-jsons07.xreg.json",
          "self": "#/xregistryspecs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json",
          "xid": "/xregistryspecs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/meta",
          "meta": {
            "sampleid": "waterboiler-mqtt5-jsons07.xreg.json",
            "self": "#/xregistryspecs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:17.82052839Z",
            "modifiedat": "2025-04-30T14:59:17.82052839Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "waterboiler-mqtt5-jsons07.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:17.82052839Z",
              "modifiedat": "2025-04-30T14:59:17.82052839Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICAgIiRzY2hlbWEiOiAiaHR0cHM6Ly9jbG91ZGV2ZW50cy5pby9zY2hlbWFzL3JlZ2lzdHJ5IiwKICAgICJzcGVjdmVyc2lvbiI6ICIxLjAtcmMxIiwKICAgICJlbmRwb2ludHMiOiB7CiAgICAgICAgIldhdGVyQm9pbGVyLlByb2R1Y2VyIjogewogICAgICAgICAgICAidXNhZ2UiOiAicHJvZHVjZXIiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiUHJvZHVjZXIgZW5kcG9pbnQgZm9yIHdhdGVyIGJvaWxlciBjb21tYW5kcyIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJNUVRULzUuMCIsCiAgICAgICAgICAgICJwcm90b2NvbG9wdGlvbnMiOiB7CiAgICAgICAgICAgICAgICAiZW5kcG9pbnRzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInVyaSI6ICJtcXR0Oi8vbXF0dGJyb2tlcjEuZXhhbXBsZS5jb206MTg4MyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJtZXNzYWdlZ3JvdXBzIjogWwogICAgICAgICAgICAgICAgIiMvbWVzc2FnZWdyb3Vwcy9XYXRlckJvaWxlci5FdmVudHMiCiAgICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJXYXRlckJvaWxlci5Db25zdW1lciI6IHsKICAgICAgICAgICAgInVzYWdlIjogImNvbnN1bWVyIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkNvbnN1bWVyIGVuZHBvaW50IGZvciB3YXRlciBib2lsZXIgZXZlbnRzIiwKICAgICAgICAgICAgInByb3RvY29sIjogIk1RVFQvNS4wIiwKICAgICAgICAgICAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICAgICAgICAgICAgICJlbmRwb2ludHMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidXJpIjogIm1xdHQ6Ly9tcXR0YnJva2VyMS5leGFtcGxlLmNvbToxODgzIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgIm1lc3NhZ2Vncm91cHMiOiBbCiAgICAgICAgICAgICAgICAiIy9tZXNzYWdlZ3JvdXBzL1dhdGVyQm9pbGVyLkV2ZW50cyIKICAgICAgICAgICAgXQogICAgICAgIH0KICAgIH0sCiAgICAibWVzc2FnZWdyb3VwcyI6IHsKICAgICAgICAiV2F0ZXJCb2lsZXIuRXZlbnRzIjogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRXZlbnRzIGZvciB3YXRlciBib2lsZXIgb3BlcmF0aW9ucyIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJNUVRULzUuMCIsCiAgICAgICAgICAgICJtZXNzYWdlcyI6IHsKICAgICAgICAgICAgICAgICJXYXRlckJvaWxlci5UZW1wZXJhdHVyZVVwZGF0ZSI6IHsKICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRXZlbnQgZm9yIHdhdGVyIGJvaWxlciB0ZW1wZXJhdHVyZSB1cGRhdGUiLAogICAgICAgICAgICAgICAgICAgICJwcm90b2NvbCI6ICJNUVRULzUuMCIsCiAgICAgICAgICAgICAgICAgICAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgInRvcGljX25hbWUiOiAid2F0ZXJib2lsZXIve2JvaWxlcklkfS90ZW1wZXJhdHVyZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJxb3MiOiAxLAogICAgICAgICAgICAgICAgICAgICAgICAicmV0YWluIjogZmFsc2UKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJkYXRhc2NoZW1hZm9ybWF0IjogIkpTT05TY2hlbWEvRHJhZnQtMDciLAogICAgICAgICAgICAgICAgICAgICJkYXRhc2NoZW1hdXJpIjogIiMvc2NoZW1hZ3JvdXBzL1dhdGVyQm9pbGVyL3NjaGVtYXMvV2F0ZXJCb2lsZXIuVGVtcGVyYXR1cmVVcGRhdGVFdmVudERhdGEiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIldhdGVyQm9pbGVyLlN0YXR1c0NoYW5nZSI6IHsKICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRXZlbnQgZm9yIHdhdGVyIGJvaWxlciBzdGF0dXMgY2hhbmdlIiwKICAgICAgICAgICAgICAgICAgICAicHJvdG9jb2wiOiAiTVFUVC81LjAiLAogICAgICAgICAgICAgICAgICAgICJwcm90b2NvbG9wdGlvbnMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0b3BpY19uYW1lIjogIndhdGVyYm9pbGVyL3tib2lsZXJJZH0vc3RhdHVzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInFvcyI6IDEsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXRhaW4iOiBmYWxzZQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImRhdGFzY2hlbWFmb3JtYXQiOiAiSlNPTlNjaGVtYS9EcmFmdC0wNyIsCiAgICAgICAgICAgICAgICAgICAgImRhdGFzY2hlbWF1cmkiOiAiIy9zY2hlbWFncm91cHMvV2F0ZXJCb2lsZXIvc2NoZW1hcy9XYXRlckJvaWxlci5TdGF0dXNDaGFuZ2VFdmVudERhdGEiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgInNjaGVtYWdyb3VwcyI6IHsKICAgICAgICAiV2F0ZXJCb2lsZXIiOiB7CiAgICAgICAgICAgICJzY2hlbWFzIjogewogICAgICAgICAgICAgICAgIldhdGVyQm9pbGVyLlRlbXBlcmF0dXJlVXBkYXRlRXZlbnREYXRhIjogewogICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAiSlNPTlNjaGVtYS9EcmFmdC0wNyIsCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb25zIjogewogICAgICAgICAgICAgICAgICAgICAgICAiMSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAiSlNPTlNjaGVtYS9EcmFmdC0wNyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic2NoZW1hIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlRlbXBlcmF0dXJlVXBkYXRlRXZlbnREYXRhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRGF0YSBzY2hlbWEgZm9yIHdhdGVyIGJvaWxlciB0ZW1wZXJhdHVyZSB1cGRhdGUgZXZlbnQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJib2lsZXJJZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSWRlbnRpZmllciBvZiB0aGUgd2F0ZXIgYm9pbGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGVtcGVyYXR1cmUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkN1cnJlbnQgdGVtcGVyYXR1cmUgcmVhZGluZyBpbiBDZWxzaXVzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGltZXN0YW1wIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRXZlbnQgdGltZXN0YW1wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJib2lsZXJJZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZW1wZXJhdHVyZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0aW1lc3RhbXAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJXYXRlckJvaWxlci5TdGF0dXNDaGFuZ2VFdmVudERhdGEiOiB7CiAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJKU09OU2NoZW1hL0RyYWZ0LTA3IiwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbnMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICIxIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJKU09OU2NoZW1hL0RyYWZ0LTA3IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzY2hlbWEiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiRzY2hlbWEiOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiU3RhdHVzQ2hhbmdlRXZlbnREYXRhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRGF0YSBzY2hlbWEgZm9yIHdhdGVyIGJvaWxlciBzdGF0dXMgY2hhbmdlIGV2ZW50IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYm9pbGVySWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIklkZW50aWZpZXIgb2YgdGhlIHdhdGVyIGJvaWxlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTmV3IHN0YXR1cyBvZiB0aGUgd2F0ZXIgYm9pbGVyIChlLmcuLCBvbi9vZmYpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGltZXN0YW1wIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRXZlbnQgdGltZXN0YW1wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJib2lsZXJJZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdGF0dXMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGltZXN0YW1wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo="
            }
          },
          "versionscount": 1
        },
        "windgenerator-kafka-avro.xreg.json": {
          "sampleid": "windgenerator-kafka-avro.xreg.json",
          "self": "#/xregistryspecs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json",
          "xid": "/xregistryspecs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/meta",
          "meta": {
            "sampleid": "windgenerator-kafka-avro.xreg.json",
            "self": "#/xregistryspecs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:17.904650442Z",
            "modifiedat": "2025-04-30T14:59:17.904650442Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "windgenerator-kafka-avro.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:17.904650442Z",
              "modifiedat": "2025-04-30T14:59:17.904650442Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vY2xvdWRldmVudHMuaW8vc2NoZW1hcy9yZWdpc3RyeSIsCiAgInNwZWN2ZXJzaW9uIjogIjEuMC1yYzEiLAogICJpZCI6ICJ1cm46dXVpZDpORVctVVVJRC1XSU5ER0VORVJBVE9SIiwKICAibWVzc2FnZWdyb3VwcyI6IHsKICAgICJXaW5kR2VuZXJhdG9yLkV2ZW50cyI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIkV2ZW50cyBmb3Igd2luZCBnZW5lcmF0b3Igb3BlcmF0aW9ucyIsCiAgICAgICJwcm90b2NvbCI6ICJLQUZLQSIsCiAgICAgICJtZXNzYWdlcyI6IHsKICAgICAgICAiV2luZEdlbmVyYXRvci5Qb3dlck91dHB1dFVwZGF0ZSI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJFdmVudCBmb3Igd2luZCBnZW5lcmF0b3IgcG93ZXIgb3V0cHV0IHVwZGF0ZSIsCiAgICAgICAgICAicHJvdG9jb2wiOiAiS0FGS0EiLAogICAgICAgICAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICAgICAgICAgImhlYWRlcnMiOiB7CiAgICAgICAgICAgICAgImFjdGlvbiI6IHsKICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJwb3dlck91dHB1dCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJrZXkiOiAie2dlbmVyYXRvcklkfSIKICAgICAgICAgIH0sCiAgICAgICAgICAiZGF0YXNjaGVtYWZvcm1hdCI6ICJBdnJvLzEuMTEiLAogICAgICAgICAgImRhdGFzY2hlbWF1cmkiOiAiIy9zY2hlbWFncm91cHMvV2luZEdlbmVyYXRvci9zY2hlbWFzL1dpbmRHZW5lcmF0b3IuUG93ZXJPdXRwdXRVcGRhdGVFdmVudERhdGEiCiAgICAgICAgfSwKICAgICAgICAiV2luZEdlbmVyYXRvci5TdGF0dXNDaGFuZ2UiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRXZlbnQgZm9yIHdpbmQgZ2VuZXJhdG9yIHN0YXR1cyBjaGFuZ2UiLAogICAgICAgICAgInByb3RvY29sIjogIktBRktBIiwKICAgICAgICAgICJwcm90b2NvbG9wdGlvbnMiOiB7CiAgICAgICAgICAgICJoZWFkZXJzIjogewogICAgICAgICAgICAgICJhY3Rpb24iOiB7CiAgICAgICAgICAgICAgICAidmFsdWUiOiAic3RhdHVzQ2hhbmdlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImtleSI6ICJ7Z2VuZXJhdG9ySWR9IgogICAgICAgICAgfSwKICAgICAgICAgICJkYXRhc2NoZW1hZm9ybWF0IjogIkF2cm8vMS4xMSIsCiAgICAgICAgICAiZGF0YXNjaGVtYXVyaSI6ICIjL3NjaGVtYWdyb3Vwcy9XaW5kR2VuZXJhdG9yL3NjaGVtYXMvV2luZEdlbmVyYXRvci5TdGF0dXNDaGFuZ2VFdmVudERhdGEiCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwKICAic2NoZW1hZ3JvdXBzIjogewogICAgIldpbmRHZW5lcmF0b3IiOiB7CiAgICAgICJzY2hlbWFzIjogewogICAgICAgICJXaW5kR2VuZXJhdG9yLlBvd2VyT3V0cHV0VXBkYXRlRXZlbnREYXRhIjogewogICAgICAgICAgImZvcm1hdCI6ICJBdnJvLzEuMTEiLAogICAgICAgICAgInZlcnNpb25zIjogewogICAgICAgICAgICAiMSI6IHsKICAgICAgICAgICAgICAiZm9ybWF0IjogIkF2cm8vMS4xMSIsCiAgICAgICAgICAgICAgInNjaGVtYSI6IHsKICAgICAgICAgICAgICAgICJ0eXBlIjogInJlY29yZCIsCiAgICAgICAgICAgICAgICAibmFtZSI6ICJQb3dlck91dHB1dFVwZGF0ZUV2ZW50RGF0YSIsCiAgICAgICAgICAgICAgICAiZG9jIjogIkRhdGEgc2NoZW1hIGZvciB3aW5kIGdlbmVyYXRvciBwb3dlciBvdXRwdXQgdXBkYXRlIGV2ZW50IiwKICAgICAgICAgICAgICAgICJmaWVsZHMiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJnZW5lcmF0b3JJZCIsCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAiZG9jIjogIklkZW50aWZpZXIgb2YgdGhlIHdpbmQgZ2VuZXJhdG9yIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicG93ZXJPdXRwdXQiLAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImRvdWJsZSIsCiAgICAgICAgICAgICAgICAgICAgImRvYyI6ICJDdXJyZW50IHBvd2VyIG91dHB1dCBpbiBraWxvd2F0dHMiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJ0aW1lc3RhbXAiLAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImxvbmciLAogICAgICAgICAgICAgICAgICAgICJkb2MiOiAiRXZlbnQgdGltZXN0YW1wIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiV2luZEdlbmVyYXRvci5TdGF0dXNDaGFuZ2VFdmVudERhdGEiOiB7CiAgICAgICAgICAiZm9ybWF0IjogIkF2cm8vMS4xMSIsCiAgICAgICAgICAidmVyc2lvbnMiOiB7CiAgICAgICAgICAgICIxIjogewogICAgICAgICAgICAgICJmb3JtYXQiOiAiQXZyby8xLjExIiwKICAgICAgICAgICAgICAic2NoZW1hIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAicmVjb3JkIiwKICAgICAgICAgICAgICAgICJuYW1lIjogIlN0YXR1c0NoYW5nZUV2ZW50RGF0YSIsCiAgICAgICAgICAgICAgICAiZG9jIjogIkRhdGEgc2NoZW1hIGZvciB3aW5kIGdlbmVyYXRvciBzdGF0dXMgY2hhbmdlIGV2ZW50IiwKICAgICAgICAgICAgICAgICJmaWVsZHMiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJnZW5lcmF0b3JJZCIsCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAiZG9jIjogIklkZW50aWZpZXIgb2YgdGhlIHdpbmQgZ2VuZXJhdG9yIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAic3RhdHVzIiwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJkb2MiOiAiTmV3IHN0YXR1cyBvZiB0aGUgd2luZCBnZW5lcmF0b3IiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJ0aW1lc3RhbXAiLAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImxvbmciLAogICAgICAgICAgICAgICAgICAgICJkb2MiOiAiRXZlbnQgdGltZXN0YW1wIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Cg=="
            }
          },
          "versionscount": 1
        }
      },
      "samplescount": 9,
      "schemasurl": "#/xregistryspecs/cloudevents-v1/schemas",
      "schemas": {
        "document-schema.avsc": {
          "schemaid": "document-schema.avsc",
          "self": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.avsc",
          "xid": "/xregistryspecs/cloudevents-v1/schemas/document-schema.avsc",
          "metaurl": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.avsc/meta",
          "meta": {
            "schemaid": "document-schema.avsc",
            "self": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.avsc/meta",
            "xid": "/xregistryspecs/cloudevents-v1/schemas/document-schema.avsc/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:17.032382191Z",
            "modifiedat": "2025-04-30T14:59:17.032382191Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.avsc/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.avsc",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:17.032382191Z",
              "modifiedat": "2025-04-30T14:59:17.032382191Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "document-schema.json": {
          "schemaid": "document-schema.json",
          "self": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.json",
          "xid": "/xregistryspecs/cloudevents-v1/schemas/document-schema.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.json/meta",
          "meta": {
            "schemaid": "document-schema.json",
            "self": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/schemas/document-schema.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:17.117142287Z",
            "modifiedat": "2025-04-30T14:59:17.117142287Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:17.117142287Z",
              "modifiedat": "2025-04-30T14:59:17.117142287Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "openapi.json": {
          "schemaid": "openapi.json",
          "self": "#/xregistryspecs/cloudevents-v1/schemas/openapi.json",
          "xid": "/xregistryspecs/cloudevents-v1/schemas/openapi.json",
          "metaurl": "#/xregistryspecs/cloudevents-v1/schemas/openapi.json/meta",
          "meta": {
            "schemaid": "openapi.json",
            "self": "#/xregistryspecs/cloudevents-v1/schemas/openapi.json/meta",
            "xid": "/xregistryspecs/cloudevents-v1/schemas/openapi.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:17.215721404Z",
            "modifiedat": "2025-04-30T14:59:17.215721404Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/cloudevents-v1/schemas/openapi.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/cloudevents-v1/schemas/openapi.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "openapi.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/cloudevents-v1/schemas/openapi.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/cloudevents-v1/schemas/openapi.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:17.215721404Z",
              "modifiedat": "2025-04-30T14:59:17.215721404Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "schemascount": 3
    },
    "core-v1": {
      "xregistryspecid": "core-v1",
      "self": "#/xregistryspecs/core-v1",
      "xid": "/xregistryspecs/core-v1",
      "epoch": 12,
      "createdat": "2025-04-30T14:59:18.086944483Z",
      "modifiedat": "2025-04-30T14:59:19.113566618Z",
      "docsurl": "#/xregistryspecs/core-v1/docs",
      "docs": {
        "model.json": {
          "docid": "model.json",
          "self": "#/xregistryspecs/core-v1/docs/model.json",
          "xid": "/xregistryspecs/core-v1/docs/model.json",
          "metaurl": "#/xregistryspecs/core-v1/docs/model.json/meta",
          "meta": {
            "docid": "model.json",
            "self": "#/xregistryspecs/core-v1/docs/model.json/meta",
            "xid": "/xregistryspecs/core-v1/docs/model.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:18.086944483Z",
            "modifiedat": "2025-04-30T14:59:18.086944483Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/docs/model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/docs/model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "model.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/docs/model.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/docs/model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:18.086944483Z",
              "modifiedat": "2025-04-30T14:59:18.086944483Z",
              "ancestor": "v1.0-rc1",
              "docbase64": "ewogICJhdHRyaWJ1dGVzIjogewogICAgInNwZWN2ZXJzaW9uIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAicmVhZG9ubHkiOiB0cnVlLAogICAgICAicmVxdWlyZWQiOiB0cnVlLAogICAgICAiZGVmYXVsdCI6ICIxLjAtcmMxIgogICAgfSwKICAgICJyZWdpc3RyeWlkIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiaW1tdXRhYmxlIjogdHJ1ZSwKICAgICAgInJlYWRvbmx5IjogdHJ1ZSwKICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgfSwKICAgICJzZWxmIjogewogICAgICAidHlwZSI6ICJ1cmwiLAogICAgICAiaW1tdXRhYmxlIjogdHJ1ZSwKICAgICAgInJlYWRvbmx5IjogdHJ1ZSwKICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgfSwKICAgICJzaG9ydHNlbGYiOiB7CiAgICAgICJ0eXBlIjogInVybCIsCiAgICAgICJpbW11dGFibGUiOiB0cnVlLAogICAgICAicmVhZG9ubHkiOiB0cnVlCiAgICB9LAogICAgInhpZCI6IHsKICAgICAgInR5cGUiOiAieGlkIiwKICAgICAgInJlYWRvbmx5IjogdHJ1ZSwKICAgICAgImltbXV0YWJsZSI6IHRydWUsCiAgICAgICJyZXF1aXJlZCI6IHRydWUKICAgIH0sCiAgICAiZXBvY2giOiB7CiAgICAgICJ0eXBlIjogInVpbnRlZ2VyIiwKICAgICAgInJlYWRvbmx5IjogdHJ1ZSwKICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgfSwKICAgICJuYW1lIjogewogICAgICAidHlwZSI6ICJzdHJpbmciCiAgICB9LAogICAgImRlc2NyaXB0aW9uIjogewogICAgICAidHlwZSI6ICJzdHJpbmciCiAgICB9LAogICAgImRvY3VtZW50YXRpb24iOiB7CiAgICAgICJ0eXBlIjogInVybCIKICAgIH0sCiAgICAibGFiZWxzIjogewogICAgICAidHlwZSI6ICJtYXAiLAogICAgICAiaXRlbSI6IHsKICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgIH0KICAgIH0sCiAgICAiY3JlYXRlZGF0IjogewogICAgICAidHlwZSI6ICJ0aW1lc3RhbXAiLAogICAgICAicmVxdWlyZWQiOiB0cnVlCiAgICB9LAogICAgIm1vZGlmaWVkYXQiOiB7CiAgICAgICJ0eXBlIjogInRpbWVzdGFtcCIsCiAgICAgICJyZXF1aXJlZCI6IHRydWUKICAgIH0sCgogICAgImNhcGFiaWxpdGllcyI6IHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgImF0dHJpYnV0ZXMiOiB7CiAgICAgICAgIioiOiB7CiAgICAgICAgICAidHlwZSI6ICJhbnkiCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIm1vZGVsIjogewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAiYXR0cmlidXRlcyI6IHsKICAgICAgICAiKiI6IHsKICAgICAgICAgICJ0eXBlIjogImFueSIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K"
            }
          },
          "versionscount": 1
        },
        "primer.md": {
          "docid": "primer.md",
          "self": "#/xregistryspecs/core-v1/docs/primer.md",
          "xid": "/xregistryspecs/core-v1/docs/primer.md",
          "metaurl": "#/xregistryspecs/core-v1/docs/primer.md/meta",
          "meta": {
            "docid": "primer.md",
            "self": "#/xregistryspecs/core-v1/docs/primer.md/meta",
            "xid": "/xregistryspecs/core-v1/docs/primer.md/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:18.177255221Z",
            "modifiedat": "2025-04-30T14:59:18.177255221Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/docs/primer.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/docs/primer.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "primer.md",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/docs/primer.md/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/docs/primer.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:18.177255221Z",
              "modifiedat": "2025-04-30T14:59:18.177255221Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "sample-model.json": {
          "docid": "sample-model.json",
          "self": "#/xregistryspecs/core-v1/docs/sample-model.json",
          "xid": "/xregistryspecs/core-v1/docs/sample-model.json",
          "metaurl": "#/xregistryspecs/core-v1/docs/sample-model.json/meta",
          "meta": {
            "docid": "sample-model.json",
            "self": "#/xregistryspecs/core-v1/docs/sample-model.json/meta",
            "xid": "/xregistryspecs/core-v1/docs/sample-model.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:18.265627652Z",
            "modifiedat": "2025-04-30T14:59:18.265627652Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/docs/sample-model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/docs/sample-model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "sample-model.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/docs/sample-model.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/docs/sample-model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:18.265627652Z",
              "modifiedat": "2025-04-30T14:59:18.265627652Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "sample.png": {
          "docid": "sample.png",
          "self": "#/xregistryspecs/core-v1/docs/sample.png",
          "xid": "/xregistryspecs/core-v1/docs/sample.png",
          "metaurl": "#/xregistryspecs/core-v1/docs/sample.png/meta",
          "meta": {
            "docid": "sample.png",
            "self": "#/xregistryspecs/core-v1/docs/sample.png/meta",
            "xid": "/xregistryspecs/core-v1/docs/sample.png/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:18.356307115Z",
            "modifiedat": "2025-04-30T14:59:18.356307115Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/docs/sample.png/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/docs/sample.png/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "sample.png",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/docs/sample.png/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/docs/sample.png/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:18.356307115Z",
              "modifiedat": "2025-04-30T14:59:18.356307115Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "spec.md": {
          "docid": "spec.md",
          "self": "#/xregistryspecs/core-v1/docs/spec.md",
          "xid": "/xregistryspecs/core-v1/docs/spec.md",
          "metaurl": "#/xregistryspecs/core-v1/docs/spec.md/meta",
          "meta": {
            "docid": "spec.md",
            "self": "#/xregistryspecs/core-v1/docs/spec.md/meta",
            "xid": "/xregistryspecs/core-v1/docs/spec.md/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:18.624875097Z",
            "modifiedat": "2025-04-30T14:59:18.624875097Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/docs/spec.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/docs/spec.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "spec.md",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/docs/spec.md/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/docs/spec.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:18.624875097Z",
              "modifiedat": "2025-04-30T14:59:18.624875097Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "xregbasicmodel.png": {
          "docid": "xregbasicmodel.png",
          "self": "#/xregistryspecs/core-v1/docs/xregbasicmodel.png",
          "xid": "/xregistryspecs/core-v1/docs/xregbasicmodel.png",
          "metaurl": "#/xregistryspecs/core-v1/docs/xregbasicmodel.png/meta",
          "meta": {
            "docid": "xregbasicmodel.png",
            "self": "#/xregistryspecs/core-v1/docs/xregbasicmodel.png/meta",
            "xid": "/xregistryspecs/core-v1/docs/xregbasicmodel.png/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:18.445406508Z",
            "modifiedat": "2025-04-30T14:59:18.445406508Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/docs/xregbasicmodel.png/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/docs/xregbasicmodel.png/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "xregbasicmodel.png",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/docs/xregbasicmodel.png/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/docs/xregbasicmodel.png/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:18.445406508Z",
              "modifiedat": "2025-04-30T14:59:18.445406508Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "xregfullmodel.png": {
          "docid": "xregfullmodel.png",
          "self": "#/xregistryspecs/core-v1/docs/xregfullmodel.png",
          "xid": "/xregistryspecs/core-v1/docs/xregfullmodel.png",
          "metaurl": "#/xregistryspecs/core-v1/docs/xregfullmodel.png/meta",
          "meta": {
            "docid": "xregfullmodel.png",
            "self": "#/xregistryspecs/core-v1/docs/xregfullmodel.png/meta",
            "xid": "/xregistryspecs/core-v1/docs/xregfullmodel.png/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:18.53500892Z",
            "modifiedat": "2025-04-30T14:59:18.53500892Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/docs/xregfullmodel.png/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/docs/xregfullmodel.png/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "xregfullmodel.png",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/docs/xregfullmodel.png/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/docs/xregfullmodel.png/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:18.53500892Z",
              "modifiedat": "2025-04-30T14:59:18.53500892Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "docscount": 7,
      "samplesurl": "#/xregistryspecs/core-v1/samples",
      "samples": {
        "contoso-crm.cereg": {
          "sampleid": "contoso-crm.cereg",
          "self": "#/xregistryspecs/core-v1/samples/contoso-crm.cereg",
          "xid": "/xregistryspecs/core-v1/samples/contoso-crm.cereg",
          "metaurl": "#/xregistryspecs/core-v1/samples/contoso-crm.cereg/meta",
          "meta": {
            "sampleid": "contoso-crm.cereg",
            "self": "#/xregistryspecs/core-v1/samples/contoso-crm.cereg/meta",
            "xid": "/xregistryspecs/core-v1/samples/contoso-crm.cereg/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:19.113566618Z",
            "modifiedat": "2025-04-30T14:59:19.113566618Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/samples/contoso-crm.cereg/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/samples/contoso-crm.cereg/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "contoso-crm.cereg",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/samples/contoso-crm.cereg/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/samples/contoso-crm.cereg/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:19.113566618Z",
              "modifiedat": "2025-04-30T14:59:19.113566618Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "doc-store-data.json": {
          "sampleid": "doc-store-data.json",
          "self": "#/xregistryspecs/core-v1/samples/doc-store-data.json",
          "xid": "/xregistryspecs/core-v1/samples/doc-store-data.json",
          "metaurl": "#/xregistryspecs/core-v1/samples/doc-store-data.json/meta",
          "meta": {
            "sampleid": "doc-store-data.json",
            "self": "#/xregistryspecs/core-v1/samples/doc-store-data.json/meta",
            "xid": "/xregistryspecs/core-v1/samples/doc-store-data.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:18.730611247Z",
            "modifiedat": "2025-04-30T14:59:18.730611247Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/samples/doc-store-data.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/samples/doc-store-data.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "doc-store-data.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/samples/doc-store-data.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/samples/doc-store-data.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:18.730611247Z",
              "modifiedat": "2025-04-30T14:59:18.730611247Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICJuYW1lIjogIkRvY3VtZW50IFN0b3JlIFNhbXBsZSIsCiAgImRpcnMiOiB7CiAgICAiZm9ybXMiOiB7CiAgICAgICJmaWxlcyI6IHsKICAgICAgICAiMTA0MCI6IHsKICAgICAgICAgICJ2ZXJzaW9uaWQiOiAidjAiLAogICAgICAgICAgImNvbnRlbnR0eXBlIjogInRleHQvcGxhaW4iLAogICAgICAgICAgImZpbGUiOiAiVGhpcyBpcyBmb3JtIDEwNDAiCiAgICAgICAgfSwKICAgICAgICAiMTA5MCI6IHsKICAgICAgICAgICJ2ZXJzaW9ucyI6IHsKICAgICAgICAgICAgInYxIjogewogICAgICAgICAgICAgICJjb250ZW50dHlwZSI6ICJ0ZXh0L3BsYWluIiwKICAgICAgICAgICAgICAiZmlsZSI6ICJUaGlzIGlzIGZvcm0gMTA5MCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInYyIjogewogICAgICAgICAgICAgICAiY29udGVudHR5cGUiOiAidGV4dC9wbGFpbiIsCiAgICAgICAgICAgICAgImZpbGUiOiAiVGhpcyBpcyBmb3JtIDEwOTAgLSBzZWUgbWUgc2hpbmUhIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgInByb3Bvc2FscyI6IHsKICAgICAgImZpbGVzIjogewogICAgICAgICJuZXctaG9tZS1Kb25lcyI6IHsKICAgICAgICAgICJjb250ZW50dHlwZSI6ICJ0ZXh0L3BsYWluIiwKICAgICAgICAgICJmaWxlYmFzZTY0IjogIlNHOXRaU0J3YkdGdWN5Qm1iM0lnZEdobElFcHZibVZ6SndvPSIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K"
            }
          },
          "versionscount": 1
        },
        "doc-store-model.json": {
          "sampleid": "doc-store-model.json",
          "self": "#/xregistryspecs/core-v1/samples/doc-store-model.json",
          "xid": "/xregistryspecs/core-v1/samples/doc-store-model.json",
          "metaurl": "#/xregistryspecs/core-v1/samples/doc-store-model.json/meta",
          "meta": {
            "sampleid": "doc-store-model.json",
            "self": "#/xregistryspecs/core-v1/samples/doc-store-model.json/meta",
            "xid": "/xregistryspecs/core-v1/samples/doc-store-model.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:18.829017877Z",
            "modifiedat": "2025-04-30T14:59:18.829017877Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/samples/doc-store-model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/samples/doc-store-model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "doc-store-model.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/samples/doc-store-model.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/samples/doc-store-model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:18.829017877Z",
              "modifiedat": "2025-04-30T14:59:18.829017877Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICJncm91cHMiOiB7CiAgICAiZGlycyI6IHsKICAgICAgInNpbmd1bGFyIjogImRpciIsCgogICAgICAicmVzb3VyY2VzIjogewogICAgICAgICJmaWxlcyI6IHsKICAgICAgICAgICJzaW5ndWxhciI6ICJmaWxlIgogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQo="
            }
          },
          "versionscount": 1
        },
        "formatted-doc-store-data.json": {
          "sampleid": "formatted-doc-store-data.json",
          "self": "#/xregistryspecs/core-v1/samples/formatted-doc-store-data.json",
          "xid": "/xregistryspecs/core-v1/samples/formatted-doc-store-data.json",
          "metaurl": "#/xregistryspecs/core-v1/samples/formatted-doc-store-data.json/meta",
          "meta": {
            "sampleid": "formatted-doc-store-data.json",
            "self": "#/xregistryspecs/core-v1/samples/formatted-doc-store-data.json/meta",
            "xid": "/xregistryspecs/core-v1/samples/formatted-doc-store-data.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:18.922794139Z",
            "modifiedat": "2025-04-30T14:59:18.922794139Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/samples/formatted-doc-store-data.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/samples/formatted-doc-store-data.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "formatted-doc-store-data.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/samples/formatted-doc-store-data.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/samples/formatted-doc-store-data.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:18.922794139Z",
              "modifiedat": "2025-04-30T14:59:18.922794139Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICJuYW1lIjogIkRvY3VtZW50IFN0b3JlIFNhbXBsZSIsCiAgImRvY3MiOiB7CiAgICAibmV3Q29udHJhY3QiOiB7CiAgICAgICJmb3JtYXRzIjogewogICAgICAgICJwZGYiOiB7CiAgICAgICAgICAiY29udGVudHR5cGUiOiAiYXBwbGljYXRpb24vcGRmIiwKICAgICAgICAgICJmb3JtYXQiOiAiVGhpcyBpcyBmb3JtIDEwNDAgaW4gcGRmIC0gbm90IHJlYWxseSBwZGYgdGhvdWdoIgogICAgICAgIH0sCiAgICAgICAgIm1zLXdvcmQiOiB7CiAgICAgICAgICAidmVyc2lvbnMiOiB7CiAgICAgICAgICAgICJ2MSI6IHsKICAgICAgICAgICAgICAiY29udGVudHR5cGUiOiAiYXBwbGljYXRpb24vbXMtd29yZCIsCiAgICAgICAgICAgICAgImZvcm1hdGJhc2U2NCI6ICJZVzRnYjJ4a0lHMXpMWGR2Y21RZ1pHOWpDZz09IgogICAgICAgICAgICB9LAogICAgICAgICAgICAidjIiOiB7CiAgICAgICAgICAgICAgImNvbnRlbnR0eXBlIjogImFwcGxpY2F0aW9uL21zLXdvcmQiLAogICAgICAgICAgICAgICJmb3JtYXRiYXNlNjQiOiAiYzI5dFpTQnRjeTEzYjNKa0lHUnZZd289IgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgImFtZW5kQ29udHJhY3QiOiB7CiAgICAgICJmb3JtYXRzIjogewogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgICAiY29udGVudHR5cGUiOiAidGV4dC9wbGFpbiIsCiAgICAgICAgICAgICJmb3JtYXQiOiAiUGxlYXNlIGFtZW5kIEpvZSdzIGNvbnRyYWN0IHN1Y2ggdGhhdC4uLiIKICAgICAgICB9LAogICAgICAgICJodG1sIjogewogICAgICAgICAgICAiY29udGVudHR5cGUiOiAidGV4dC9odG1sIiwKICAgICAgICAgICAgImZvcm1hdCI6ICI8aHRtbD48Ym9keT5QbGVhc2UgYW1lbmQgSm9lJ3MgY29udHJhY3Qgc3VjaCB0aGF0Li4uPC9ib2R5PjwvaHRtbD4iCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Cg=="
            }
          },
          "versionscount": 1
        },
        "formatted-doc-store-model.json": {
          "sampleid": "formatted-doc-store-model.json",
          "self": "#/xregistryspecs/core-v1/samples/formatted-doc-store-model.json",
          "xid": "/xregistryspecs/core-v1/samples/formatted-doc-store-model.json",
          "metaurl": "#/xregistryspecs/core-v1/samples/formatted-doc-store-model.json/meta",
          "meta": {
            "sampleid": "formatted-doc-store-model.json",
            "self": "#/xregistryspecs/core-v1/samples/formatted-doc-store-model.json/meta",
            "xid": "/xregistryspecs/core-v1/samples/formatted-doc-store-model.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:19.013775454Z",
            "modifiedat": "2025-04-30T14:59:19.013775454Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/core-v1/samples/formatted-doc-store-model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/core-v1/samples/formatted-doc-store-model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "formatted-doc-store-model.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/core-v1/samples/formatted-doc-store-model.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/core-v1/samples/formatted-doc-store-model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:19.013775454Z",
              "modifiedat": "2025-04-30T14:59:19.013775454Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICJncm91cHMiOiB7CiAgICAiZG9jcyI6IHsKICAgICAgInNpbmd1bGFyIjogImRvYyIsCgogICAgICAicmVzb3VyY2VzIjogewogICAgICAgICJmb3JtYXRzIjogewogICAgICAgICAgInNpbmd1bGFyIjogImZvcm1hdCIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K"
            }
          },
          "versionscount": 1
        }
      },
      "samplescount": 5,
      "schemasurl": "#/xregistryspecs/core-v1/schemas",
      "schemas": {},
      "schemascount": 0
    },
    "endpoint-v1": {
      "xregistryspecid": "endpoint-v1",
      "self": "#/xregistryspecs/endpoint-v1",
      "xid": "/xregistryspecs/endpoint-v1",
      "epoch": 4,
      "createdat": "2025-04-30T14:59:19.209982357Z",
      "modifiedat": "2025-04-30T14:59:19.515528398Z",
      "docsurl": "#/xregistryspecs/endpoint-v1/docs",
      "docs": {
        "model.json": {
          "docid": "model.json",
          "self": "#/xregistryspecs/endpoint-v1/docs/model.json",
          "xid": "/xregistryspecs/endpoint-v1/docs/model.json",
          "metaurl": "#/xregistryspecs/endpoint-v1/docs/model.json/meta",
          "meta": {
            "docid": "model.json",
            "self": "#/xregistryspecs/endpoint-v1/docs/model.json/meta",
            "xid": "/xregistryspecs/endpoint-v1/docs/model.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:19.209982357Z",
            "modifiedat": "2025-04-30T14:59:19.209982357Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/endpoint-v1/docs/model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/endpoint-v1/docs/model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "model.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/endpoint-v1/docs/model.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/endpoint-v1/docs/model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:19.209982357Z",
              "modifiedat": "2025-04-30T14:59:19.209982357Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "spec.md": {
          "docid": "spec.md",
          "self": "#/xregistryspecs/endpoint-v1/docs/spec.md",
          "xid": "/xregistryspecs/endpoint-v1/docs/spec.md",
          "metaurl": "#/xregistryspecs/endpoint-v1/docs/spec.md/meta",
          "meta": {
            "docid": "spec.md",
            "self": "#/xregistryspecs/endpoint-v1/docs/spec.md/meta",
            "xid": "/xregistryspecs/endpoint-v1/docs/spec.md/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:19.317248737Z",
            "modifiedat": "2025-04-30T14:59:19.317248737Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/endpoint-v1/docs/spec.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/endpoint-v1/docs/spec.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "spec.md",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/endpoint-v1/docs/spec.md/versions/v1.0-rc1",
              "xid": "/xregistryspecs/endpoint-v1/docs/spec.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:19.317248737Z",
              "modifiedat": "2025-04-30T14:59:19.317248737Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "docscount": 2,
      "samplesurl": "#/xregistryspecs/endpoint-v1/samples",
      "samples": {},
      "samplescount": 0,
      "schemasurl": "#/xregistryspecs/endpoint-v1/schemas",
      "schemas": {
        "document-schema.avsc": {
          "schemaid": "document-schema.avsc",
          "self": "#/xregistryspecs/endpoint-v1/schemas/document-schema.avsc",
          "xid": "/xregistryspecs/endpoint-v1/schemas/document-schema.avsc",
          "metaurl": "#/xregistryspecs/endpoint-v1/schemas/document-schema.avsc/meta",
          "meta": {
            "schemaid": "document-schema.avsc",
            "self": "#/xregistryspecs/endpoint-v1/schemas/document-schema.avsc/meta",
            "xid": "/xregistryspecs/endpoint-v1/schemas/document-schema.avsc/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:19.416474797Z",
            "modifiedat": "2025-04-30T14:59:19.416474797Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/endpoint-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/endpoint-v1/schemas/document-schema.avsc/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.avsc",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/endpoint-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "xid": "/xregistryspecs/endpoint-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:19.416474797Z",
              "modifiedat": "2025-04-30T14:59:19.416474797Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "document-schema.json": {
          "schemaid": "document-schema.json",
          "self": "#/xregistryspecs/endpoint-v1/schemas/document-schema.json",
          "xid": "/xregistryspecs/endpoint-v1/schemas/document-schema.json",
          "metaurl": "#/xregistryspecs/endpoint-v1/schemas/document-schema.json/meta",
          "meta": {
            "schemaid": "document-schema.json",
            "self": "#/xregistryspecs/endpoint-v1/schemas/document-schema.json/meta",
            "xid": "/xregistryspecs/endpoint-v1/schemas/document-schema.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:19.515528398Z",
            "modifiedat": "2025-04-30T14:59:19.515528398Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/endpoint-v1/schemas/document-schema.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/endpoint-v1/schemas/document-schema.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/endpoint-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/endpoint-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:19.515528398Z",
              "modifiedat": "2025-04-30T14:59:19.515528398Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "schemascount": 2
    },
    "message-v1": {
      "xregistryspecid": "message-v1",
      "self": "#/xregistryspecs/message-v1",
      "xid": "/xregistryspecs/message-v1",
      "epoch": 5,
      "createdat": "2025-04-30T14:59:19.617748156Z",
      "modifiedat": "2025-04-30T14:59:20.06330441Z",
      "docsurl": "#/xregistryspecs/message-v1/docs",
      "docs": {
        "model.json": {
          "docid": "model.json",
          "self": "#/xregistryspecs/message-v1/docs/model.json",
          "xid": "/xregistryspecs/message-v1/docs/model.json",
          "metaurl": "#/xregistryspecs/message-v1/docs/model.json/meta",
          "meta": {
            "docid": "model.json",
            "self": "#/xregistryspecs/message-v1/docs/model.json/meta",
            "xid": "/xregistryspecs/message-v1/docs/model.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:19.617748156Z",
            "modifiedat": "2025-04-30T14:59:19.617748156Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/message-v1/docs/model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/message-v1/docs/model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "model.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/message-v1/docs/model.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/message-v1/docs/model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:19.617748156Z",
              "modifiedat": "2025-04-30T14:59:19.617748156Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "spec.md": {
          "docid": "spec.md",
          "self": "#/xregistryspecs/message-v1/docs/spec.md",
          "xid": "/xregistryspecs/message-v1/docs/spec.md",
          "metaurl": "#/xregistryspecs/message-v1/docs/spec.md/meta",
          "meta": {
            "docid": "spec.md",
            "self": "#/xregistryspecs/message-v1/docs/spec.md/meta",
            "xid": "/xregistryspecs/message-v1/docs/spec.md/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:19.73075974Z",
            "modifiedat": "2025-04-30T14:59:19.73075974Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/message-v1/docs/spec.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/message-v1/docs/spec.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "spec.md",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/message-v1/docs/spec.md/versions/v1.0-rc1",
              "xid": "/xregistryspecs/message-v1/docs/spec.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:19.73075974Z",
              "modifiedat": "2025-04-30T14:59:19.73075974Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "docscount": 2,
      "samplesurl": "#/xregistryspecs/message-v1/samples",
      "samples": {},
      "samplescount": 0,
      "schemasurl": "#/xregistryspecs/message-v1/schemas",
      "schemas": {
        "document-schema.avsc": {
          "schemaid": "document-schema.avsc",
          "self": "#/xregistryspecs/message-v1/schemas/document-schema.avsc",
          "xid": "/xregistryspecs/message-v1/schemas/document-schema.avsc",
          "metaurl": "#/xregistryspecs/message-v1/schemas/document-schema.avsc/meta",
          "meta": {
            "schemaid": "document-schema.avsc",
            "self": "#/xregistryspecs/message-v1/schemas/document-schema.avsc/meta",
            "xid": "/xregistryspecs/message-v1/schemas/document-schema.avsc/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:19.837086819Z",
            "modifiedat": "2025-04-30T14:59:19.837086819Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/message-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/message-v1/schemas/document-schema.avsc/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.avsc",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/message-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "xid": "/xregistryspecs/message-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:19.837086819Z",
              "modifiedat": "2025-04-30T14:59:19.837086819Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": "ewogICJ0eXBlIjogInJlY29yZCIsCiAgIm5hbWUiOiAiRG9jdW1lbnRUeXBlIiwKICAibmFtZXNwYWNlIjogImlvLnhyZWdpc3RyeSIsCiAgImZpZWxkcyI6IFsKICAgIHsKICAgICAgIm5hbWUiOiAibWVzc2FnZWdyb3VwcyIsCiAgICAgICJ0eXBlIjogewogICAgICAgICJ0eXBlIjogIm1hcCIsCiAgICAgICAgInZhbHVlcyI6IHsKICAgICAgICAgICJ0eXBlIjogInJlY29yZCIsCiAgICAgICAgICAibmFtZSI6ICJNZXNzYWdlZ3JvdXBUeXBlIiwKICAgICAgICAgICJmaWVsZHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAibmFtZSI6ICJtZXNzYWdlZ3JvdXBpZCIsCiAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSUQgb2YgdGhlIG1lc3NhZ2Vncm91cCBvYmplY3QiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAibmFtZSI6ICJuYW1lIiwKICAgICAgICAgICAgICAidHlwZSI6IFsKICAgICAgICAgICAgICAgICJzdHJpbmciLAogICAgICAgICAgICAgICAgIm51bGwiCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiZG9jIjogIk5hbWUgb2YgdGhlIG9iamVjdCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJuYW1lIjogImVwb2NoIiwKICAgICAgICAgICAgICAidHlwZSI6IFsKICAgICAgICAgICAgICAgICJpbnQiLAogICAgICAgICAgICAgICAgIm51bGwiCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiZG9jIjogIkVwb2NoIHRpbWUgb2YgdGhlIG9iamVjdCBjcmVhdGlvbiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJuYW1lIjogInNlbGYiLAogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgImRvYyI6ICJVUkwgb2YgdGhlIG9iamVjdCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJuYW1lIjogInhpZCIsCiAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAiZG9jIjogIlhJRCBvZiB0aGUgb2JqZWN0IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIm5hbWUiOiAiZGVzY3JpcHRpb24iLAogICAgICAgICAgICAgICJ0eXBlIjogWwogICAgICAgICAgICAgICAgInN0cmluZyIsCiAgICAgICAgICAgICAgICAibnVsbCIKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJkb2MiOiAiRGVzY3JpcHRpb24gb2YgdGhlIG9iamVjdCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJuYW1lIjogImRvY3VtZW50YXRpb24iLAogICAgICAgICAgICAgICJ0eXBlIjogWwogICAgICAgICAgICAgICAgInN0cmluZyIsCiAgICAgICAgICAgICAgICAibnVsbCIKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJkb2MiOiAiVVJJIG9mIHRoZSBkb2N1bWVudGF0aW9uIG9mIHRoZSBvYmplY3QiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAibmFtZSI6ICJsYWJlbHMiLAogICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAibWFwIiwKICAgICAgICAgICAgICAgICJ2YWx1ZXMiOiBbCiAgICAgICAgICAgICAgICAgICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAibnVsbCIKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJkb2MiOiAiTGFiZWxzIGZvciB0aGUgb2JqZWN0IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIm5hbWUiOiAiY3JlYXRlZGF0IiwKICAgICAgICAgICAgICAidHlwZSI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50IiwKICAgICAgICAgICAgICAgICAgImxvZ2ljYWxUeXBlIjogInRpbWUtbWlsbGlzIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJudWxsIgogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImRvYyI6ICJUaW1lIG9mIHRoZSBvYmplY3QgY3JlYXRpb24iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAibmFtZSI6ICJtb2RpZmllZGF0IiwKICAgICAgICAgICAgICAidHlwZSI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50IiwKICAgICAgICAgICAgICAgICAgImxvZ2ljYWxUeXBlIjogInRpbWUtbWlsbGlzIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJudWxsIgogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImRvYyI6ICJUaW1lIG9mIHRoZSBvYmplY3QgbW9kaWZpY2F0aW9uIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAibmFtZSI6ICJlbnZlbG9wZSIsCiAgICAgICAgICAgICAgImRvYyI6ICJFbnZlbG9wZSBmb3JtYXQgaWRlbnRpZmllciB0aGF0IGRlZmluZXMgdGhlIGNvbW1vbiBtZXRhZGF0YSBpbmZvcm1hdGlvbiBmb3IgdGhlIG1lc3NhZ2UuIEFsbCBkZWZpbml0aW9ucyBpbiB0aGlzIGdyb3VwIHNoYXJlIHRoaXMgZW52ZWxvcGUgZm9ybWF0LiBNaXhlZC1lbnZlbG9wZS1mb3JtYXQgZ3JvdXBzIGFyZSBub3QgcGVybWl0dGVkLiBUaGUgcHJlZGVmaW5lZCBlbnZlbG9wZSBmb3JtYXQgaXMgQ2xvdWRFdmVudHMvMS4wIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAibmFtZSI6ICJwcm90b2NvbCIsCiAgICAgICAgICAgICAgImRvYyI6ICJQcm90b2NvbCBpZGVudGlmaWVyIHRoYXQgZGVmaW5lcyB0aGUgdHJhbnNwb3J0IG1lc3NhZ2UgcHJvdG9jb2wuIEFsbCBkZWZpbml0aW9ucyBpbiB0aGlzIGdyb3VwIHNoYXJlIHRoaXMgcHJvdG9jb2wgdHlwZS4gTWl4ZWQtcHJvdG9jb2wgZ3JvdXBzIGFyZSBub3QgcGVybWl0dGVkLiBQcmVkZWZpbmVkIHByb3RvY29sIGZvcm1hdHMgYXJlICdBTVFQLzEuMCcsICdNUVRULzMuMS4xJywgJ01RVFQvNS4wJywgJ0tBRktBJywgJ0hUVFAnLCBhbmQgJ05BVFMnIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIm5hbWUiOiAiRXh0ZW5zaW9ucyIsCiAgICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJtYXAiLAogICAgICAgICAgICAgICAgIm5hbWUiOiAiRXh0ZW5zaW9uc1R5cGUiLAogICAgICAgICAgICAgICAgImRlZmF1bHQiOiB7fSwKICAgICAgICAgICAgICAgICJ2YWx1ZXMiOiAicmVjb3JkIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgImRvYyI6ICJBbnkgb3RoZXIgYXR0cmlidXRlIHRoYXQgaXMgY29tbW9uIHRvIGFsbCBkZWZpbml0aW9ucyBpbiB0aGlzIGdyb3VwIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIm5hbWUiOiAibWVzc2FnZXMiLAogICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAibWFwIiwKICAgICAgICAgICAgICAgICJ2YWx1ZXMiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInJlY29yZCIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjogIk1lc3NhZ2VUeXBlIiwKICAgICAgICAgICAgICAgICAgImZpZWxkcyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJtZXNzYWdlaWQiLAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJJRCBvZiB0aGUgbWVzc2FnZSBvYmplY3QiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJuYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogWwogICAgICAgICAgICAgICAgICAgICAgICAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgIm51bGwiCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgImRvYyI6ICJOYW1lIG9mIHRoZSBvYmplY3QiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJlcG9jaCIsCiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgImludCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJudWxsIgogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICJkb2MiOiAiRXBvY2ggdGltZSBvZiB0aGUgb2JqZWN0IGNyZWF0aW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAic2VsZiIsCiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgImRvYyI6ICJVUkwgb2YgdGhlIG9iamVjdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInhpZCIsCiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgImRvYyI6ICJYSUQgb2YgdGhlIG9iamVjdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRlc2NyaXB0aW9uIiwKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogWwogICAgICAgICAgICAgICAgICAgICAgICAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgIm51bGwiCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgImRvYyI6ICJEZXNjcmlwdGlvbiBvZiB0aGUgb2JqZWN0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZG9jdW1lbnRhdGlvbiIsCiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJudWxsIgogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICJkb2MiOiAiVVJJIG9mIHRoZSBkb2N1bWVudGF0aW9uIG9mIHRoZSBvYmplY3QiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJsYWJlbHMiLAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm1hcCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZXMiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIm51bGwiCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAiZG9jIjogIkxhYmVscyBmb3IgdGhlIG9iamVjdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImNyZWF0ZWRhdCIsCiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImludCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImxvZ2ljYWxUeXBlIjogInRpbWUtbWlsbGlzIgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAibnVsbCIKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAiZG9jIjogIlRpbWUgb2YgdGhlIG9iamVjdCBjcmVhdGlvbiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogIm1vZGlmaWVkYXQiLAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJsb2dpY2FsVHlwZSI6ICJ0aW1lLW1pbGxpcyIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgIm51bGwiCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgImRvYyI6ICJUaW1lIG9mIHRoZSBvYmplY3QgbW9kaWZpY2F0aW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImJhc2VtZXNzYWdldXJsIiwKICAgICAgICAgICAgICAgICAgICAgICJkb2MiOiAiUmVmZXJlbmNlIHRvIGEgYmFzZSBkZWZpbml0aW9uIGZvciB0aGlzIGRlZmluaXRpb24sIGVpdGhlciB2aWEgYSAocmVsYXRpdmUpIFVSTCBvciBhIGZyYWdtZW50IGlkZW50aWZpZXIuIFRoZSBiYXNlIGRlZmluaXRpb24gaXMgb3ZlcnJpZGRlbiBieSB0aGlzIGRlZmluaXRpb24uIElmIG5vdCBwcmVzZW50LCB0aGlzIGRlZmluaXRpb24gZG9lcyBub3Qgb3ZlcnJpZGUgYW55IGJhc2UgZGVmaW5pdGlvbiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImVudmVsb3BlIiwKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicmVjb3JkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJFbnZlbG9wZUNsb3VkZXZlbnRzMTBUeXBlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZmllbGRzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJyZWNvcmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogIkdlbmVyaWNSZWNvcmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZHMiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm1hcCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlcyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJudWxsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJib29sZWFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpbnQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImxvbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZsb2F0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkb3VibGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJ5dGVzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpdGVtcyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibnVsbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJvb2xlYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpbnQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsb25nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZmxvYXQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkb3VibGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJieXRlcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkdlbmVyaWNSZWNvcmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiR2VuZXJpY1JlY29yZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImVudmVsb3BlbWV0YWRhdGEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZG9jIjogIkNsb3VkRXZlbnRzIGF0dHJpYnV0ZSBkZWNsYXJhdGlvbnMsIGFkZGluZyBjb25zdHJhaW50cyB0byB0aGUgQ2xvdWRFdmVudHMgZW52ZWxvcGUgbm90IHlldCBjb3ZlcmVkIGJ5IHRoZSBDbG91ZEV2ZW50cyBzcGVjIGh0dHBzOi8vZ2l0aHViLmNvbS9jbG91ZGV2ZW50cy9zcGVjL2Jsb2IvbWFpbi9jbG91ZGV2ZW50cy9zcGVjLm1kIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiR2VuZXJpY1JlY29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImVudmVsb3Blb3B0aW9ucyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkb2MiOiAiRW52ZWxvcGUgbWV0YWRhdGEgY29uc3RyYWludHMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgImRvYyI6ICJNZXNzYWdlIGVudmVsb3BlIGZvcm1hdCBpZGVudGlmaWVyLiBUaGlzIGF0dHJpYnV0ZSBNVVNUIGJlIHRoZSBzYW1lIGFzIHRoZSAnZW52ZWxvcGUnIGF0dHJpYnV0ZSBvZiB0aGUgZGVmaW5pdGlvbiBncm91cCwgYnV0IGlzIG5vdCBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBiZWNhdXNlIGRlZmluaXRpb25zIG1heSBiZSBjcm9zcy1yZWZlcmVuY2VkIGFjcm9zcyBncm91cHMuIFRoZSBwcmVkZWZpbmVkIGVudmVsb3BlIGZvcm1hdCBpcyAnQ2xvdWRFdmVudHMvMS4wJyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInByb3RvY29sIiwKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicmVjb3JkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJQcm90b2NvbEFtcXAxMFR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZHMiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkdlbmVyaWNSZWNvcmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJwcm90b2NvbG9wdGlvbnMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZG9jIjogIkFNUVAgbWVzc2FnZSBtZXRhZGF0YSBjb25zdHJhaW50cyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJyZWNvcmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogIlByb3RvY29sTXF0dDMxMVR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZHMiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkdlbmVyaWNSZWNvcmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJwcm90b2NvbG9wdGlvbnMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZG9jIjogIk1RVFQgbWVzc2FnZSBtZXRhZGF0YSBjb25zdHJhaW50cyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJyZWNvcmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogIlByb3RvY29sTXF0dDUwVHlwZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkcyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiR2VuZXJpY1JlY29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInByb3RvY29sb3B0aW9ucyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkb2MiOiAiTVFUVCBtZXNzYWdlIG1ldGFkYXRhIGNvbnN0cmFpbnRzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInJlY29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiUHJvdG9jb2xLQUZLQVR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZHMiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkdlbmVyaWNSZWNvcmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJwcm90b2NvbG9wdGlvbnMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZG9jIjogIkFwYWNoZSBLYWZrYSBtZXNzYWdlIG1ldGFkYXRhIGNvbnN0cmFpbnRzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInJlY29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiUHJvdG9jb2xIVFRQVHlwZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImZpZWxkcyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiR2VuZXJpY1JlY29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInByb3RvY29sb3B0aW9ucyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkb2MiOiAiVGhlIEhUVFAgbWVzc2FnZSBtZXRhZGF0YSBjb25zdHJhaW50cyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJyZWNvcmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogIlByb3RvY29sTkFUU1R5cGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJmaWVsZHMiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIkdlbmVyaWNSZWNvcmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJwcm90b2NvbG9wdGlvbnMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZG9jIjogIk5BVFMgbWVzc2FnZSBtZXRhZGF0YSBjb25zdHJhaW50cyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAiZG9jIjogIlByb3RvY29sIGlkZW50aWZpZXIuIFRoaXMgYXR0cmlidXRlIE1VU1QgYmUgdGhlIHNhbWUgYXMgdGhlICdwcm90b2NvbCcgYXR0cmlidXRlIG9mIHRoZSBkZWZpbml0aW9uIGdyb3VwLCBidXQgaXMgbm90IGF1dG9tYXRpY2FsbHkgaW5oZXJpdGVkIGJlY2F1c2UgZGVmaW5pdGlvbnMgbWF5IGJlIGNyb3NzLXJlZmVyZW5jZWQgYWNyb3NzIGdyb3VwcyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRhc2NoZW1hZm9ybWF0IiwKICAgICAgICAgICAgICAgICAgICAgICJkb2MiOiAiVGhlIHNjaGVtYSBmb3JtYXQgYXBwbGljYWJsZSB0byB0aGUgbWVzc2FnZSBwYXlsb2FkLCBlcXVpdmFsZW50IHRvIHRoZSAnZm9ybWF0JyBhdHRyaWJ1dGUgb2YgdGhlIHNjaGVtYSByZWdpc3RyeSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInJlY29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRhc2NoZW1hIiwKICAgICAgICAgICAgICAgICAgICAgICJmaWVsZHMiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibWFwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZXMiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJudWxsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJvb2xlYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaW50IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImxvbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZmxvYXQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZG91YmxlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJ5dGVzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIml0ZW1zIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm51bGwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJvb2xlYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImludCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibG9uZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZmxvYXQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRvdWJsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYnl0ZXMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiR2VuZXJpY1JlY29yZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJHZW5lcmljUmVjb3JkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICJkb2MiOiAiVGhlIGlubGluZSBzY2hlbWEgZm9yIHRoZSBtZXNzYWdlIHBheWxvYWQsIGVxdWl2YWxlbnQgdG8gdGhlICdzY2hlbWEnIGF0dHJpYnV0ZSBvZiB0aGUgc2NoZW1hIHJlZ2lzdHJ5IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGFzY2hlbWF1cmkiLAogICAgICAgICAgICAgICAgICAgICAgImRvYyI6ICJUaGUgVVJJIG9mIHRoZSBzY2hlbWEgZm9yIHRoZSBtZXNzYWdlIHBheWxvYWQsIGVxdWl2YWxlbnQgdG8gdGhlICdzY2hlbWF1cmknIGF0dHJpYnV0ZSBvZiB0aGUgc2NoZW1hIHJlZ2lzdHJ5IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGFjb250ZW50dHlwZSIsCiAgICAgICAgICAgICAgICAgICAgICAiZG9jIjogIlRoZSBjb250ZW50IHR5cGUgZm9yIHRoZSBtZXNzYWdlIHBheWxvYWQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgXQp9"
            }
          },
          "versionscount": 1
        },
        "document-schema.json": {
          "schemaid": "document-schema.json",
          "self": "#/xregistryspecs/message-v1/schemas/document-schema.json",
          "xid": "/xregistryspecs/message-v1/schemas/document-schema.json",
          "metaurl": "#/xregistryspecs/message-v1/schemas/document-schema.json/meta",
          "meta": {
            "schemaid": "document-schema.json",
            "self": "#/xregistryspecs/message-v1/schemas/document-schema.json/meta",
            "xid": "/xregistryspecs/message-v1/schemas/document-schema.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:19.946691953Z",
            "modifiedat": "2025-04-30T14:59:19.946691953Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/message-v1/schemas/document-schema.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/message-v1/schemas/document-schema.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/message-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/message-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:19.946691953Z",
              "modifiedat": "2025-04-30T14:59:19.946691953Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "openapi.json": {
          "schemaid": "openapi.json",
          "self": "#/xregistryspecs/message-v1/schemas/openapi.json",
          "xid": "/xregistryspecs/message-v1/schemas/openapi.json",
          "metaurl": "#/xregistryspecs/message-v1/schemas/openapi.json/meta",
          "meta": {
            "schemaid": "openapi.json",
            "self": "#/xregistryspecs/message-v1/schemas/openapi.json/meta",
            "xid": "/xregistryspecs/message-v1/schemas/openapi.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:20.06330441Z",
            "modifiedat": "2025-04-30T14:59:20.06330441Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/message-v1/schemas/openapi.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/message-v1/schemas/openapi.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "openapi.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/message-v1/schemas/openapi.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/message-v1/schemas/openapi.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:20.06330441Z",
              "modifiedat": "2025-04-30T14:59:20.06330441Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "schemascount": 3
    },
    "pagination-v1": {
      "xregistryspecid": "pagination-v1",
      "self": "#/xregistryspecs/pagination-v1",
      "xid": "/xregistryspecs/pagination-v1",
      "epoch": 1,
      "createdat": "2025-04-30T14:59:20.791282513Z",
      "modifiedat": "2025-04-30T14:59:20.791282513Z",
      "docsurl": "#/xregistryspecs/pagination-v1/docs",
      "docs": {
        "spec.md": {
          "docid": "spec.md",
          "self": "#/xregistryspecs/pagination-v1/docs/spec.md",
          "xid": "/xregistryspecs/pagination-v1/docs/spec.md",
          "metaurl": "#/xregistryspecs/pagination-v1/docs/spec.md/meta",
          "meta": {
            "docid": "spec.md",
            "self": "#/xregistryspecs/pagination-v1/docs/spec.md/meta",
            "xid": "/xregistryspecs/pagination-v1/docs/spec.md/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:20.791282513Z",
            "modifiedat": "2025-04-30T14:59:20.791282513Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/pagination-v1/docs/spec.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/pagination-v1/docs/spec.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "spec.md",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/pagination-v1/docs/spec.md/versions/v1.0-rc1",
              "xid": "/xregistryspecs/pagination-v1/docs/spec.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:20.791282513Z",
              "modifiedat": "2025-04-30T14:59:20.791282513Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "docscount": 1,
      "samplesurl": "#/xregistryspecs/pagination-v1/samples",
      "samples": {},
      "samplescount": 0,
      "schemasurl": "#/xregistryspecs/pagination-v1/schemas",
      "schemas": {},
      "schemascount": 0
    },
    "schema-v1": {
      "xregistryspecid": "schema-v1",
      "self": "#/xregistryspecs/schema-v1",
      "xid": "/xregistryspecs/schema-v1",
      "epoch": 5,
      "createdat": "2025-04-30T14:59:20.181998349Z",
      "modifiedat": "2025-04-30T14:59:20.659682162Z",
      "docsurl": "#/xregistryspecs/schema-v1/docs",
      "docs": {
        "model.json": {
          "docid": "model.json",
          "self": "#/xregistryspecs/schema-v1/docs/model.json",
          "xid": "/xregistryspecs/schema-v1/docs/model.json",
          "metaurl": "#/xregistryspecs/schema-v1/docs/model.json/meta",
          "meta": {
            "docid": "model.json",
            "self": "#/xregistryspecs/schema-v1/docs/model.json/meta",
            "xid": "/xregistryspecs/schema-v1/docs/model.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:20.181998349Z",
            "modifiedat": "2025-04-30T14:59:20.181998349Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/schema-v1/docs/model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/schema-v1/docs/model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "model.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/schema-v1/docs/model.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/schema-v1/docs/model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:20.181998349Z",
              "modifiedat": "2025-04-30T14:59:20.181998349Z",
              "ancestor": "v1.0-rc1",
              "docbase64": "ewogICJncm91cHMiOiB7CiAgICAic2NoZW1hZ3JvdXBzIjogewogICAgICAic2luZ3VsYXIiOiAic2NoZW1hZ3JvdXAiLAogICAgICAibW9kZWx2ZXJzaW9uIjogIjEuMC1yYzEiLAogICAgICAiY29tcGF0aWJsZXdpdGgiOiAiaHR0cHM6Ly94cmVnaXN0cnkuaW8veHJlZy9kb21haW5zL3NjaGVtYS9zcGVjcy9tb2RlbC5qc29uIiwKCiAgICAgICJhdHRyaWJ1dGVzIjogewogICAgICAgICIqIjogewogICAgICAgICAgIm5hbWUiOiAiKiIsCiAgICAgICAgICAidHlwZSI6ICJhbnkiCiAgICAgICAgfQogICAgICB9LAoKICAgICAgInJlc291cmNlcyI6IHsKICAgICAgICAic2NoZW1hcyI6IHsKICAgICAgICAgICJzaW5ndWxhciI6ICJzY2hlbWEiLAogICAgICAgICAgIm1vZGVsdmVyc2lvbiI6ICIxLjAtcmMxIiwKICAgICAgICAgICJjb21wYXRpYmxld2l0aCI6ICJodHRwczovL3hyZWdpc3RyeS5pby94cmVnL2RvbWFpbnMvc2NoZW1hL3NwZWNzL21vZGVsLmpzb24iLAoKICAgICAgICAgICJhdHRyaWJ1dGVzIjogewogICAgICAgICAgICAiZm9ybWF0IjogewogICAgICAgICAgICAgICJuYW1lIjogImZvcm1hdCIsCiAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU2NoZW1hIGZvcm1hdCBpZGVudGlmaWVyIGZvciB0aGlzIHNjaGVtYSB2ZXJzaW9uIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiKiI6IHsKICAgICAgICAgICAgICAibmFtZSI6ICIqIiwKICAgICAgICAgICAgICAidHlwZSI6ICJhbnkiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAibWV0YWF0dHJpYnV0ZXMiOiB7CiAgICAgICAgICAgICJ2YWxpZGF0aW9uIjogewogICAgICAgICAgICAgICJuYW1lIjogInZhbGlkYXRpb24iLAogICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJWZXJpZnkgY29tcGxpYW5jZSB3aXRoIHNwZWNpZmllZCBzY2hlbWEgJ2Zvcm1hdCciLAogICAgICAgICAgICAgICJyZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICAgImRlZmF1bHQiOiBmYWxzZQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Cg=="
            }
          },
          "versionscount": 1
        },
        "spec.md": {
          "docid": "spec.md",
          "self": "#/xregistryspecs/schema-v1/docs/spec.md",
          "xid": "/xregistryspecs/schema-v1/docs/spec.md",
          "metaurl": "#/xregistryspecs/schema-v1/docs/spec.md/meta",
          "meta": {
            "docid": "spec.md",
            "self": "#/xregistryspecs/schema-v1/docs/spec.md/meta",
            "xid": "/xregistryspecs/schema-v1/docs/spec.md/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:20.302579969Z",
            "modifiedat": "2025-04-30T14:59:20.302579969Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/schema-v1/docs/spec.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/schema-v1/docs/spec.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "spec.md",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/schema-v1/docs/spec.md/versions/v1.0-rc1",
              "xid": "/xregistryspecs/schema-v1/docs/spec.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:20.302579969Z",
              "modifiedat": "2025-04-30T14:59:20.302579969Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "docscount": 2,
      "samplesurl": "#/xregistryspecs/schema-v1/samples",
      "samples": {},
      "samplescount": 0,
      "schemasurl": "#/xregistryspecs/schema-v1/schemas",
      "schemas": {
        "document-schema.avsc": {
          "schemaid": "document-schema.avsc",
          "self": "#/xregistryspecs/schema-v1/schemas/document-schema.avsc",
          "xid": "/xregistryspecs/schema-v1/schemas/document-schema.avsc",
          "metaurl": "#/xregistryspecs/schema-v1/schemas/document-schema.avsc/meta",
          "meta": {
            "schemaid": "document-schema.avsc",
            "self": "#/xregistryspecs/schema-v1/schemas/document-schema.avsc/meta",
            "xid": "/xregistryspecs/schema-v1/schemas/document-schema.avsc/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:20.41863539Z",
            "modifiedat": "2025-04-30T14:59:20.41863539Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/schema-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/schema-v1/schemas/document-schema.avsc/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.avsc",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/schema-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "xid": "/xregistryspecs/schema-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:20.41863539Z",
              "modifiedat": "2025-04-30T14:59:20.41863539Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "document-schema.json": {
          "schemaid": "document-schema.json",
          "self": "#/xregistryspecs/schema-v1/schemas/document-schema.json",
          "xid": "/xregistryspecs/schema-v1/schemas/document-schema.json",
          "metaurl": "#/xregistryspecs/schema-v1/schemas/document-schema.json/meta",
          "meta": {
            "schemaid": "document-schema.json",
            "self": "#/xregistryspecs/schema-v1/schemas/document-schema.json/meta",
            "xid": "/xregistryspecs/schema-v1/schemas/document-schema.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:20.542399267Z",
            "modifiedat": "2025-04-30T14:59:20.542399267Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/schema-v1/schemas/document-schema.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/schema-v1/schemas/document-schema.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/schema-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/schema-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:20.542399267Z",
              "modifiedat": "2025-04-30T14:59:20.542399267Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "openapi.json": {
          "schemaid": "openapi.json",
          "self": "#/xregistryspecs/schema-v1/schemas/openapi.json",
          "xid": "/xregistryspecs/schema-v1/schemas/openapi.json",
          "metaurl": "#/xregistryspecs/schema-v1/schemas/openapi.json/meta",
          "meta": {
            "schemaid": "openapi.json",
            "self": "#/xregistryspecs/schema-v1/schemas/openapi.json/meta",
            "xid": "/xregistryspecs/schema-v1/schemas/openapi.json/meta",
            "epoch": 1,
            "createdat": "2025-04-30T14:59:20.659682162Z",
            "modifiedat": "2025-04-30T14:59:20.659682162Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/xregistryspecs/schema-v1/schemas/openapi.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/xregistryspecs/schema-v1/schemas/openapi.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "openapi.json",
              "versionid": "v1.0-rc1",
              "self": "#/xregistryspecs/schema-v1/schemas/openapi.json/versions/v1.0-rc1",
              "xid": "/xregistryspecs/schema-v1/schemas/openapi.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-30T14:59:20.659682162Z",
              "modifiedat": "2025-04-30T14:59:20.659682162Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "schemascount": 3
    }
  },
  "xregistryspecscount": 6,
  "xregistryspecsurl": "#/xregistryspecs"
}