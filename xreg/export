{
  "capabilities": {
    "flags": null,
    "mutable": null,
    "pagination": false,
    "schemas": [
      "xregistry-json/1.0-rc1"
    ],
    "shortself": false,
    "specversions": [
      "1.0-rc1"
    ],
    "sticky": true
  },
  "createdat": "2025-04-22T02:33:05.985066205Z",
  "epoch": 7,
  "model": {
    "attributes": {
      "specversion": {
        "name": "specversion",
        "type": "string",
        "readonly": true,
        "immutable": true,
        "required": true
      },
      "registryid": {
        "name": "registryid",
        "type": "string",
        "immutable": true,
        "required": true
      },
      "self": {
        "name": "self",
        "type": "url",
        "readonly": true,
        "immutable": true,
        "required": true
      },
      "xid": {
        "name": "xid",
        "type": "xid",
        "readonly": true,
        "immutable": true,
        "required": true
      },
      "epoch": {
        "name": "epoch",
        "type": "uinteger",
        "required": true
      },
      "name": {
        "name": "name",
        "type": "string"
      },
      "description": {
        "name": "description",
        "type": "string"
      },
      "documentation": {
        "name": "documentation",
        "type": "url"
      },
      "labels": {
        "name": "labels",
        "type": "map",
        "item": {
          "type": "string"
        }
      },
      "createdat": {
        "name": "createdat",
        "type": "timestamp",
        "required": true
      },
      "modifiedat": {
        "name": "modifiedat",
        "type": "timestamp",
        "required": true
      }
    },
    "groups": {
      "specs": {
        "plural": "specs",
        "singular": "spec",
        "attributes": {
          "specid": {
            "name": "specid",
            "type": "string",
            "immutable": true,
            "required": true
          },
          "self": {
            "name": "self",
            "type": "url",
            "readonly": true,
            "immutable": true,
            "required": true
          },
          "xid": {
            "name": "xid",
            "type": "xid",
            "readonly": true,
            "immutable": true,
            "required": true
          },
          "epoch": {
            "name": "epoch",
            "type": "uinteger",
            "required": true
          },
          "name": {
            "name": "name",
            "type": "string"
          },
          "description": {
            "name": "description",
            "type": "string"
          },
          "documentation": {
            "name": "documentation",
            "type": "url"
          },
          "labels": {
            "name": "labels",
            "type": "map",
            "item": {
              "type": "string"
            }
          },
          "createdat": {
            "name": "createdat",
            "type": "timestamp",
            "required": true
          },
          "modifiedat": {
            "name": "modifiedat",
            "type": "timestamp",
            "required": true
          }
        },
        "resources": {
          "docs": {
            "plural": "docs",
            "singular": "doc",
            "maxversions": 0,
            "setversionid": true,
            "setdefaultversionsticky": true,
            "hasdocument": true,
            "singleversionroot": false,
            "attributes": {
              "docid": {
                "name": "docid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "versionid": {
                "name": "versionid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "self": {
                "name": "self",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xid": {
                "name": "xid",
                "type": "xid",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "epoch": {
                "name": "epoch",
                "type": "uinteger",
                "required": true
              },
              "name": {
                "name": "name",
                "type": "string"
              },
              "isdefault": {
                "name": "isdefault",
                "type": "boolean",
                "readonly": true,
                "required": true,
                "default": false
              },
              "description": {
                "name": "description",
                "type": "string"
              },
              "documentation": {
                "name": "documentation",
                "type": "url"
              },
              "labels": {
                "name": "labels",
                "type": "map",
                "item": {
                  "type": "string"
                }
              },
              "createdat": {
                "name": "createdat",
                "type": "timestamp",
                "required": true
              },
              "modifiedat": {
                "name": "modifiedat",
                "type": "timestamp",
                "required": true
              },
              "ancestor": {
                "name": "ancestor",
                "type": "string",
                "required": true
              },
              "contenttype": {
                "name": "contenttype",
                "type": "string"
              }
            },
            "metaattributes": {
              "docid": {
                "name": "docid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "self": {
                "name": "self",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xid": {
                "name": "xid",
                "type": "xid",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xref": {
                "name": "xref",
                "type": "url"
              },
              "epoch": {
                "name": "epoch",
                "type": "uinteger",
                "required": true
              },
              "createdat": {
                "name": "createdat",
                "type": "timestamp",
                "required": true
              },
              "modifiedat": {
                "name": "modifiedat",
                "type": "timestamp",
                "required": true
              },
              "readonly": {
                "name": "readonly",
                "type": "boolean",
                "required": true,
                "default": false
              },
              "compatibility": {
                "name": "compatibility",
                "type": "string",
                "enum": [
                  "none",
                  "backward",
                  "backward_transitive",
                  "forward",
                  "forward_transitive",
                  "full",
                  "full_transitive"
                ],
                "strict": false,
                "required": true,
                "default": "none"
              },
              "defaultversionid": {
                "name": "defaultversionid",
                "type": "string",
                "required": true
              },
              "defaultversionurl": {
                "name": "defaultversionurl",
                "type": "url",
                "readonly": true,
                "required": true
              },
              "defaultversionsticky": {
                "name": "defaultversionsticky",
                "type": "boolean",
                "readonly": true,
                "required": true,
                "default": false
              }
            }
          },
          "samples": {
            "plural": "samples",
            "singular": "sample",
            "maxversions": 0,
            "setversionid": true,
            "setdefaultversionsticky": true,
            "hasdocument": true,
            "singleversionroot": false,
            "attributes": {
              "sampleid": {
                "name": "sampleid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "versionid": {
                "name": "versionid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "self": {
                "name": "self",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xid": {
                "name": "xid",
                "type": "xid",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "epoch": {
                "name": "epoch",
                "type": "uinteger",
                "required": true
              },
              "name": {
                "name": "name",
                "type": "string"
              },
              "isdefault": {
                "name": "isdefault",
                "type": "boolean",
                "readonly": true,
                "required": true,
                "default": false
              },
              "description": {
                "name": "description",
                "type": "string"
              },
              "documentation": {
                "name": "documentation",
                "type": "url"
              },
              "labels": {
                "name": "labels",
                "type": "map",
                "item": {
                  "type": "string"
                }
              },
              "createdat": {
                "name": "createdat",
                "type": "timestamp",
                "required": true
              },
              "modifiedat": {
                "name": "modifiedat",
                "type": "timestamp",
                "required": true
              },
              "ancestor": {
                "name": "ancestor",
                "type": "string",
                "required": true
              },
              "contenttype": {
                "name": "contenttype",
                "type": "string"
              }
            },
            "metaattributes": {
              "sampleid": {
                "name": "sampleid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "self": {
                "name": "self",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xid": {
                "name": "xid",
                "type": "xid",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xref": {
                "name": "xref",
                "type": "url"
              },
              "epoch": {
                "name": "epoch",
                "type": "uinteger",
                "required": true
              },
              "createdat": {
                "name": "createdat",
                "type": "timestamp",
                "required": true
              },
              "modifiedat": {
                "name": "modifiedat",
                "type": "timestamp",
                "required": true
              },
              "readonly": {
                "name": "readonly",
                "type": "boolean",
                "required": true,
                "default": false
              },
              "compatibility": {
                "name": "compatibility",
                "type": "string",
                "enum": [
                  "none",
                  "backward",
                  "backward_transitive",
                  "forward",
                  "forward_transitive",
                  "full",
                  "full_transitive"
                ],
                "strict": false,
                "required": true,
                "default": "none"
              },
              "defaultversionid": {
                "name": "defaultversionid",
                "type": "string",
                "required": true
              },
              "defaultversionurl": {
                "name": "defaultversionurl",
                "type": "url",
                "readonly": true,
                "required": true
              },
              "defaultversionsticky": {
                "name": "defaultversionsticky",
                "type": "boolean",
                "readonly": true,
                "required": true,
                "default": false
              }
            }
          },
          "schemas": {
            "plural": "schemas",
            "singular": "schema",
            "maxversions": 0,
            "setversionid": true,
            "setdefaultversionsticky": true,
            "hasdocument": true,
            "singleversionroot": false,
            "attributes": {
              "schemaid": {
                "name": "schemaid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "versionid": {
                "name": "versionid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "self": {
                "name": "self",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xid": {
                "name": "xid",
                "type": "xid",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "epoch": {
                "name": "epoch",
                "type": "uinteger",
                "required": true
              },
              "name": {
                "name": "name",
                "type": "string"
              },
              "isdefault": {
                "name": "isdefault",
                "type": "boolean",
                "readonly": true,
                "required": true,
                "default": false
              },
              "description": {
                "name": "description",
                "type": "string"
              },
              "documentation": {
                "name": "documentation",
                "type": "url"
              },
              "labels": {
                "name": "labels",
                "type": "map",
                "item": {
                  "type": "string"
                }
              },
              "createdat": {
                "name": "createdat",
                "type": "timestamp",
                "required": true
              },
              "modifiedat": {
                "name": "modifiedat",
                "type": "timestamp",
                "required": true
              },
              "ancestor": {
                "name": "ancestor",
                "type": "string",
                "required": true
              },
              "contenttype": {
                "name": "contenttype",
                "type": "string"
              }
            },
            "metaattributes": {
              "schemaid": {
                "name": "schemaid",
                "type": "string",
                "immutable": true,
                "required": true
              },
              "self": {
                "name": "self",
                "type": "url",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xid": {
                "name": "xid",
                "type": "xid",
                "readonly": true,
                "immutable": true,
                "required": true
              },
              "xref": {
                "name": "xref",
                "type": "url"
              },
              "epoch": {
                "name": "epoch",
                "type": "uinteger",
                "required": true
              },
              "createdat": {
                "name": "createdat",
                "type": "timestamp",
                "required": true
              },
              "modifiedat": {
                "name": "modifiedat",
                "type": "timestamp",
                "required": true
              },
              "readonly": {
                "name": "readonly",
                "type": "boolean",
                "required": true,
                "default": false
              },
              "compatibility": {
                "name": "compatibility",
                "type": "string",
                "enum": [
                  "none",
                  "backward",
                  "backward_transitive",
                  "forward",
                  "forward_transitive",
                  "full",
                  "full_transitive"
                ],
                "strict": false,
                "required": true,
                "default": "none"
              },
              "defaultversionid": {
                "name": "defaultversionid",
                "type": "string",
                "required": true
              },
              "defaultversionurl": {
                "name": "defaultversionurl",
                "type": "url",
                "readonly": true,
                "required": true
              },
              "defaultversionsticky": {
                "name": "defaultversionsticky",
                "type": "boolean",
                "readonly": true,
                "required": true,
                "default": false
              }
            }
          }
        }
      }
    }
  },
  "modifiedat": "2025-04-22T02:33:10.71424167Z",
  "registryid": "xRegistry",
  "self": "#/",
  "specs": {
    "cloudevents-v1": {
      "specid": "cloudevents-v1",
      "self": "#/specs/cloudevents-v1",
      "xid": "/specs/cloudevents-v1",
      "epoch": 14,
      "createdat": "2025-04-22T02:33:06.969836805Z",
      "modifiedat": "2025-04-22T02:33:08.034136702Z",
      "docsurl": "#/specs/cloudevents-v1/docs",
      "docs": {
        "model.json": {
          "docid": "model.json",
          "self": "#/specs/cloudevents-v1/docs/model.json",
          "xid": "/specs/cloudevents-v1/docs/model.json",
          "metaurl": "#/specs/cloudevents-v1/docs/model.json/meta",
          "meta": {
            "docid": "model.json",
            "self": "#/specs/cloudevents-v1/docs/model.json/meta",
            "xid": "/specs/cloudevents-v1/docs/model.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:06.969836805Z",
            "modifiedat": "2025-04-22T02:33:06.969836805Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/cloudevents-v1/docs/model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/cloudevents-v1/docs/model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "model.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/cloudevents-v1/docs/model.json/versions/v1.0-rc1",
              "xid": "/specs/cloudevents-v1/docs/model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:06.969836805Z",
              "modifiedat": "2025-04-22T02:33:06.969836805Z",
              "ancestor": "v1.0-rc1",
              "docbase64": "ewogICJncm91cHMiOiB7CiAgICAiJGluY2x1ZGVzIjogWwogICAgICAiLi4vZW5kcG9pbnQvbW9kZWwuanNvbiNncm91cHMiLAogICAgICAiLi4vbWVzc2FnZS9tb2RlbC5qc29uI2dyb3VwcyIsCiAgICAgICIuLi9zY2hlbWEvbW9kZWwuanNvbiNncm91cHMiCiAgICBdCiAgfQp9Cg=="
            }
          },
          "versionscount": 1
        },
        "spec.md": {
          "docid": "spec.md",
          "self": "#/specs/cloudevents-v1/docs/spec.md",
          "xid": "/specs/cloudevents-v1/docs/spec.md",
          "metaurl": "#/specs/cloudevents-v1/docs/spec.md/meta",
          "meta": {
            "docid": "spec.md",
            "self": "#/specs/cloudevents-v1/docs/spec.md/meta",
            "xid": "/specs/cloudevents-v1/docs/spec.md/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:07.04649955Z",
            "modifiedat": "2025-04-22T02:33:07.04649955Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/cloudevents-v1/docs/spec.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/cloudevents-v1/docs/spec.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "spec.md",
              "versionid": "v1.0-rc1",
              "self": "#/specs/cloudevents-v1/docs/spec.md/versions/v1.0-rc1",
              "xid": "/specs/cloudevents-v1/docs/spec.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:07.04649955Z",
              "modifiedat": "2025-04-22T02:33:07.04649955Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "docscount": 2,
      "samplesurl": "#/specs/cloudevents-v1/samples",
      "samples": {
        "contoso-erp-jsons07.xreg.json": {
          "sampleid": "contoso-erp-jsons07.xreg.json",
          "self": "#/specs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json",
          "xid": "/specs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json",
          "metaurl": "#/specs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/meta",
          "meta": {
            "sampleid": "contoso-erp-jsons07.xreg.json",
            "self": "#/specs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/meta",
            "xid": "/specs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:07.370206757Z",
            "modifiedat": "2025-04-22T02:33:07.370206757Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "contoso-erp-jsons07.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/versions/v1.0-rc1",
              "xid": "/specs/cloudevents-v1/samples/contoso-erp-jsons07.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:07.370206757Z",
              "modifiedat": "2025-04-22T02:33:07.370206757Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "inkjet-proto3.xreg.json": {
          "sampleid": "inkjet-proto3.xreg.json",
          "self": "#/specs/cloudevents-v1/samples/inkjet-proto3.xreg.json",
          "xid": "/specs/cloudevents-v1/samples/inkjet-proto3.xreg.json",
          "metaurl": "#/specs/cloudevents-v1/samples/inkjet-proto3.xreg.json/meta",
          "meta": {
            "sampleid": "inkjet-proto3.xreg.json",
            "self": "#/specs/cloudevents-v1/samples/inkjet-proto3.xreg.json/meta",
            "xid": "/specs/cloudevents-v1/samples/inkjet-proto3.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:07.451086978Z",
            "modifiedat": "2025-04-22T02:33:07.451086978Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/cloudevents-v1/samples/inkjet-proto3.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/cloudevents-v1/samples/inkjet-proto3.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "inkjet-proto3.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/cloudevents-v1/samples/inkjet-proto3.xreg.json/versions/v1.0-rc1",
              "xid": "/specs/cloudevents-v1/samples/inkjet-proto3.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:07.451086978Z",
              "modifiedat": "2025-04-22T02:33:07.451086978Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "lightbulb-avro.xreg.json": {
          "sampleid": "lightbulb-avro.xreg.json",
          "self": "#/specs/cloudevents-v1/samples/lightbulb-avro.xreg.json",
          "xid": "/specs/cloudevents-v1/samples/lightbulb-avro.xreg.json",
          "metaurl": "#/specs/cloudevents-v1/samples/lightbulb-avro.xreg.json/meta",
          "meta": {
            "sampleid": "lightbulb-avro.xreg.json",
            "self": "#/specs/cloudevents-v1/samples/lightbulb-avro.xreg.json/meta",
            "xid": "/specs/cloudevents-v1/samples/lightbulb-avro.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:07.530875581Z",
            "modifiedat": "2025-04-22T02:33:07.530875581Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/cloudevents-v1/samples/lightbulb-avro.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/cloudevents-v1/samples/lightbulb-avro.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "lightbulb-avro.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/cloudevents-v1/samples/lightbulb-avro.xreg.json/versions/v1.0-rc1",
              "xid": "/specs/cloudevents-v1/samples/lightbulb-avro.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:07.530875581Z",
              "modifiedat": "2025-04-22T02:33:07.530875581Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "schemastore_org.xreg.json": {
          "sampleid": "schemastore_org.xreg.json",
          "self": "#/specs/cloudevents-v1/samples/schemastore_org.xreg.json",
          "xid": "/specs/cloudevents-v1/samples/schemastore_org.xreg.json",
          "metaurl": "#/specs/cloudevents-v1/samples/schemastore_org.xreg.json/meta",
          "meta": {
            "sampleid": "schemastore_org.xreg.json",
            "self": "#/specs/cloudevents-v1/samples/schemastore_org.xreg.json/meta",
            "xid": "/specs/cloudevents-v1/samples/schemastore_org.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:08.034136702Z",
            "modifiedat": "2025-04-22T02:33:08.034136702Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/cloudevents-v1/samples/schemastore_org.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/cloudevents-v1/samples/schemastore_org.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "schemastore_org.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/cloudevents-v1/samples/schemastore_org.xreg.json/versions/v1.0-rc1",
              "xid": "/specs/cloudevents-v1/samples/schemastore_org.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:08.034136702Z",
              "modifiedat": "2025-04-22T02:33:08.034136702Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "smartoven-xsd.xreg.json": {
          "sampleid": "smartoven-xsd.xreg.json",
          "self": "#/specs/cloudevents-v1/samples/smartoven-xsd.xreg.json",
          "xid": "/specs/cloudevents-v1/samples/smartoven-xsd.xreg.json",
          "metaurl": "#/specs/cloudevents-v1/samples/smartoven-xsd.xreg.json/meta",
          "meta": {
            "sampleid": "smartoven-xsd.xreg.json",
            "self": "#/specs/cloudevents-v1/samples/smartoven-xsd.xreg.json/meta",
            "xid": "/specs/cloudevents-v1/samples/smartoven-xsd.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:07.610925301Z",
            "modifiedat": "2025-04-22T02:33:07.610925301Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/cloudevents-v1/samples/smartoven-xsd.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/cloudevents-v1/samples/smartoven-xsd.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "smartoven-xsd.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/cloudevents-v1/samples/smartoven-xsd.xreg.json/versions/v1.0-rc1",
              "xid": "/specs/cloudevents-v1/samples/smartoven-xsd.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:07.610925301Z",
              "modifiedat": "2025-04-22T02:33:07.610925301Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "vacuumcleaner-avro.xreg.json": {
          "sampleid": "vacuumcleaner-avro.xreg.json",
          "self": "#/specs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json",
          "xid": "/specs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json",
          "metaurl": "#/specs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/meta",
          "meta": {
            "sampleid": "vacuumcleaner-avro.xreg.json",
            "self": "#/specs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/meta",
            "xid": "/specs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:07.689725976Z",
            "modifiedat": "2025-04-22T02:33:07.689725976Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "vacuumcleaner-avro.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/versions/v1.0-rc1",
              "xid": "/specs/cloudevents-v1/samples/vacuumcleaner-avro.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:07.689725976Z",
              "modifiedat": "2025-04-22T02:33:07.689725976Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "watchkam-jsons07.xreg.json": {
          "sampleid": "watchkam-jsons07.xreg.json",
          "self": "#/specs/cloudevents-v1/samples/watchkam-jsons07.xreg.json",
          "xid": "/specs/cloudevents-v1/samples/watchkam-jsons07.xreg.json",
          "metaurl": "#/specs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/meta",
          "meta": {
            "sampleid": "watchkam-jsons07.xreg.json",
            "self": "#/specs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/meta",
            "xid": "/specs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:07.773243973Z",
            "modifiedat": "2025-04-22T02:33:07.773243973Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "watchkam-jsons07.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/versions/v1.0-rc1",
              "xid": "/specs/cloudevents-v1/samples/watchkam-jsons07.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:07.773243973Z",
              "modifiedat": "2025-04-22T02:33:07.773243973Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": ""
            }
          },
          "versionscount": 1
        },
        "waterboiler-mqtt5-jsons07.xreg.json": {
          "sampleid": "waterboiler-mqtt5-jsons07.xreg.json",
          "self": "#/specs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json",
          "xid": "/specs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json",
          "metaurl": "#/specs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/meta",
          "meta": {
            "sampleid": "waterboiler-mqtt5-jsons07.xreg.json",
            "self": "#/specs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/meta",
            "xid": "/specs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:07.868341471Z",
            "modifiedat": "2025-04-22T02:33:07.868341471Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "waterboiler-mqtt5-jsons07.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/versions/v1.0-rc1",
              "xid": "/specs/cloudevents-v1/samples/waterboiler-mqtt5-jsons07.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:07.868341471Z",
              "modifiedat": "2025-04-22T02:33:07.868341471Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICAgIiRzY2hlbWEiOiAiaHR0cHM6Ly9jbG91ZGV2ZW50cy5pby9zY2hlbWFzL3JlZ2lzdHJ5IiwKICAgICJzcGVjdmVyc2lvbiI6ICIxLjAtcmMxIiwKICAgICJlbmRwb2ludHMiOiB7CiAgICAgICAgIldhdGVyQm9pbGVyLlByb2R1Y2VyIjogewogICAgICAgICAgICAidXNhZ2UiOiAicHJvZHVjZXIiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiUHJvZHVjZXIgZW5kcG9pbnQgZm9yIHdhdGVyIGJvaWxlciBjb21tYW5kcyIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJNUVRULzUuMCIsCiAgICAgICAgICAgICJwcm90b2NvbG9wdGlvbnMiOiB7CiAgICAgICAgICAgICAgICAiZW5kcG9pbnRzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInVyaSI6ICJtcXR0Oi8vbXF0dGJyb2tlcjEuZXhhbXBsZS5jb206MTg4MyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJtZXNzYWdlZ3JvdXBzIjogWwogICAgICAgICAgICAgICAgIiMvbWVzc2FnZWdyb3Vwcy9XYXRlckJvaWxlci5FdmVudHMiCiAgICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJXYXRlckJvaWxlci5Db25zdW1lciI6IHsKICAgICAgICAgICAgInVzYWdlIjogImNvbnN1bWVyIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkNvbnN1bWVyIGVuZHBvaW50IGZvciB3YXRlciBib2lsZXIgZXZlbnRzIiwKICAgICAgICAgICAgInByb3RvY29sIjogIk1RVFQvNS4wIiwKICAgICAgICAgICAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICAgICAgICAgICAgICJlbmRwb2ludHMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidXJpIjogIm1xdHQ6Ly9tcXR0YnJva2VyMS5leGFtcGxlLmNvbToxODgzIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgIm1lc3NhZ2Vncm91cHMiOiBbCiAgICAgICAgICAgICAgICAiIy9tZXNzYWdlZ3JvdXBzL1dhdGVyQm9pbGVyLkV2ZW50cyIKICAgICAgICAgICAgXQogICAgICAgIH0KICAgIH0sCiAgICAibWVzc2FnZWdyb3VwcyI6IHsKICAgICAgICAiV2F0ZXJCb2lsZXIuRXZlbnRzIjogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRXZlbnRzIGZvciB3YXRlciBib2lsZXIgb3BlcmF0aW9ucyIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJNUVRULzUuMCIsCiAgICAgICAgICAgICJtZXNzYWdlcyI6IHsKICAgICAgICAgICAgICAgICJXYXRlckJvaWxlci5UZW1wZXJhdHVyZVVwZGF0ZSI6IHsKICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRXZlbnQgZm9yIHdhdGVyIGJvaWxlciB0ZW1wZXJhdHVyZSB1cGRhdGUiLAogICAgICAgICAgICAgICAgICAgICJwcm90b2NvbCI6ICJNUVRULzUuMCIsCiAgICAgICAgICAgICAgICAgICAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgInRvcGljX25hbWUiOiAid2F0ZXJib2lsZXIve2JvaWxlcklkfS90ZW1wZXJhdHVyZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJxb3MiOiAxLAogICAgICAgICAgICAgICAgICAgICAgICAicmV0YWluIjogZmFsc2UKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJkYXRhc2NoZW1hZm9ybWF0IjogIkpTT05TY2hlbWEvRHJhZnQtMDciLAogICAgICAgICAgICAgICAgICAgICJkYXRhc2NoZW1hdXJpIjogIiMvc2NoZW1hZ3JvdXBzL1dhdGVyQm9pbGVyL3NjaGVtYXMvV2F0ZXJCb2lsZXIuVGVtcGVyYXR1cmVVcGRhdGVFdmVudERhdGEiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIldhdGVyQm9pbGVyLlN0YXR1c0NoYW5nZSI6IHsKICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRXZlbnQgZm9yIHdhdGVyIGJvaWxlciBzdGF0dXMgY2hhbmdlIiwKICAgICAgICAgICAgICAgICAgICAicHJvdG9jb2wiOiAiTVFUVC81LjAiLAogICAgICAgICAgICAgICAgICAgICJwcm90b2NvbG9wdGlvbnMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0b3BpY19uYW1lIjogIndhdGVyYm9pbGVyL3tib2lsZXJJZH0vc3RhdHVzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInFvcyI6IDEsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXRhaW4iOiBmYWxzZQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImRhdGFzY2hlbWFmb3JtYXQiOiAiSlNPTlNjaGVtYS9EcmFmdC0wNyIsCiAgICAgICAgICAgICAgICAgICAgImRhdGFzY2hlbWF1cmkiOiAiIy9zY2hlbWFncm91cHMvV2F0ZXJCb2lsZXIvc2NoZW1hcy9XYXRlckJvaWxlci5TdGF0dXNDaGFuZ2VFdmVudERhdGEiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgInNjaGVtYWdyb3VwcyI6IHsKICAgICAgICAiV2F0ZXJCb2lsZXIiOiB7CiAgICAgICAgICAgICJzY2hlbWFzIjogewogICAgICAgICAgICAgICAgIldhdGVyQm9pbGVyLlRlbXBlcmF0dXJlVXBkYXRlRXZlbnREYXRhIjogewogICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAiSlNPTlNjaGVtYS9EcmFmdC0wNyIsCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb25zIjogewogICAgICAgICAgICAgICAgICAgICAgICAiMSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAiSlNPTlNjaGVtYS9EcmFmdC0wNyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic2NoZW1hIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlRlbXBlcmF0dXJlVXBkYXRlRXZlbnREYXRhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRGF0YSBzY2hlbWEgZm9yIHdhdGVyIGJvaWxlciB0ZW1wZXJhdHVyZSB1cGRhdGUgZXZlbnQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJib2lsZXJJZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSWRlbnRpZmllciBvZiB0aGUgd2F0ZXIgYm9pbGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGVtcGVyYXR1cmUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkN1cnJlbnQgdGVtcGVyYXR1cmUgcmVhZGluZyBpbiBDZWxzaXVzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGltZXN0YW1wIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRXZlbnQgdGltZXN0YW1wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJib2lsZXJJZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZW1wZXJhdHVyZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0aW1lc3RhbXAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJXYXRlckJvaWxlci5TdGF0dXNDaGFuZ2VFdmVudERhdGEiOiB7CiAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJKU09OU2NoZW1hL0RyYWZ0LTA3IiwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbnMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICIxIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJKU09OU2NoZW1hL0RyYWZ0LTA3IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzY2hlbWEiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiRzY2hlbWEiOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiU3RhdHVzQ2hhbmdlRXZlbnREYXRhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRGF0YSBzY2hlbWEgZm9yIHdhdGVyIGJvaWxlciBzdGF0dXMgY2hhbmdlIGV2ZW50IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYm9pbGVySWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIklkZW50aWZpZXIgb2YgdGhlIHdhdGVyIGJvaWxlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTmV3IHN0YXR1cyBvZiB0aGUgd2F0ZXIgYm9pbGVyIChlLmcuLCBvbi9vZmYpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGltZXN0YW1wIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRXZlbnQgdGltZXN0YW1wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJib2lsZXJJZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdGF0dXMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGltZXN0YW1wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo="
            }
          },
          "versionscount": 1
        },
        "windgenerator-kafka-avro.xreg.json": {
          "sampleid": "windgenerator-kafka-avro.xreg.json",
          "self": "#/specs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json",
          "xid": "/specs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json",
          "metaurl": "#/specs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/meta",
          "meta": {
            "sampleid": "windgenerator-kafka-avro.xreg.json",
            "self": "#/specs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/meta",
            "xid": "/specs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:07.947714173Z",
            "modifiedat": "2025-04-22T02:33:07.947714173Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "windgenerator-kafka-avro.xreg.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/versions/v1.0-rc1",
              "xid": "/specs/cloudevents-v1/samples/windgenerator-kafka-avro.xreg.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:07.947714173Z",
              "modifiedat": "2025-04-22T02:33:07.947714173Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICIkc2NoZW1hIjogImh0dHBzOi8vY2xvdWRldmVudHMuaW8vc2NoZW1hcy9yZWdpc3RyeSIsCiAgInNwZWN2ZXJzaW9uIjogIjEuMC1yYzEiLAogICJpZCI6ICJ1cm46dXVpZDpORVctVVVJRC1XSU5ER0VORVJBVE9SIiwKICAibWVzc2FnZWdyb3VwcyI6IHsKICAgICJXaW5kR2VuZXJhdG9yLkV2ZW50cyI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIkV2ZW50cyBmb3Igd2luZCBnZW5lcmF0b3Igb3BlcmF0aW9ucyIsCiAgICAgICJwcm90b2NvbCI6ICJLQUZLQSIsCiAgICAgICJtZXNzYWdlcyI6IHsKICAgICAgICAiV2luZEdlbmVyYXRvci5Qb3dlck91dHB1dFVwZGF0ZSI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJFdmVudCBmb3Igd2luZCBnZW5lcmF0b3IgcG93ZXIgb3V0cHV0IHVwZGF0ZSIsCiAgICAgICAgICAicHJvdG9jb2wiOiAiS0FGS0EiLAogICAgICAgICAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICAgICAgICAgImhlYWRlcnMiOiB7CiAgICAgICAgICAgICAgImFjdGlvbiI6IHsKICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJwb3dlck91dHB1dCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJrZXkiOiAie2dlbmVyYXRvcklkfSIKICAgICAgICAgIH0sCiAgICAgICAgICAiZGF0YXNjaGVtYWZvcm1hdCI6ICJBdnJvLzEuMTEiLAogICAgICAgICAgImRhdGFzY2hlbWF1cmkiOiAiIy9zY2hlbWFncm91cHMvV2luZEdlbmVyYXRvci9zY2hlbWFzL1dpbmRHZW5lcmF0b3IuUG93ZXJPdXRwdXRVcGRhdGVFdmVudERhdGEiCiAgICAgICAgfSwKICAgICAgICAiV2luZEdlbmVyYXRvci5TdGF0dXNDaGFuZ2UiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRXZlbnQgZm9yIHdpbmQgZ2VuZXJhdG9yIHN0YXR1cyBjaGFuZ2UiLAogICAgICAgICAgInByb3RvY29sIjogIktBRktBIiwKICAgICAgICAgICJwcm90b2NvbG9wdGlvbnMiOiB7CiAgICAgICAgICAgICJoZWFkZXJzIjogewogICAgICAgICAgICAgICJhY3Rpb24iOiB7CiAgICAgICAgICAgICAgICAidmFsdWUiOiAic3RhdHVzQ2hhbmdlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImtleSI6ICJ7Z2VuZXJhdG9ySWR9IgogICAgICAgICAgfSwKICAgICAgICAgICJkYXRhc2NoZW1hZm9ybWF0IjogIkF2cm8vMS4xMSIsCiAgICAgICAgICAiZGF0YXNjaGVtYXVyaSI6ICIjL3NjaGVtYWdyb3Vwcy9XaW5kR2VuZXJhdG9yL3NjaGVtYXMvV2luZEdlbmVyYXRvci5TdGF0dXNDaGFuZ2VFdmVudERhdGEiCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwKICAic2NoZW1hZ3JvdXBzIjogewogICAgIldpbmRHZW5lcmF0b3IiOiB7CiAgICAgICJzY2hlbWFzIjogewogICAgICAgICJXaW5kR2VuZXJhdG9yLlBvd2VyT3V0cHV0VXBkYXRlRXZlbnREYXRhIjogewogICAgICAgICAgImZvcm1hdCI6ICJBdnJvLzEuMTEiLAogICAgICAgICAgInZlcnNpb25zIjogewogICAgICAgICAgICAiMSI6IHsKICAgICAgICAgICAgICAiZm9ybWF0IjogIkF2cm8vMS4xMSIsCiAgICAgICAgICAgICAgInNjaGVtYSI6IHsKICAgICAgICAgICAgICAgICJ0eXBlIjogInJlY29yZCIsCiAgICAgICAgICAgICAgICAibmFtZSI6ICJQb3dlck91dHB1dFVwZGF0ZUV2ZW50RGF0YSIsCiAgICAgICAgICAgICAgICAiZG9jIjogIkRhdGEgc2NoZW1hIGZvciB3aW5kIGdlbmVyYXRvciBwb3dlciBvdXRwdXQgdXBkYXRlIGV2ZW50IiwKICAgICAgICAgICAgICAgICJmaWVsZHMiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJnZW5lcmF0b3JJZCIsCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAiZG9jIjogIklkZW50aWZpZXIgb2YgdGhlIHdpbmQgZ2VuZXJhdG9yIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicG93ZXJPdXRwdXQiLAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImRvdWJsZSIsCiAgICAgICAgICAgICAgICAgICAgImRvYyI6ICJDdXJyZW50IHBvd2VyIG91dHB1dCBpbiBraWxvd2F0dHMiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJ0aW1lc3RhbXAiLAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImxvbmciLAogICAgICAgICAgICAgICAgICAgICJkb2MiOiAiRXZlbnQgdGltZXN0YW1wIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiV2luZEdlbmVyYXRvci5TdGF0dXNDaGFuZ2VFdmVudERhdGEiOiB7CiAgICAgICAgICAiZm9ybWF0IjogIkF2cm8vMS4xMSIsCiAgICAgICAgICAidmVyc2lvbnMiOiB7CiAgICAgICAgICAgICIxIjogewogICAgICAgICAgICAgICJmb3JtYXQiOiAiQXZyby8xLjExIiwKICAgICAgICAgICAgICAic2NoZW1hIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAicmVjb3JkIiwKICAgICAgICAgICAgICAgICJuYW1lIjogIlN0YXR1c0NoYW5nZUV2ZW50RGF0YSIsCiAgICAgICAgICAgICAgICAiZG9jIjogIkRhdGEgc2NoZW1hIGZvciB3aW5kIGdlbmVyYXRvciBzdGF0dXMgY2hhbmdlIGV2ZW50IiwKICAgICAgICAgICAgICAgICJmaWVsZHMiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJnZW5lcmF0b3JJZCIsCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAiZG9jIjogIklkZW50aWZpZXIgb2YgdGhlIHdpbmQgZ2VuZXJhdG9yIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAic3RhdHVzIiwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICJkb2MiOiAiTmV3IHN0YXR1cyBvZiB0aGUgd2luZCBnZW5lcmF0b3IiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJ0aW1lc3RhbXAiLAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImxvbmciLAogICAgICAgICAgICAgICAgICAgICJkb2MiOiAiRXZlbnQgdGltZXN0YW1wIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Cg=="
            }
          },
          "versionscount": 1
        }
      },
      "samplescount": 9,
      "schemasurl": "#/specs/cloudevents-v1/schemas",
      "schemas": {
        "document-schema.avsc": {
          "schemaid": "document-schema.avsc",
          "self": "#/specs/cloudevents-v1/schemas/document-schema.avsc",
          "xid": "/specs/cloudevents-v1/schemas/document-schema.avsc",
          "metaurl": "#/specs/cloudevents-v1/schemas/document-schema.avsc/meta",
          "meta": {
            "schemaid": "document-schema.avsc",
            "self": "#/specs/cloudevents-v1/schemas/document-schema.avsc/meta",
            "xid": "/specs/cloudevents-v1/schemas/document-schema.avsc/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:07.120718759Z",
            "modifiedat": "2025-04-22T02:33:07.120718759Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/cloudevents-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/cloudevents-v1/schemas/document-schema.avsc/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.avsc",
              "versionid": "v1.0-rc1",
              "self": "#/specs/cloudevents-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "xid": "/specs/cloudevents-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:07.120718759Z",
              "modifiedat": "2025-04-22T02:33:07.120718759Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "document-schema.json": {
          "schemaid": "document-schema.json",
          "self": "#/specs/cloudevents-v1/schemas/document-schema.json",
          "xid": "/specs/cloudevents-v1/schemas/document-schema.json",
          "metaurl": "#/specs/cloudevents-v1/schemas/document-schema.json/meta",
          "meta": {
            "schemaid": "document-schema.json",
            "self": "#/specs/cloudevents-v1/schemas/document-schema.json/meta",
            "xid": "/specs/cloudevents-v1/schemas/document-schema.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:07.197862105Z",
            "modifiedat": "2025-04-22T02:33:07.197862105Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/cloudevents-v1/schemas/document-schema.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/cloudevents-v1/schemas/document-schema.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/cloudevents-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "xid": "/specs/cloudevents-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:07.197862105Z",
              "modifiedat": "2025-04-22T02:33:07.197862105Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "openapi.json": {
          "schemaid": "openapi.json",
          "self": "#/specs/cloudevents-v1/schemas/openapi.json",
          "xid": "/specs/cloudevents-v1/schemas/openapi.json",
          "metaurl": "#/specs/cloudevents-v1/schemas/openapi.json/meta",
          "meta": {
            "schemaid": "openapi.json",
            "self": "#/specs/cloudevents-v1/schemas/openapi.json/meta",
            "xid": "/specs/cloudevents-v1/schemas/openapi.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:07.279301241Z",
            "modifiedat": "2025-04-22T02:33:07.279301241Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/cloudevents-v1/schemas/openapi.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/cloudevents-v1/schemas/openapi.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "openapi.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/cloudevents-v1/schemas/openapi.json/versions/v1.0-rc1",
              "xid": "/specs/cloudevents-v1/schemas/openapi.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:07.279301241Z",
              "modifiedat": "2025-04-22T02:33:07.279301241Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "schemascount": 3
    },
    "core-v1": {
      "specid": "core-v1",
      "self": "#/specs/core-v1",
      "xid": "/specs/core-v1",
      "epoch": 12,
      "createdat": "2025-04-22T02:33:08.129197091Z",
      "modifiedat": "2025-04-22T02:33:09.104670905Z",
      "docsurl": "#/specs/core-v1/docs",
      "docs": {
        "model.json": {
          "docid": "model.json",
          "self": "#/specs/core-v1/docs/model.json",
          "xid": "/specs/core-v1/docs/model.json",
          "metaurl": "#/specs/core-v1/docs/model.json/meta",
          "meta": {
            "docid": "model.json",
            "self": "#/specs/core-v1/docs/model.json/meta",
            "xid": "/specs/core-v1/docs/model.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:08.129197091Z",
            "modifiedat": "2025-04-22T02:33:08.129197091Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/core-v1/docs/model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/core-v1/docs/model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "model.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/core-v1/docs/model.json/versions/v1.0-rc1",
              "xid": "/specs/core-v1/docs/model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:08.129197091Z",
              "modifiedat": "2025-04-22T02:33:08.129197091Z",
              "ancestor": "v1.0-rc1",
              "docbase64": "ewogICJhdHRyaWJ1dGVzIjogewogICAgInNwZWN2ZXJzaW9uIjogewogICAgICAibmFtZSI6ICJzcGVjdmVyc2lvbiIsCiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJyZWFkb25seSI6IHRydWUsCiAgICAgICJpbW11dGFibGUiOiB0cnVlLAogICAgICAicmVxdWlyZWQiOiB0cnVlLAogICAgICAiZGVmYXVsdCI6ICIxLjAtcmMxIgogICAgfSwKICAgICJyZWdpc3RyeWlkIjogewogICAgICAibmFtZSI6ICJyZWdpc3RyeWlkIiwKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImltbXV0YWJsZSI6IHRydWUsCiAgICAgICJyZXF1aXJlZCI6IHRydWUKICAgIH0sCiAgICAic2VsZiI6IHsKICAgICAgIm5hbWUiOiAic2VsZiIsCiAgICAgICJ0eXBlIjogInVybCIsCiAgICAgICJyZWFkb25seSI6IHRydWUsCiAgICAgICJyZXF1aXJlZCI6IHRydWUKICAgIH0sCiAgICAieGlkIjogewogICAgICAibmFtZSI6ICJ4aWQiLAogICAgICAidHlwZSI6ICJ4aWQiLAogICAgICAicmVhZG9ubHkiOiB0cnVlLAogICAgICAicmVxdWlyZWQiOiB0cnVlCiAgICB9LAogICAgImVwb2NoIjogewogICAgICAibmFtZSI6ICJlcG9jaCIsCiAgICAgICJ0eXBlIjogInVpbnRlZ2VyIiwKICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgfSwKICAgICJuYW1lIjogewogICAgICAibmFtZSI6ICJuYW1lIiwKICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgfSwKICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgIm5hbWUiOiAiZGVzY3JpcHRpb24iLAogICAgICAidHlwZSI6ICJzdHJpbmciCiAgICB9LAogICAgImRvY3VtZW50YXRpb24iOiB7CiAgICAgICJuYW1lIjogImRvY3VtZW50YXRpb24iLAogICAgICAidHlwZSI6ICJ1cmwiCiAgICB9LAogICAgImxhYmVscyI6IHsKICAgICAgIm5hbWUiOiAibGFiZWxzIiwKICAgICAgInR5cGUiOiAibWFwIiwKICAgICAgIml0ZW0iOiB7CiAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICB9CiAgICB9LAogICAgImNyZWF0ZWRhdCI6IHsKICAgICAgIm5hbWUiOiAiY3JlYXRlZGF0IiwKICAgICAgInR5cGUiOiAidGltZXN0YW1wIiwKICAgICAgInJlYWRvbmx5IjogdHJ1ZQogICAgfSwKICAgICJtb2RpZmllZGF0IjogewogICAgICAibmFtZSI6ICJtb2RpZmllZGF0IiwKICAgICAgInR5cGUiOiAidGltZXN0YW1wIiwKICAgICAgInJlYWRvbmx5IjogdHJ1ZQogICAgfQogIH0KfQo="
            }
          },
          "versionscount": 1
        },
        "primer.md": {
          "docid": "primer.md",
          "self": "#/specs/core-v1/docs/primer.md",
          "xid": "/specs/core-v1/docs/primer.md",
          "metaurl": "#/specs/core-v1/docs/primer.md/meta",
          "meta": {
            "docid": "primer.md",
            "self": "#/specs/core-v1/docs/primer.md/meta",
            "xid": "/specs/core-v1/docs/primer.md/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:08.214990747Z",
            "modifiedat": "2025-04-22T02:33:08.214990747Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/core-v1/docs/primer.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/core-v1/docs/primer.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "primer.md",
              "versionid": "v1.0-rc1",
              "self": "#/specs/core-v1/docs/primer.md/versions/v1.0-rc1",
              "xid": "/specs/core-v1/docs/primer.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:08.214990747Z",
              "modifiedat": "2025-04-22T02:33:08.214990747Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "sample-model.json": {
          "docid": "sample-model.json",
          "self": "#/specs/core-v1/docs/sample-model.json",
          "xid": "/specs/core-v1/docs/sample-model.json",
          "metaurl": "#/specs/core-v1/docs/sample-model.json/meta",
          "meta": {
            "docid": "sample-model.json",
            "self": "#/specs/core-v1/docs/sample-model.json/meta",
            "xid": "/specs/core-v1/docs/sample-model.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:08.298239787Z",
            "modifiedat": "2025-04-22T02:33:08.298239787Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/core-v1/docs/sample-model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/core-v1/docs/sample-model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "sample-model.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/core-v1/docs/sample-model.json/versions/v1.0-rc1",
              "xid": "/specs/core-v1/docs/sample-model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:08.298239787Z",
              "modifiedat": "2025-04-22T02:33:08.298239787Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "sample.png": {
          "docid": "sample.png",
          "self": "#/specs/core-v1/docs/sample.png",
          "xid": "/specs/core-v1/docs/sample.png",
          "metaurl": "#/specs/core-v1/docs/sample.png/meta",
          "meta": {
            "docid": "sample.png",
            "self": "#/specs/core-v1/docs/sample.png/meta",
            "xid": "/specs/core-v1/docs/sample.png/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:08.386050323Z",
            "modifiedat": "2025-04-22T02:33:08.386050323Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/core-v1/docs/sample.png/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/core-v1/docs/sample.png/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "sample.png",
              "versionid": "v1.0-rc1",
              "self": "#/specs/core-v1/docs/sample.png/versions/v1.0-rc1",
              "xid": "/specs/core-v1/docs/sample.png/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:08.386050323Z",
              "modifiedat": "2025-04-22T02:33:08.386050323Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "spec.md": {
          "docid": "spec.md",
          "self": "#/specs/core-v1/docs/spec.md",
          "xid": "/specs/core-v1/docs/spec.md",
          "metaurl": "#/specs/core-v1/docs/spec.md/meta",
          "meta": {
            "docid": "spec.md",
            "self": "#/specs/core-v1/docs/spec.md/meta",
            "xid": "/specs/core-v1/docs/spec.md/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:08.476560936Z",
            "modifiedat": "2025-04-22T02:33:08.476560936Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/core-v1/docs/spec.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/core-v1/docs/spec.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "spec.md",
              "versionid": "v1.0-rc1",
              "self": "#/specs/core-v1/docs/spec.md/versions/v1.0-rc1",
              "xid": "/specs/core-v1/docs/spec.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:08.476560936Z",
              "modifiedat": "2025-04-22T02:33:08.476560936Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "xregbasicmodel.png": {
          "docid": "xregbasicmodel.png",
          "self": "#/specs/core-v1/docs/xregbasicmodel.png",
          "xid": "/specs/core-v1/docs/xregbasicmodel.png",
          "metaurl": "#/specs/core-v1/docs/xregbasicmodel.png/meta",
          "meta": {
            "docid": "xregbasicmodel.png",
            "self": "#/specs/core-v1/docs/xregbasicmodel.png/meta",
            "xid": "/specs/core-v1/docs/xregbasicmodel.png/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:08.57842021Z",
            "modifiedat": "2025-04-22T02:33:08.57842021Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/core-v1/docs/xregbasicmodel.png/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/core-v1/docs/xregbasicmodel.png/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "xregbasicmodel.png",
              "versionid": "v1.0-rc1",
              "self": "#/specs/core-v1/docs/xregbasicmodel.png/versions/v1.0-rc1",
              "xid": "/specs/core-v1/docs/xregbasicmodel.png/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:08.57842021Z",
              "modifiedat": "2025-04-22T02:33:08.57842021Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "xregfullmodel.png": {
          "docid": "xregfullmodel.png",
          "self": "#/specs/core-v1/docs/xregfullmodel.png",
          "xid": "/specs/core-v1/docs/xregfullmodel.png",
          "metaurl": "#/specs/core-v1/docs/xregfullmodel.png/meta",
          "meta": {
            "docid": "xregfullmodel.png",
            "self": "#/specs/core-v1/docs/xregfullmodel.png/meta",
            "xid": "/specs/core-v1/docs/xregfullmodel.png/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:08.668614056Z",
            "modifiedat": "2025-04-22T02:33:08.668614056Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/core-v1/docs/xregfullmodel.png/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/core-v1/docs/xregfullmodel.png/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "xregfullmodel.png",
              "versionid": "v1.0-rc1",
              "self": "#/specs/core-v1/docs/xregfullmodel.png/versions/v1.0-rc1",
              "xid": "/specs/core-v1/docs/xregfullmodel.png/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:08.668614056Z",
              "modifiedat": "2025-04-22T02:33:08.668614056Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "docscount": 7,
      "samplesurl": "#/specs/core-v1/samples",
      "samples": {
        "contoso-crm.cereg": {
          "sampleid": "contoso-crm.cereg",
          "self": "#/specs/core-v1/samples/contoso-crm.cereg",
          "xid": "/specs/core-v1/samples/contoso-crm.cereg",
          "metaurl": "#/specs/core-v1/samples/contoso-crm.cereg/meta",
          "meta": {
            "sampleid": "contoso-crm.cereg",
            "self": "#/specs/core-v1/samples/contoso-crm.cereg/meta",
            "xid": "/specs/core-v1/samples/contoso-crm.cereg/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:09.104670905Z",
            "modifiedat": "2025-04-22T02:33:09.104670905Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/core-v1/samples/contoso-crm.cereg/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/core-v1/samples/contoso-crm.cereg/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "contoso-crm.cereg",
              "versionid": "v1.0-rc1",
              "self": "#/specs/core-v1/samples/contoso-crm.cereg/versions/v1.0-rc1",
              "xid": "/specs/core-v1/samples/contoso-crm.cereg/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:09.104670905Z",
              "modifiedat": "2025-04-22T02:33:09.104670905Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICAgIiRzY2hlbWEiOiAiaHR0cHM6Ly9jbG91ZGV2ZW50cy5pby9zY2hlbWFzL3JlZ2lzdHJ5IiwKICAgICJzcGVjdmVyc2lvbiI6ICIxLjAtcmMxIiwKICAgICJlbmRwb2ludHMiOiB7CiAgICAgICAgIkNvbnRvc28uQ1JNLkV2ZW50aW5nLkh0dHAiOiB7CiAgICAgICAgICAgICJpZCI6ICJDb250b3NvLkNSTS5FdmVudGluZy5IdHRwIiwKICAgICAgICAgICAgInVzYWdlIjogInByb2R1Y2VyIiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAgICJwcm90b2NvbCI6ICJIVFRQIiwKICAgICAgICAgICAgICAgICJzdHJpY3QiOiBmYWxzZSwKICAgICAgICAgICAgICAgICJlbmRwb2ludHMiOiBbCiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZXJwc3lzdGVtLmNvbS9ldmVudHMiCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZWZpbml0aW9uR3JvdXBzIjogWwogICAgICAgICAgICAgICAgIiMvZGVmaW5pdGlvbkdyb3Vwcy9Db250b3NvLkNSTS5FdmVudHMiCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJmb3JtYXQiOiAiQ2xvdWRFdmVudHMvMS4wIgogICAgICAgIH0KICAgIH0sCiAgICAiZGVmaW5pdGlvbkdyb3VwcyI6IHsKICAgICAgICAiQ29udG9zby5DUk0uRXZlbnRzIjogewogICAgICAgICAgICAiaWQiOiAiQ29udG9zby5DUk0uRXZlbnRzIiwKICAgICAgICAgICAgImRlZmluaXRpb25zIjogewogICAgICAgICAgICAgICAgIkNvbnRvc28uQ1JNLkV2ZW50cy5DdXN0b21lckNyZWF0ZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgImlkIjogIkNvbnRvc28uQ1JNLkV2ZW50cy5DdXN0b21lckNyZWF0ZWQiLAogICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBbiBvcmRlciBoYXMgYmVlbiBwbGFjZWQiLAogICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAiQ2xvdWRFdmVudHMvMS4wIiwKICAgICAgICAgICAgICAgICAgICAibWV0YWRhdGEiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJhdHRyaWJ1dGVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIkNvbnRvc28uQ1JNLkV2ZW50cy5DdXN0b21lckNyZWF0ZWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGltZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJkYXRldGltZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzb3VyY2UiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidXJpdGVtcGxhdGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIvY3JtL2N1c3RvbWVycyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2NoZW1hdXJsIjogIiMvc2NoZW1hR3JvdXBzL0NvbnRvc28uQ1JNLkV2ZW50cy9zY2hlbWFzL2N1c3RvbWVyQ3JlYXRlZEV2ZW50RGF0YSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiQ29udG9zby5DUk0uRXZlbnRzLkN1c3RvbWVyVXBkYXRlZCI6IHsKICAgICAgICAgICAgICAgICAgICAiaWQiOiAiQ29udG9zby5DUk0uRXZlbnRzLkN1c3RvbWVyVXBkYXRlZCIsCiAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFuIG9yZGVyIGhhcyBiZWVuIHBsYWNlZCIsCiAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJDbG91ZEV2ZW50cy8xLjAiLAogICAgICAgICAgICAgICAgICAgICJtZXRhZGF0YSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImF0dHJpYnV0ZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiQ29udG9zby5DUk0uRXZlbnRzLkN1c3RvbWVyVXBkYXRlZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0aW1lIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImRhdGV0aW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInNvdXJjZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ1cml0ZW1wbGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIi9jcm0vY3VzdG9tZXJzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzY2hlbWF1cmwiOiAiIy9zY2hlbWFHcm91cHMvQ29udG9zby5DUk0uRXZlbnRzL3NjaGVtYXMvY3VzdG9tZXJVcGRhdGVkRXZlbnREYXRhIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJDb250b3NvLkNSTS5FdmVudHMuQ3VzdG9tZXJEZWxldGVkIjogewogICAgICAgICAgICAgICAgICAgICJpZCI6ICJDb250b3NvLkNSTS5FdmVudHMuQ3VzdG9tZXJEZWxldGVkIiwKICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQSBjdXN0b21lciBoYXMgYmVlbiBkZWxldGVkIiwKICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IjogIkNsb3VkRXZlbnRzLzEuMCIsCiAgICAgICAgICAgICAgICAgICAgIm1ldGFkYXRhIjogewogICAgICAgICAgICAgICAgICAgICAgICAiYXR0cmlidXRlcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJDb250b3NvLkNSTS5FdmVudHMuQ3VzdG9tZXJEZWxldGVkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInRpbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiZGF0ZXRpbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic291cmNlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInVyaXRlbXBsYXRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiL2NybS9jdXN0b21lcnMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNjaGVtYXVybCI6ICIjL3NjaGVtYUdyb3Vwcy9Db250b3NvLkNSTS5FdmVudHMvc2NoZW1hcy9jdXN0b21lckRlbGV0ZWRFdmVudERhdGEiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIkNvbnRvc28uQ1JNLkV2ZW50cy5DdXN0b21lclN0YXR1c1VwZGF0ZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgImlkIjogIkNvbnRvc28uQ1JNLkV2ZW50cy5DdXN0b21lclN0YXR1c1VwZGF0ZWQiLAogICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIGN1c3RvbWVyJ3Mgc3RhdHVzIGhhcyBiZWVuIHVwZGF0ZWQiLAogICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAiQ2xvdWRFdmVudHMvMS4wIiwKICAgICAgICAgICAgICAgICAgICAibWV0YWRhdGEiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJhdHRyaWJ1dGVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIkNvbnRvc28uQ1JNLkV2ZW50cy5DdXN0b21lclN0YXR1c1VwZGF0ZWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGltZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJkYXRldGltZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzb3VyY2UiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidXJpdGVtcGxhdGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIvY3JtL2N1c3RvbWVycyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2NoZW1hdXJsIjogIiMvc2NoZW1hR3JvdXBzL0NvbnRvc28uQ1JNLkV2ZW50cy9zY2hlbWFzL2N1c3RvbWVyU3RhdHVzVXBkYXRlZEV2ZW50RGF0YSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiQ29udG9zby5DUk0uRXZlbnRzLkN1c3RvbWVyQWRkcmVzc1VwZGF0ZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgImlkIjogIkNvbnRvc28uQ1JNLkV2ZW50cy5DdXN0b21lckFkZHJlc3NVcGRhdGVkIiwKICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQSBjdXN0b21lcidzIGFkZHJlc3MgaGFzIGJlZW4gdXBkYXRlZCIsCiAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJDbG91ZEV2ZW50cy8xLjAiLAogICAgICAgICAgICAgICAgICAgICJtZXRhZGF0YSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImF0dHJpYnV0ZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiQ29udG9zby5DUk0uRXZlbnRzLkN1c3RvbWVyQWRkcmVzc1VwZGF0ZWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGltZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJkYXRldGltZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzb3VyY2UiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidXJpdGVtcGxhdGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIvY3JtL2N1c3RvbWVycyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2NoZW1hdXJsIjogIiMvc2NoZW1hR3JvdXBzL0NvbnRvc28uQ1JNLkV2ZW50cy9zY2hlbWFzL2N1c3RvbWVyQWRkcmVzc1VwZGF0ZWRFdmVudERhdGEiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIkNvbnRvc28uQ1JNLkV2ZW50cy5DdXN0b21lckNvbnRhY3RVcGRhdGVkIjogewogICAgICAgICAgICAgICAgICAgICJpZCI6ICJDb250b3NvLkNSTS5FdmVudHMuQ3VzdG9tZXJDb250YWN0VXBkYXRlZCIsCiAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgY3VzdG9tZXIncyBjb250YWN0IGluZm9ybWF0aW9uIGhhcyBiZWVuIHVwZGF0ZWQiLAogICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAiQ2xvdWRFdmVudHMvMS4wIiwKICAgICAgICAgICAgICAgICAgICAibWV0YWRhdGEiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJhdHRyaWJ1dGVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIkNvbnRvc28uQ1JNLkV2ZW50cy5DdXN0b21lckNvbnRhY3RVcGRhdGVkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInRpbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiZGF0ZXRpbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic291cmNlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInVyaXRlbXBsYXRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiL2NybS9jdXN0b21lcnMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNjaGVtYXVybCI6ICIjL3NjaGVtYUdyb3Vwcy9Db250b3NvLkNSTS5FdmVudHMvc2NoZW1hcy9jdXN0b21lckNvbnRhY3RVcGRhdGVkRXZlbnREYXRhIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJDb250b3NvLkNSTS5FdmVudHMuQ3VzdG9tZXJOb3RlQWRkZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgImlkIjogIkNvbnRvc28uQ1JNLkV2ZW50cy5DdXN0b21lck5vdGVBZGRlZCIsCiAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgbm90ZSBoYXMgYmVlbiBhZGRlZCB0byBhIGN1c3RvbWVyIiwKICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IjogIkNsb3VkRXZlbnRzLzEuMCIsCiAgICAgICAgICAgICAgICAgICAgIm1ldGFkYXRhIjogewogICAgICAgICAgICAgICAgICAgICAgICAiYXR0cmlidXRlcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJDb250b3NvLkNSTS5FdmVudHMuQ3VzdG9tZXJOb3RlQWRkZWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGltZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJkYXRldGltZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzb3VyY2UiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidXJpdGVtcGxhdGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIvY3JtL2N1c3RvbWVycyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2NoZW1hdXJsIjogIiMvc2NoZW1hR3JvdXBzL0NvbnRvc28uQ1JNLkV2ZW50cy9zY2hlbWFzL2N1c3RvbWVyTm90ZUFkZGVkRXZlbnREYXRhIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJDb250b3NvLkNSTS5FdmVudHMuQ3VzdG9tZXJOb3RlRGVsZXRlZCI6IHsKICAgICAgICAgICAgICAgICAgICAiaWQiOiAiQ29udG9zby5DUk0uRXZlbnRzLkN1c3RvbWVyTm90ZURlbGV0ZWQiLAogICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIG5vdGUgaGFzIGJlZW4gZGVsZXRlZCBmcm9tIGEgY3VzdG9tZXIiLAogICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAiQ2xvdWRFdmVudHMvMS4wIiwKICAgICAgICAgICAgICAgICAgICAibWV0YWRhdGEiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJhdHRyaWJ1dGVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIkNvbnRvc28uQ1JNLkV2ZW50cy5DdXN0b21lck5vdGVEZWxldGVkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInRpbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiZGF0ZXRpbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic291cmNlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInVyaXRlbXBsYXRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiL2NybS9jdXN0b21lcnMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNjaGVtYXVybCI6ICIjL3NjaGVtYUdyb3Vwcy9Db250b3NvLkNSTS5FdmVudHMvc2NoZW1hcy9jdXN0b21lck5vdGVEZWxldGVkRXZlbnREYXRhIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJDb250b3NvLkNSTS5FdmVudHMuQ3VzdG9tZXJOb3RlVXBkYXRlZCI6IHsKICAgICAgICAgICAgICAgICAgICAiaWQiOiAiQ29udG9zby5DUk0uRXZlbnRzLkN1c3RvbWVyTm90ZVVwZGF0ZWQiLAogICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIG5vdGUgaGFzIGJlZW4gdXBkYXRlZCBvbiBhIGN1c3RvbWVyIiwKICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IjogIkNsb3VkRXZlbnRzLzEuMCIsCiAgICAgICAgICAgICAgICAgICAgIm1ldGFkYXRhIjogewogICAgICAgICAgICAgICAgICAgICAgICAiYXR0cmlidXRlcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJDb250b3NvLkNSTS5FdmVudHMuQ3VzdG9tZXJOb3RlVXBkYXRlZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0aW1lIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImRhdGV0aW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInNvdXJjZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ1cml0ZW1wbGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIi9jcm0vY3VzdG9tZXJzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzY2hlbWF1cmwiOiAiIy9zY2hlbWFHcm91cHMvQ29udG9zby5DUk0uRXZlbnRzL3NjaGVtYXMvY3VzdG9tZXJOb3RlVXBkYXRlZEV2ZW50RGF0YSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiQ29udG9zby5DUk0uRXZlbnRzLkN1c3RvbWVyQ29udGFjdEFkZGVkIjogewogICAgICAgICAgICAgICAgICAgICJpZCI6ICJDb250b3NvLkNSTS5FdmVudHMuQ3VzdG9tZXJDb250YWN0QWRkZWQiLAogICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIGNvbnRhY3QgaGFzIGJlZW4gYWRkZWQgdG8gYSBjdXN0b21lciIsCiAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJDbG91ZEV2ZW50cy8xLjAiLAogICAgICAgICAgICAgICAgICAgICJtZXRhZGF0YSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImF0dHJpYnV0ZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGV2ZW50IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIkNvbnRvc28uQ1JNLkV2ZW50cy5DdXN0b21lckNvbnRhY3RBZGRlZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHR5cGUgb2YgdGhlIGV2ZW50IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0aW1lIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImRhdGV0aW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdGltZSB0aGUgZXZlbnQgb2NjdXJyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInNvdXJjZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ1cml0ZW1wbGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIi9jcm0vY3VzdG9tZXJzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc291cmNlIG9mIHRoZSBldmVudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3ViamVjdCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc3ViamVjdCBvZiB0aGUgZXZlbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzY2hlbWF1cmwiOiAiIy9zY2hlbWFHcm91cHMvQ29udG9zby5DUk0uRXZlbnRzL3NjaGVtYXMvY3VzdG9tZXJDb250YWN0QWRkZWRFdmVudERhdGEiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgInNjaGVtYUdyb3VwcyI6IHsKICAgICAgICAiQ29udG9zby5DUk0uRXZlbnRzIjogewogICAgICAgICAgICAiaWQiOiAiQ29udG9zby5DUk0uRXZlbnRzIiwKICAgICAgICAgICAgInNjaGVtYXMiOiB7CiAgICAgICAgICAgICAgICAiY3VzdG9tZXJBZGRyZXNzVXBkYXRlZEV2ZW50RGF0YSI6IHsKICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IiA6ICJKU09OU2NoZW1hL2RyYWZ0LTA3IiwKICAgICAgICAgICAgICAgICAgICAiaWQiOiAiY3VzdG9tZXJBZGRyZXNzVXBkYXRlZEV2ZW50RGF0YSIsCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb25zIjogewogICAgICAgICAgICAgICAgICAgICAgICAiMS4wIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic2NoZW1hdmVyc2lvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaWQiOiAiMS4wIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzY2hlbWEiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImN1c3RvbWVySWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgY3VzdG9tZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhZGRyZXNzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgY3VzdG9tZXIncyBhZGRyZXNzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJlZXQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgY3VzdG9tZXIncyBzdHJlZXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY2l0eSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBjdXN0b21lcidzIGNpdHkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3RhdGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgY3VzdG9tZXIncyBzdGF0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ6aXAiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgY3VzdG9tZXIncyB6aXAgY29kZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJlZXQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjaXR5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3RhdGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ6aXAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImN1c3RvbWVySWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYWRkcmVzcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgImN1c3RvbWVyTm90ZUFkZGVkRXZlbnREYXRhIjogewogICAgICAgICAgICAgICAgICAgICJmb3JtYXQiIDogIkpTT05TY2hlbWEvZHJhZnQtMDciLAogICAgICAgICAgICAgICAgICAgICJpZCI6ICJjdXN0b21lck5vdGVBZGRlZEV2ZW50RGF0YSIsCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb25zIjogewogICAgICAgICAgICAgICAgICAgICAgICAiMS4wIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic2NoZW1hdmVyc2lvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaWQiOiAiMS4wIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzY2hlbWEiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImN1c3RvbWVySWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgY3VzdG9tZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJub3RlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbm90ZSB0aGF0IHdhcyBhZGRlZCB0byB0aGUgY3VzdG9tZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBub3RlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdGV4dCBvZiB0aGUgbm90ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgImN1c3RvbWVyTm90ZURlbGV0ZWRFdmVudERhdGEiOiB7CiAgICAgICAgICAgICAgICAgICAgImZvcm1hdCIgOiAiSlNPTlNjaGVtYS9kcmFmdC0wNyIsCiAgICAgICAgICAgICAgICAgICAgImlkIjogImN1c3RvbWVyTm90ZURlbGV0ZWRFdmVudERhdGEiLAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9ucyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgIjEuMCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInNjaGVtYXZlcnNpb24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImlkIjogIjEuMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic2NoZW1hIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjdXN0b21lcklkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGN1c3RvbWVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibm90ZUlkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIG5vdGUgdGhhdCB3YXMgZGVsZXRlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiY3VzdG9tZXJOb3RlVXBkYXRlZEV2ZW50RGF0YSI6IHsKICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IiA6ICJKU09OU2NoZW1hL2RyYWZ0LTA3IiwKICAgICAgICAgICAgICAgICAgICAiaWQiOiAiY3VzdG9tZXJOb3RlVXBkYXRlZEV2ZW50RGF0YSIsCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb25zIjogewogICAgICAgICAgICAgICAgICAgICAgICAiMS4wIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic2NoZW1hdmVyc2lvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaWQiOiAiMS4wIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzY2hlbWEiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImN1c3RvbWVySWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgY3VzdG9tZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJub3RlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbm90ZSB0aGF0IHdhcyB1cGRhdGVkIG9uIHRoZSBjdXN0b21lciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIG5vdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB0ZXh0IG9mIHRoZSBub3RlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiY3VzdG9tZXJDb250YWN0QWRkZWRFdmVudERhdGEiOiB7CiAgICAgICAgICAgICAgICAgICAgImZvcm1hdCIgOiAiSlNPTlNjaGVtYS9kcmFmdC0wNyIsCiAgICAgICAgICAgICAgICAgICAgImlkIiA6ICJjdXN0b21lckNvbnRhY3RBZGRlZEV2ZW50RGF0YSIsCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb25zIjogewogICAgICAgICAgICAgICAgICAgICAgICAiMS4wIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic2NoZW1hdmVyc2lvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaWQiOiAiMS4wIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzY2hlbWEiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImN1c3RvbWVySWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgY3VzdG9tZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb250YWN0IjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgY29udGFjdCB0aGF0IHdhcyBhZGRlZCB0byB0aGUgY3VzdG9tZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBjb250YWN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbmFtZSBvZiB0aGUgY29udGFjdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgImN1c3RvbWVyQ29udGFjdERlbGV0ZWRFdmVudERhdGEiOiB7CiAgICAgICAgICAgICAgICAgICAgImZvcm1hdCIgOiAiSlNPTlNjaGVtYS9kcmFmdC0wNyIsCiAgICAgICAgICAgICAgICAgICAgImlkIiA6ICJjdXN0b21lckNvbnRhY3REZWxldGVkRXZlbnREYXRhIiwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbnMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICIxLjAiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzY2hlbWF2ZXJzaW9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpZCI6ICIxLjAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInNjaGVtYSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY3VzdG9tZXJJZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBjdXN0b21lciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRhY3RJZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBjb250YWN0IHRoYXQgd2FzIGRlbGV0ZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgImN1c3RvbWVyQ29udGFjdFVwZGF0ZWRFdmVudERhdGEiOiB7CiAgICAgICAgICAgICAgICAgICAgImZvcm1hdCIgOiAiSlNPTlNjaGVtYS9kcmFmdC0wNyIsCiAgICAgICAgICAgICAgICAgICAgImlkIiA6ICJjdXN0b21lckNvbnRhY3RVcGRhdGVkRXZlbnREYXRhIiwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbnMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICIxLjAiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzY2hlbWF2ZXJzaW9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpZCI6ICIxLjAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInNjaGVtYSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY3VzdG9tZXJJZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBjdXN0b21lciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRhY3QiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBjb250YWN0IHRoYXQgd2FzIHVwZGF0ZWQgb24gdGhlIGN1c3RvbWVyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgY29udGFjdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG5hbWUgb2YgdGhlIGNvbnRhY3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJjdXN0b21lckNyZWF0ZWRFdmVudERhdGEiOiB7CiAgICAgICAgICAgICAgICAgICAgImZvcm1hdCIgOiAiSlNPTlNjaGVtYS9kcmFmdC0wNyIsCiAgICAgICAgICAgICAgICAgICAgImlkIiA6ICJjdXN0b21lckNyZWF0ZWRFdmVudERhdGEiLAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9ucyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgIjEuMCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInNjaGVtYXZlcnNpb24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImlkIjogIjEuMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic2NoZW1hIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjdXN0b21lcklkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGN1c3RvbWVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG5hbWUgb2YgdGhlIGN1c3RvbWVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJjdXN0b21lclN0YXR1c1VwZGF0ZWRFdmVudERhdGEiOiB7CiAgICAgICAgICAgICAgICAgICAgImZvcm1hdCIgOiAiSlNPTlNjaGVtYS9kcmFmdC0wNyIsCiAgICAgICAgICAgICAgICAgICAgImlkIiA6ICJjdXN0b21lclN0YXR1c1VwZGF0ZWRFdmVudERhdGEiLAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9ucyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgIjEuMCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInNjaGVtYXZlcnNpb24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImlkIjogIjEuMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic2NoZW1hIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjdXN0b21lcklkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGN1c3RvbWVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc3RhdHVzIG9mIHRoZSBjdXN0b21lciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiY3VzdG9tZXJEZWxldGVkRXZlbnREYXRhIjogewogICAgICAgICAgICAgICAgICAgICJmb3JtYXQiIDogIkpTT05TY2hlbWEvZHJhZnQtMDciLAogICAgICAgICAgICAgICAgICAgICJpZCIgOiAiY3VzdG9tZXJEZWxldGVkRXZlbnREYXRhIiwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbnMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICIxLjAiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzY2hlbWF2ZXJzaW9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpZCI6ICIxLjAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInNjaGVtYSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY3VzdG9tZXJJZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBjdXN0b21lciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIG9mIHRoZSBjdXN0b21lciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiY3VzdG9tZXJVcGRhdGVkRXZlbnREYXRhIjogewogICAgICAgICAgICAgICAgICAgICJmb3JtYXQiIDogIkpTT05TY2hlbWEvZHJhZnQtMDciLAogICAgICAgICAgICAgICAgICAgICJpZCIgOiAiY3VzdG9tZXJVcGRhdGVkRXZlbnREYXRhIiwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbnMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICIxLjAiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzY2hlbWF2ZXJzaW9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpZCI6ICIxLjAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInNjaGVtYSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY3VzdG9tZXJJZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBjdXN0b21lciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIG9mIHRoZSBjdXN0b21lciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImFkZHJlc3MiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBhZGRyZXNzIG9mIHRoZSBjdXN0b21lciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3RyZWV0IjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHN0cmVldCBvZiB0aGUgYWRkcmVzcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjaXR5IjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGNpdHkgb2YgdGhlIGFkZHJlc3MiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3RhdGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc3RhdGUgb2YgdGhlIGFkZHJlc3MiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiemlwIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHppcCBjb2RlIG9mIHRoZSBhZGRyZXNzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cmVldCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNpdHkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInppcCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInBob25lIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcGhvbmUgbnVtYmVyIG9mIHRoZSBjdXN0b21lciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImVtYWlsIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgZW1haWwgYWRkcmVzcyBvZiB0aGUgY3VzdG9tZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ3ZWJzaXRlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgd2Vic2l0ZSBvZiB0aGUgY3VzdG9tZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImN1c3RvbWVySWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwaG9uZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJlbWFpbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ3ZWJzaXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo="
            }
          },
          "versionscount": 1
        },
        "doc-store-data.json": {
          "sampleid": "doc-store-data.json",
          "self": "#/specs/core-v1/samples/doc-store-data.json",
          "xid": "/specs/core-v1/samples/doc-store-data.json",
          "metaurl": "#/specs/core-v1/samples/doc-store-data.json/meta",
          "meta": {
            "sampleid": "doc-store-data.json",
            "self": "#/specs/core-v1/samples/doc-store-data.json/meta",
            "xid": "/specs/core-v1/samples/doc-store-data.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:08.754931148Z",
            "modifiedat": "2025-04-22T02:33:08.754931148Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/core-v1/samples/doc-store-data.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/core-v1/samples/doc-store-data.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "doc-store-data.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/core-v1/samples/doc-store-data.json/versions/v1.0-rc1",
              "xid": "/specs/core-v1/samples/doc-store-data.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:08.754931148Z",
              "modifiedat": "2025-04-22T02:33:08.754931148Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICJuYW1lIjogIkRvY3VtZW50IFN0b3JlIFNhbXBsZSIsCiAgImRpcnMiOiB7CiAgICAiZm9ybXMiOiB7CiAgICAgICJmaWxlcyI6IHsKICAgICAgICAiMTA0MCI6IHsKICAgICAgICAgICJ2ZXJzaW9uaWQiOiAidjAiLAogICAgICAgICAgImNvbnRlbnR0eXBlIjogInRleHQvcGxhaW4iLAogICAgICAgICAgImZpbGUiOiAiVGhpcyBpcyBmb3JtIDEwNDAiCiAgICAgICAgfSwKICAgICAgICAiMTA5MCI6IHsKICAgICAgICAgICJ2ZXJzaW9ucyI6IHsKICAgICAgICAgICAgInYxIjogewogICAgICAgICAgICAgICJjb250ZW50dHlwZSI6ICJ0ZXh0L3BsYWluIiwKICAgICAgICAgICAgICAiZmlsZSI6ICJUaGlzIGlzIGZvcm0gMTA5MCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInYyIjogewogICAgICAgICAgICAgICAiY29udGVudHR5cGUiOiAidGV4dC9wbGFpbiIsCiAgICAgICAgICAgICAgImZpbGUiOiAiVGhpcyBpcyBmb3JtIDEwOTAgLSBzZWUgbWUgc2hpbmUhIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgInByb3Bvc2FscyI6IHsKICAgICAgImZpbGVzIjogewogICAgICAgICJuZXctaG9tZS1Kb25lcyI6IHsKICAgICAgICAgICJjb250ZW50dHlwZSI6ICJ0ZXh0L3BsYWluIiwKICAgICAgICAgICJmaWxlYmFzZTY0IjogIlNHOXRaU0J3YkdGdWN5Qm1iM0lnZEdobElFcHZibVZ6SndvPSIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K"
            }
          },
          "versionscount": 1
        },
        "doc-store-model.json": {
          "sampleid": "doc-store-model.json",
          "self": "#/specs/core-v1/samples/doc-store-model.json",
          "xid": "/specs/core-v1/samples/doc-store-model.json",
          "metaurl": "#/specs/core-v1/samples/doc-store-model.json/meta",
          "meta": {
            "sampleid": "doc-store-model.json",
            "self": "#/specs/core-v1/samples/doc-store-model.json/meta",
            "xid": "/specs/core-v1/samples/doc-store-model.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:08.840700618Z",
            "modifiedat": "2025-04-22T02:33:08.840700618Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/core-v1/samples/doc-store-model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/core-v1/samples/doc-store-model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "doc-store-model.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/core-v1/samples/doc-store-model.json/versions/v1.0-rc1",
              "xid": "/specs/core-v1/samples/doc-store-model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:08.840700618Z",
              "modifiedat": "2025-04-22T02:33:08.840700618Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICJncm91cHMiOiB7CiAgICAiZGlycyI6IHsKICAgICAgInNpbmd1bGFyIjogImRpciIsCgogICAgICAicmVzb3VyY2VzIjogewogICAgICAgICJmaWxlcyI6IHsKICAgICAgICAgICJzaW5ndWxhciI6ICJmaWxlIgogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQo="
            }
          },
          "versionscount": 1
        },
        "formatted-doc-store-data.json": {
          "sampleid": "formatted-doc-store-data.json",
          "self": "#/specs/core-v1/samples/formatted-doc-store-data.json",
          "xid": "/specs/core-v1/samples/formatted-doc-store-data.json",
          "metaurl": "#/specs/core-v1/samples/formatted-doc-store-data.json/meta",
          "meta": {
            "sampleid": "formatted-doc-store-data.json",
            "self": "#/specs/core-v1/samples/formatted-doc-store-data.json/meta",
            "xid": "/specs/core-v1/samples/formatted-doc-store-data.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:08.924944628Z",
            "modifiedat": "2025-04-22T02:33:08.924944628Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/core-v1/samples/formatted-doc-store-data.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/core-v1/samples/formatted-doc-store-data.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "formatted-doc-store-data.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/core-v1/samples/formatted-doc-store-data.json/versions/v1.0-rc1",
              "xid": "/specs/core-v1/samples/formatted-doc-store-data.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:08.924944628Z",
              "modifiedat": "2025-04-22T02:33:08.924944628Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICJuYW1lIjogIkRvY3VtZW50IFN0b3JlIFNhbXBsZSIsCiAgImRvY3MiOiB7CiAgICAibmV3Q29udHJhY3QiOiB7CiAgICAgICJmb3JtYXRzIjogewogICAgICAgICJwZGYiOiB7CiAgICAgICAgICAiY29udGVudHR5cGUiOiAiYXBwbGljYXRpb24vcGRmIiwKICAgICAgICAgICJmb3JtYXQiOiAiVGhpcyBpcyBmb3JtIDEwNDAgaW4gcGRmIC0gbm90IHJlYWxseSBwZGYgdGhvdWdoIgogICAgICAgIH0sCiAgICAgICAgIm1zLXdvcmQiOiB7CiAgICAgICAgICAidmVyc2lvbnMiOiB7CiAgICAgICAgICAgICJ2MSI6IHsKICAgICAgICAgICAgICAiY29udGVudHR5cGUiOiAiYXBwbGljYXRpb24vbXMtd29yZCIsCiAgICAgICAgICAgICAgImZvcm1hdGJhc2U2NCI6ICJZVzRnYjJ4a0lHMXpMWGR2Y21RZ1pHOWpDZz09IgogICAgICAgICAgICB9LAogICAgICAgICAgICAidjIiOiB7CiAgICAgICAgICAgICAgImNvbnRlbnR0eXBlIjogImFwcGxpY2F0aW9uL21zLXdvcmQiLAogICAgICAgICAgICAgICJmb3JtYXRiYXNlNjQiOiAiYzI5dFpTQnRjeTEzYjNKa0lHUnZZd289IgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgImFtZW5kQ29udHJhY3QiOiB7CiAgICAgICJmb3JtYXRzIjogewogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgICAiY29udGVudHR5cGUiOiAidGV4dC9wbGFpbiIsCiAgICAgICAgICAgICJmb3JtYXQiOiAiUGxlYXNlIGFtZW5kIEpvZSdzIGNvbnRyYWN0IHN1Y2ggdGhhdC4uLiIKICAgICAgICB9LAogICAgICAgICJodG1sIjogewogICAgICAgICAgICAiY29udGVudHR5cGUiOiAidGV4dC9odG1sIiwKICAgICAgICAgICAgImZvcm1hdCI6ICI8aHRtbD48Ym9keT5QbGVhc2UgYW1lbmQgSm9lJ3MgY29udHJhY3Qgc3VjaCB0aGF0Li4uPC9ib2R5PjwvaHRtbD4iCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Cg=="
            }
          },
          "versionscount": 1
        },
        "formatted-doc-store-model.json": {
          "sampleid": "formatted-doc-store-model.json",
          "self": "#/specs/core-v1/samples/formatted-doc-store-model.json",
          "xid": "/specs/core-v1/samples/formatted-doc-store-model.json",
          "metaurl": "#/specs/core-v1/samples/formatted-doc-store-model.json/meta",
          "meta": {
            "sampleid": "formatted-doc-store-model.json",
            "self": "#/specs/core-v1/samples/formatted-doc-store-model.json/meta",
            "xid": "/specs/core-v1/samples/formatted-doc-store-model.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:09.015508671Z",
            "modifiedat": "2025-04-22T02:33:09.015508671Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/core-v1/samples/formatted-doc-store-model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/core-v1/samples/formatted-doc-store-model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "sampleid": "formatted-doc-store-model.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/core-v1/samples/formatted-doc-store-model.json/versions/v1.0-rc1",
              "xid": "/specs/core-v1/samples/formatted-doc-store-model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:09.015508671Z",
              "modifiedat": "2025-04-22T02:33:09.015508671Z",
              "ancestor": "v1.0-rc1",
              "samplebase64": "ewogICJncm91cHMiOiB7CiAgICAiZG9jcyI6IHsKICAgICAgInNpbmd1bGFyIjogImRvYyIsCgogICAgICAicmVzb3VyY2VzIjogewogICAgICAgICJmb3JtYXRzIjogewogICAgICAgICAgInNpbmd1bGFyIjogImZvcm1hdCIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K"
            }
          },
          "versionscount": 1
        }
      },
      "samplescount": 5,
      "schemasurl": "#/specs/core-v1/schemas",
      "schemas": {},
      "schemascount": 0
    },
    "endpoint-v1": {
      "specid": "endpoint-v1",
      "self": "#/specs/endpoint-v1",
      "xid": "/specs/endpoint-v1",
      "epoch": 4,
      "createdat": "2025-04-22T02:33:09.196026601Z",
      "modifiedat": "2025-04-22T02:33:09.489270946Z",
      "docsurl": "#/specs/endpoint-v1/docs",
      "docs": {
        "model.json": {
          "docid": "model.json",
          "self": "#/specs/endpoint-v1/docs/model.json",
          "xid": "/specs/endpoint-v1/docs/model.json",
          "metaurl": "#/specs/endpoint-v1/docs/model.json/meta",
          "meta": {
            "docid": "model.json",
            "self": "#/specs/endpoint-v1/docs/model.json/meta",
            "xid": "/specs/endpoint-v1/docs/model.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:09.196026601Z",
            "modifiedat": "2025-04-22T02:33:09.196026601Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/endpoint-v1/docs/model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/endpoint-v1/docs/model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "model.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/endpoint-v1/docs/model.json/versions/v1.0-rc1",
              "xid": "/specs/endpoint-v1/docs/model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:09.196026601Z",
              "modifiedat": "2025-04-22T02:33:09.196026601Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "spec.md": {
          "docid": "spec.md",
          "self": "#/specs/endpoint-v1/docs/spec.md",
          "xid": "/specs/endpoint-v1/docs/spec.md",
          "metaurl": "#/specs/endpoint-v1/docs/spec.md/meta",
          "meta": {
            "docid": "spec.md",
            "self": "#/specs/endpoint-v1/docs/spec.md/meta",
            "xid": "/specs/endpoint-v1/docs/spec.md/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:09.29556851Z",
            "modifiedat": "2025-04-22T02:33:09.29556851Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/endpoint-v1/docs/spec.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/endpoint-v1/docs/spec.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "spec.md",
              "versionid": "v1.0-rc1",
              "self": "#/specs/endpoint-v1/docs/spec.md/versions/v1.0-rc1",
              "xid": "/specs/endpoint-v1/docs/spec.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:09.29556851Z",
              "modifiedat": "2025-04-22T02:33:09.29556851Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "docscount": 2,
      "samplesurl": "#/specs/endpoint-v1/samples",
      "samples": {},
      "samplescount": 0,
      "schemasurl": "#/specs/endpoint-v1/schemas",
      "schemas": {
        "document-schema.avsc": {
          "schemaid": "document-schema.avsc",
          "self": "#/specs/endpoint-v1/schemas/document-schema.avsc",
          "xid": "/specs/endpoint-v1/schemas/document-schema.avsc",
          "metaurl": "#/specs/endpoint-v1/schemas/document-schema.avsc/meta",
          "meta": {
            "schemaid": "document-schema.avsc",
            "self": "#/specs/endpoint-v1/schemas/document-schema.avsc/meta",
            "xid": "/specs/endpoint-v1/schemas/document-schema.avsc/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:09.392412307Z",
            "modifiedat": "2025-04-22T02:33:09.392412307Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/endpoint-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/endpoint-v1/schemas/document-schema.avsc/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.avsc",
              "versionid": "v1.0-rc1",
              "self": "#/specs/endpoint-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "xid": "/specs/endpoint-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:09.392412307Z",
              "modifiedat": "2025-04-22T02:33:09.392412307Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "document-schema.json": {
          "schemaid": "document-schema.json",
          "self": "#/specs/endpoint-v1/schemas/document-schema.json",
          "xid": "/specs/endpoint-v1/schemas/document-schema.json",
          "metaurl": "#/specs/endpoint-v1/schemas/document-schema.json/meta",
          "meta": {
            "schemaid": "document-schema.json",
            "self": "#/specs/endpoint-v1/schemas/document-schema.json/meta",
            "xid": "/specs/endpoint-v1/schemas/document-schema.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:09.489270946Z",
            "modifiedat": "2025-04-22T02:33:09.489270946Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/endpoint-v1/schemas/document-schema.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/endpoint-v1/schemas/document-schema.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/endpoint-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "xid": "/specs/endpoint-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:09.489270946Z",
              "modifiedat": "2025-04-22T02:33:09.489270946Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": "ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwOi8veHJlZ2lzdHJ5LmlvL3NjaGVtYS9lbmRwb2ludHMiLAogICJwcm9wZXJ0aWVzIjogewogICAgImVuZHBvaW50cyI6IHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogewogICAgICAgICIkcmVmIjogIiMvZGVmaW5pdGlvbnMvZW5kcG9pbnQiCiAgICAgIH0KICAgIH0KICB9LAogICJkZWZpbml0aW9ucyI6IHsKICAgICJtZXNzYWdlIjogewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAibWVzc2FnZWlkIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJJRCBvZiB0aGUgbWVzc2FnZSBvYmplY3QiCiAgICAgICAgfSwKICAgICAgICAibmFtZSI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTmFtZSBvZiB0aGUgb2JqZWN0IgogICAgICAgIH0sCiAgICAgICAgImVwb2NoIjogewogICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRXBvY2ggdGltZSBvZiB0aGUgb2JqZWN0IGNyZWF0aW9uIgogICAgICAgIH0sCiAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImZvcm1hdCI6ICJ1cmkiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlVSTCBvZiB0aGUgb2JqZWN0IgogICAgICAgIH0sCiAgICAgICAgInhpZCI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZm9ybWF0IjogInhpZCIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiUmVsYXRpdmUgVVJMIG9mIHRoZSBvYmplY3QiCiAgICAgICAgfSwKICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkRlc2NyaXB0aW9uIG9mIHRoZSBvYmplY3QiCiAgICAgICAgfSwKICAgICAgICAiZG9jdW1lbnRhdGlvbiI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZm9ybWF0IjogInVyaSIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVVJJIG9mIHRoZSBkb2N1bWVudGF0aW9uIG9mIHRoZSBvYmplY3QiCiAgICAgICAgfSwKICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJMYWJlbHMgZm9yIHRoZSBvYmplY3QiCiAgICAgICAgfSwKICAgICAgICAiY3JlYXRlZGF0IjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJmb3JtYXQiOiAiZGF0ZS10aW1lIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaW1lIG9mIHRoZSBvYmplY3QgY3JlYXRpb24iCiAgICAgICAgfSwKICAgICAgICAibW9kaWZpZWRhdCI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZm9ybWF0IjogImRhdGUtdGltZSIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGltZSBvZiB0aGUgb2JqZWN0IG1vZGlmaWNhdGlvbiIKICAgICAgICB9LAogICAgICAgICJiYXNlbWVzc2FnZXVybCI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZm9ybWF0IjogInVyaSIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiUmVmZXJlbmNlIHRvIGEgYmFzZSBkZWZpbml0aW9uIGZvciB0aGlzIGRlZmluaXRpb24sIGVpdGhlciB2aWEgYSAocmVsYXRpdmUpIFVSTCBvciBhIGZyYWdtZW50IGlkZW50aWZpZXIuIFRoZSBiYXNlIGRlZmluaXRpb24gaXMgb3ZlcnJpZGRlbiBieSB0aGlzIGRlZmluaXRpb24uIElmIG5vdCBwcmVzZW50LCB0aGlzIGRlZmluaXRpb24gZG9lcyBub3Qgb3ZlcnJpZGUgYW55IGJhc2UgZGVmaW5pdGlvbiIKICAgICAgICB9LAogICAgICAgICJkYXRhc2NoZW1hZm9ybWF0IjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc2NoZW1hIGZvcm1hdCBhcHBsaWNhYmxlIHRvIHRoZSBtZXNzYWdlIHBheWxvYWQsIGVxdWl2YWxlbnQgdG8gdGhlICdmb3JtYXQnIGF0dHJpYnV0ZSBvZiB0aGUgc2NoZW1hIHJlZ2lzdHJ5IgogICAgICAgIH0sCiAgICAgICAgImRhdGFzY2hlbWEiOiB7CiAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBpbmxpbmUgc2NoZW1hIGZvciB0aGUgbWVzc2FnZSBwYXlsb2FkLCBlcXVpdmFsZW50IHRvIHRoZSAnc2NoZW1hJyBhdHRyaWJ1dGUgb2YgdGhlIHNjaGVtYSByZWdpc3RyeSIKICAgICAgICB9LAogICAgICAgICJkYXRhc2NoZW1hdXJpIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJmb3JtYXQiOiAidXJpIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgVVJJIG9mIHRoZSBzY2hlbWEgZm9yIHRoZSBtZXNzYWdlIHBheWxvYWQsIGVxdWl2YWxlbnQgdG8gdGhlICdzY2hlbWF1cmknIGF0dHJpYnV0ZSBvZiB0aGUgc2NoZW1hIHJlZ2lzdHJ5IgogICAgICAgIH0sCiAgICAgICAgImRhdGFjb250ZW50dHlwZSI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGNvbnRlbnQgdHlwZSBmb3IgdGhlIG1lc3NhZ2UgcGF5bG9hZCIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJhbGxPZiI6IFsKICAgICAgICB7CiAgICAgICAgICAib25lT2YiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICJlbnZlbG9wZSI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1lc3NhZ2UgZW52ZWxvcGUgZm9ybWF0IGlkZW50aWZpZXIuIFRoaXMgYXR0cmlidXRlIE1VU1QgYmUgdGhlIHNhbWUgYXMgdGhlICdlbnZlbG9wZScgYXR0cmlidXRlIG9mIHRoZSBkZWZpbml0aW9uIGdyb3VwLCBidXQgaXMgbm90IGF1dG9tYXRpY2FsbHkgaW5oZXJpdGVkIGJlY2F1c2UgZGVmaW5pdGlvbnMgbWF5IGJlIGNyb3NzLXJlZmVyZW5jZWQgYWNyb3NzIGdyb3Vwcy4gVGhlIHByZWRlZmluZWQgZW52ZWxvcGUgZm9ybWF0IGlzICdDbG91ZEV2ZW50cy8xLjAnIiwKICAgICAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAgICAgIkNsb3VkRXZlbnRzLzEuMCIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJlbnZlbG9wZW1ldGFkYXRhIjogewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQ2xvdWRFdmVudHMgYXR0cmlidXRlIGRlY2xhcmF0aW9ucywgYWRkaW5nIGNvbnN0cmFpbnRzIHRvIHRoZSBDbG91ZEV2ZW50cyBlbnZlbG9wZSBub3QgeWV0IGNvdmVyZWQgYnkgdGhlIENsb3VkRXZlbnRzIHNwZWMgaHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkZXZlbnRzL3NwZWMvYmxvYi9tYWluL2Nsb3VkZXZlbnRzL3NwZWMubWQiLAogICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAic3BlY3ZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkNsb3VkRXZlbnRzIHNwZWN2ZXJzaW9uIGh0dHBzOi8vZ2l0aHViLmNvbS9jbG91ZGV2ZW50cy9zcGVjL2Jsb2IvbWFpbi9jbG91ZGV2ZW50cy9zcGVjLm1kI3NwZWN2ZXJzaW9uIiwKICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJDbG91ZEV2ZW50cyBzcGVjIHZlcnNpb24gKGZpeGVkIHRvICcxLjAnKSIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJDbG91ZEV2ZW50cyBzcGVjdmVyc2lvbiBpcyBhbHdheXMgcmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCIKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQ2xvdWRFdmVudHMgaWQgaHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkZXZlbnRzL3NwZWMvYmxvYi9tYWluL2Nsb3VkZXZlbnRzL3NwZWMubWQjaWQiLAogICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkNsb3VkRXZlbnRzIGlkIHZhbHVlIGNvbnN0cmFpbnQiCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQ2xvdWRFdmVudHMgaWQgaXMgYWx3YXlzIHJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCIKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJDbG91ZEV2ZW50cyB0eXBlIGh0dHBzOi8vZ2l0aHViLmNvbS9jbG91ZGV2ZW50cy9zcGVjL2Jsb2IvbWFpbi9jbG91ZGV2ZW50cy9zcGVjLm1kI3R5cGUiLAogICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkNsb3VkRXZlbnRzIHR5cGUgdmFsdWUgY29uc3RyYWludCIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJDbG91ZEV2ZW50cyB0eXBlIGlzIGFsd2F5cyByZXF1aXJlZCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic291cmNlIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJDbG91ZEV2ZW50cyBzb3VyY2UgaHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkZXZlbnRzL3NwZWMvYmxvYi9tYWluL2Nsb3VkZXZlbnRzL3NwZWMubWQjc291cmNlLTEiLAogICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkNsb3VkRXZlbnRzIHNvdXJjZSB2YWx1ZSBjb25zdHJhaW50IgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkNsb3VkRXZlbnRzIHNvdXJjZSBpcyBhbHdheXMgcmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIiwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInN1YmplY3QiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkNsb3VkRXZlbnRzIHN1YmplY3QgaHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkZXZlbnRzL3NwZWMvYmxvYi9tYWluL2Nsb3VkZXZlbnRzL3NwZWMubWQjc3ViamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQ2xvdWRFdmVudHMgc3ViamVjdCB2YWx1ZSBjb25zdHJhaW50IgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkNsb3VkRXZlbnRzIHN1YmplY3QgcmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIiwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInRpbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkNsb3VkRXZlbnRzIHRpbWUgaHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkZXZlbnRzL3NwZWMvYmxvYi9tYWluL2Nsb3VkZXZlbnRzL3NwZWMubWQjdGltZSIsCiAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHRpbWVzdGFtcCB2YWx1ZSBjb25zdHJhaW50LiIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIiwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImRhdGFzY2hlbWEiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkNsb3VkRXZlbnRzIGRhdGFzY2hlbWEgaHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkZXZlbnRzL3NwZWMvYmxvYi9tYWluL2Nsb3VkZXZlbnRzL3NwZWMubWQjZGF0YXNjaGVtYS4gVGhlIFVSSSBvZiB0aGUgc2NoZW1hIGZvciB0aGUgZXZlbnQgcGF5bG9hZC4gQWJzZW5jZSBpbmRpY2F0ZXMgbm8ga25vd24gc2NoZW1hLiBUaGlzIGF0dHJpYnV0ZSBjb3JyZXNwb25kcyB0byB0aGUgJ2RhdGFzY2hlbWF1cmknIGF0dHJpYnV0ZSBpbiB0aGUgbWVzc2FnZSBkZWZpbml0aW9uIGFuZCBNVVNUIGJlIHRoZSBzYW1lIGFzIHRoZSAnZGF0YXNjaGVtYXVyaScgYXR0cmlidXRlIG9mIHRoZSBkZWZpbml0aW9uIGlmIHByZXNlbnQuIiwKICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAidXJpLXRlbXBsYXRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIFVSSSB2YWx1ZSBjb25zdHJhaW50IgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZGF0YWNvbnRlbnR0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJDbG91ZEV2ZW50cyBkYXRhY29udGVudHR5cGUgaHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkZXZlbnRzL3NwZWMvYmxvYi9tYWluL2Nsb3VkZXZlbnRzL3NwZWMubWQjZGF0YWNvbnRlbnR0eXBlLiIsCiAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGNvbnRlbnQgdHlwZSB2YWx1ZSBjb25zdHJhaW50IgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQ2xvdWRFdmVudCBleHRlbnNpb24gcHJvcGVydHkiLAogICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdmFsdWUgdHlwZSIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdmFsdWUgY29uc3RyYWludCIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiV2hldGhlciB0aGUgZXh0ZW5zaW9uIGlzIHJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICAgInR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJlbnZlbG9wZW9wdGlvbnMiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnZlbG9wZSBtZXRhZGF0YSBjb25zdHJhaW50cyIsCiAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICJtb2RlIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJXaGV0aGVyIENsb3VkRXZlbnRzICdiaW5hcnknIG9yICdzdHJ1Y3R1cmVkJyBtb2RlIHdpbGwgYmUgdXNlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBtZWRpYSB0eXBlIGZvcm1hdCB1c2VkIHRvIHNlcmlhbGl6ZSB0aGUgQ2xvdWRFdmVudCBpbiB0aGUgY2FzZSBvZiBtb2RlPXN0cnVjdHVyZWQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAiZW52ZWxvcGUiCiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAib25lT2YiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICJwcm90b2NvbCI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlByb3RvY29sIGlkZW50aWZpZXIuIFRoaXMgYXR0cmlidXRlIE1VU1QgYmUgdGhlIHNhbWUgYXMgdGhlICdwcm90b2NvbCcgYXR0cmlidXRlIG9mIHRoZSBkZWZpbml0aW9uIGdyb3VwLCBidXQgaXMgbm90IGF1dG9tYXRpY2FsbHkgaW5oZXJpdGVkIGJlY2F1c2UgZGVmaW5pdGlvbnMgbWF5IGJlIGNyb3NzLXJlZmVyZW5jZWQgYWNyb3NzIGdyb3VwcyIsCiAgICAgICAgICAgICAgICAgICJlbnVtIjogWwogICAgICAgICAgICAgICAgICAgICJBTVFQLzEuMCIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJwcm90b2NvbG9wdGlvbnMiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIG1lc3NhZ2UgbWV0YWRhdGEgY29uc3RyYWludHMiLAogICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBwcm9wZXJ0aWVzIHNlY3Rpb24gaHR0cHM6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL2FtcXAvY29yZS92MS4wL29zL2FtcXAtY29yZS1tZXNzYWdpbmctdjEuMC1vcy5odG1sI3R5cGUtcHJvcGVydGllcyIsCiAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgIm1lc3NhZ2UtaWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBwcm9wZXJ0aWVzLm1lc3NhZ2UtaWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIHByb3BlcnRpZXMubWVzc2FnZS1pZCB0eXBlIGNvbnN0cmFpbnQuIFRoZSB0eXBlIHZhbHVlcyByZWZlciB0byB0aGUgQU1RUCB0eXBlIG1vZGVsYCBhbmQgdGhlIGRlZmluZWQgbWVzc2FnZS1pZCB0eXBlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIHByb3BlcnRpZXMubWVzc2FnZS1pZCB2YWx1ZSBjb25zdHJhaW50LiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgcHJvcGVydGllcy5tZXNzYWdlLWlkIHJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgInVzZXItaWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBwcm9wZXJ0aWVzLnVzZXItaWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIHByb3BlcnRpZXMudXNlci1pZCB2YWx1ZSB0eXBlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgcHJvcGVydGllcy51c2VyLWlkIHZhbHVlIGNvbnN0cmFpbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgcHJvcGVydGllcy51c2VyLWlkIHJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgInRvIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgcHJvcGVydGllcy50byIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgcHJvcGVydGllcy50byB2YWx1ZSB0eXBlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgcHJvcGVydGllcy50byB2YWx1ZSBjb25zdHJhaW50IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIHByb3BlcnRpZXMudG8gcmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAic3ViamVjdCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIHByb3BlcnRpZXMuc3ViamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgcHJvcGVydGllcy5zdWJqZWN0IHZhbHVlIHR5cGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBwcm9wZXJ0aWVzLnN1YmplY3QgdmFsdWUgY29uc3RyYWludCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBwcm9wZXJ0aWVzLnN1YmplY3QgcmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAicmVwbHktdG8iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBwcm9wZXJ0aWVzLnJlcGx5LXRvIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBwcm9wZXJ0aWVzLnJlcGx5LXRvIHZhbHVlIHR5cGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBwcm9wZXJ0aWVzLnJlcGx5LXRvIHZhbHVlIGNvbnN0cmFpbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgcHJvcGVydGllcy5yZXBseS10byByZXF1aXJlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJjb3JyZWxhdGlvbi1pZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIHByb3BlcnRpZXMuY29ycmVsYXRpb24taWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIGNvcnJlbGF0aW9uLWlkIHZhbHVlIHR5cGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBjb3JyZWxhdGlvbi1pZCB2YWx1ZSBjb25zdHJhaW50IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIGNvcnJlbGF0aW9uLWlkIHJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQtdHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIHByb3BlcnRpZXMuY29udGVudC10eXBlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBwcm9wZXJ0aWVzLmNvbnRlbnQtdHlwZSB2YWx1ZSB0eXBlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgcHJvcGVydGllcy5jb250ZW50LXR5cGUgdmFsdWUgY29uc3RyYWludCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBwcm9wZXJ0aWVzLmNvbnRlbnQtdHlwZSByZXF1aXJlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50LWVuY29kaW5nIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgcHJvcGVydGllcy5jb250ZW50LWVuY29kaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBwcm9wZXJ0aWVzLmNvbnRlbnQtZW5jb2RpbmcgdmFsdWUgdHlwZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIHByb3BlcnRpZXMuY29udGVudC1lbmNvZGluZyB2YWx1ZSBjb25zdHJhaW50IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIHByb3BlcnRpZXMuY29udGVudC1lbmNvZGluZyByZXF1aXJlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJhYnNvbHV0ZS1leHBpcnktdGltZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIHByb3BlcnRpZXMuYWJzb2x1dGUtZXhwaXJ5LXRpbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIHByb3BlcnRpZXMuYWJzb2x1dGUtZXhwaXJ5LXRpbWUgdmFsdWUgdHlwZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIHByb3BlcnRpZXMuYWJzb2x1dGUtZXhwaXJ5LXRpbWUgdmFsdWUgY29uc3RyYWludCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBwcm9wZXJ0aWVzLmFic29sdXRlLWV4cGlyeS10aW1lIHJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgImNyZWF0aW9uLXRpbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBwcm9wZXJ0aWVzLmNyZWF0aW9uLXRpbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIHByb3BlcnRpZXMuY3JlYXRpb24tdGltZSB2YWx1ZSB0eXBlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgcHJvcGVydGllcy5jcmVhdGlvbi10aW1lIHZhbHVlIGNvbnN0cmFpbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgcHJvcGVydGllcy5jcmVhdGlvbi10aW1lIHJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgImdyb3VwLWlkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgcHJvcGVydGllcy5ncm91cC1pZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgcHJvcGVydGllcy5ncm91cC1pZCB2YWx1ZSB0eXBlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgcHJvcGVydGllcy5ncm91cC1pZCB2YWx1ZSBjb25zdHJhaW50IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIHByb3BlcnRpZXMuZ3JvdXAtaWQgcmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAiZ3JvdXAtc2VxdWVuY2UiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBncm91cC1zZXF1ZW5jZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgZ3JvdXAtc2VxdWVuY2UgdmFsdWUgdHlwZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIGdyb3VwLXNlcXVlbmNlIHZhbHVlIGNvbnN0cmFpbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgZ3JvdXAtc2VxdWVuY2UgcmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAicmVwbHktdG8tZ3JvdXAtaWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBwcm9wZXJ0aWVzLnJlcGx5LXRvLWdyb3VwLWlkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBwcm9wZXJ0aWVzLnJlcGx5LXRvLWdyb3VwLWlkIHZhbHVlIHR5cGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBwcm9wZXJ0aWVzLnJlcGx5LXRvLWdyb3VwLWlkIHZhbHVlIGNvbnN0cmFpbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgcHJvcGVydGllcy5yZXBseS10by1ncm91cC1pZCByZXF1aXJlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJhcHBsaWNhdGlvbi1wcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIGFwcGxpY2F0aW9uLXByb3BlcnRpZXMgc2VjdGlvbiBodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvYW1xcC9jb3JlL3YxLjAvb3MvYW1xcC1jb3JlLW1lc3NhZ2luZy12MS4wLW9zLmh0bWwjdHlwZS1hcHBsaWNhdGlvbi1wcm9wZXJ0aWVzIiwKICAgICAgICAgICAgICAgICAgICAgICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBhcHBsaWNhdGlvbiBwcm9wZXJ0eSB0eXBlIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBcHBsaWNhdGlvbiBwcm9wZXJ0eSB2YWx1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFwcGxpY2F0aW9uIHByb3BlcnR5IHJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJtZXNzYWdlLWFubm90YXRpb25zIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIG1lc3NhZ2UtYW5ub3RhdGlvbnMgc2VjdGlvbiBodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvYW1xcC9jb3JlL3YxLjAvb3MvYW1xcC1jb3JlLW1lc3NhZ2luZy12MS4wLW9zLmh0bWwjdHlwZS1tZXNzYWdlLWFubm90YXRpb25zIiwKICAgICAgICAgICAgICAgICAgICAgICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBtZXNzYWdlIGFubm90YXRpb24gdHlwZSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQW5ub3RhdGlvbiB2YWx1ZSBjb25zdHJhaW50IgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQW5ub3RhdGlvbiByZXF1aXJlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZGVsaXZlcnktYW5ub3RhdGlvbnMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgZGVsaXZlcnktYW5ub3RhdGlvbnMgc2VjdGlvbiBodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvYW1xcC9jb3JlL3YxLjAvb3MvYW1xcC1jb3JlLW1lc3NhZ2luZy12MS4wLW9zLmh0bWwjdHlwZS1kZWxpdmVyeS1hbm5vdGF0aW9ucyIsCiAgICAgICAgICAgICAgICAgICAgICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgYW5ub3RhdGlvbiB0eXBlIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBbm5vdGF0aW9uIHZhbHVlIGNvbnN0cmFpbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBbm5vdGF0aW9uIHJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJoZWFkZXIiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgaGVhZGVyIHNlY3Rpb24gaHR0cHM6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL2FtcXAvY29yZS92MS4wL29zL2FtcXAtY29yZS1tZXNzYWdpbmctdjEuMC1vcy5odG1sI3R5cGUtaGVhZGVyIiwKICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiZHVyYWJsZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBkdXJhYmxlIGZsYWciCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJwcmlvcml0eSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBwcmlvcml0eSIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgInR0bCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCB0aW1lLXRvLWxpdmUgKG1pbGxpc2Vjb25kcykiCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJmaXJzdC1hY3F1aXJlciI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBmaXJzdC1hY3F1aXJlciBmbGFnIgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAiZGVsaXZlcnktY291bnQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFNUVAgZGVsaXZlcnktY291bnQiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICJkdXJhYmxlIiwKICAgICAgICAgICAgICAgICAgICAgICAgInByaW9yaXR5IiwKICAgICAgICAgICAgICAgICAgICAgICAgImZpcnN0LWFjcXVpcmVyIiwKICAgICAgICAgICAgICAgICAgICAgICAgImRlbGl2ZXJ5LWNvdW50IgogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZvb3RlciI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBmb290ZXIgc2VjdGlvbiBodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvYW1xcC9jb3JlL3YxLjAvb3MvYW1xcC1jb3JlLW1lc3NhZ2luZy12MS4wLW9zLmh0bWwjdHlwZS1mb290ZXIiLAogICAgICAgICAgICAgICAgICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQU1RUCBmb290ZXIgdHlwZSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRm9vdGVyIHZhbHVlIGNvbnN0cmFpbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJGb290ZXIgcmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCIKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgInByb3RvY29sIgogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgInByb3RvY29sIjogewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiUHJvdG9jb2wgaWRlbnRpZmllci4gVGhpcyBhdHRyaWJ1dGUgTVVTVCBiZSB0aGUgc2FtZSBhcyB0aGUgJ3Byb3RvY29sJyBhdHRyaWJ1dGUgb2YgdGhlIGRlZmluaXRpb24gZ3JvdXAsIGJ1dCBpcyBub3QgYXV0b21hdGljYWxseSBpbmhlcml0ZWQgYmVjYXVzZSBkZWZpbml0aW9ucyBtYXkgYmUgY3Jvc3MtcmVmZXJlbmNlZCBhY3Jvc3MgZ3JvdXBzIiwKICAgICAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAgICAgIk1RVFQvMy4xLjEiCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAicHJvdG9jb2xvcHRpb25zIjogewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTVFUVCBtZXNzYWdlIG1ldGFkYXRhIGNvbnN0cmFpbnRzIiwKICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgInFvcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1RVFQgUW9TIGxldmVsIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInJldGFpbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1RVFQgcmV0YWluIGZsYWciCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidG9waWNfbmFtZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IjogInVyaS10ZW1wbGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTVFUVCB0b3BpYyBuYW1lIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgInByb3RvY29sIgogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgInByb3RvY29sIjogewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiUHJvdG9jb2wgaWRlbnRpZmllci4gVGhpcyBhdHRyaWJ1dGUgTVVTVCBiZSB0aGUgc2FtZSBhcyB0aGUgJ3Byb3RvY29sJyBhdHRyaWJ1dGUgb2YgdGhlIGRlZmluaXRpb24gZ3JvdXAsIGJ1dCBpcyBub3QgYXV0b21hdGljYWxseSBpbmhlcml0ZWQgYmVjYXVzZSBkZWZpbml0aW9ucyBtYXkgYmUgY3Jvc3MtcmVmZXJlbmNlZCBhY3Jvc3MgZ3JvdXBzIiwKICAgICAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAgICAgIk1RVFQvNS4wIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1RVFQgbWVzc2FnZSBtZXRhZGF0YSBjb25zdHJhaW50cyIsCiAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICJxb3MiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJNUVRUIFFvUyBsZXZlbCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJyZXRhaW4iOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJNUVRUIHJldGFpbiBmbGFnIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInRvcGljX25hbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJ1cmktdGVtcGxhdGUiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1RVFQgdG9waWMgbmFtZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJwYXlsb2FkX2Zvcm1hdF9pbmRpY2F0b3IiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJNUVRUIHBheWxvYWQgZm9ybWF0IGluZGljYXRvciIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJtZXNzYWdlX2V4cGlyeV9pbnRlcnZhbCI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1RVFQgbWVzc2FnZSBleHBpcnkgaW50ZXJ2YWwiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAicmVzcG9uc2VfdG9waWMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJ1cmktdGVtcGxhdGUiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1RVFQgcmVzcG9uc2UgdG9waWMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiY29ycmVsYXRpb25fZGF0YSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IjogInVyaS10ZW1wbGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTVFUVCBjb3JyZWxhdGlvbiBkYXRhIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnRfdHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IjogInVyaS10ZW1wbGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTVFUVCBjb250ZW50IHR5cGUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidXNlcl9wcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1RVFQgdXNlciBwcm9wZXJ0aWVzIiwKICAgICAgICAgICAgICAgICAgICAgICJpdGVtcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1RVFQgdXNlciBwcm9wZXJ0eSBuYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJNUVRUIHVzZXIgcHJvcGVydHkgdmFsdWUgY29uc3RyYWludCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgInByb3RvY29sIgogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgInByb3RvY29sIjogewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiUHJvdG9jb2wgaWRlbnRpZmllci4gVGhpcyBhdHRyaWJ1dGUgTVVTVCBiZSB0aGUgc2FtZSBhcyB0aGUgJ3Byb3RvY29sJyBhdHRyaWJ1dGUgb2YgdGhlIGRlZmluaXRpb24gZ3JvdXAsIGJ1dCBpcyBub3QgYXV0b21hdGljYWxseSBpbmhlcml0ZWQgYmVjYXVzZSBkZWZpbml0aW9ucyBtYXkgYmUgY3Jvc3MtcmVmZXJlbmNlZCBhY3Jvc3MgZ3JvdXBzIiwKICAgICAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAgICAgIktBRktBIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFwYWNoZSBLYWZrYSBtZXNzYWdlIG1ldGFkYXRhIGNvbnN0cmFpbnRzIiwKICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgInRvcGljIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAidXJpLXRlbXBsYXRlIiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgQXBhY2hlIEthZmthIHRvcGljIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInBhcnRpdGlvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBBcGFjaGUgS2Fma2EgcGFydGl0aW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImtleSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IjogInVyaS10ZW1wbGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIEFwYWNoZSBLYWZrYSBrZXkgYXMgYSBVVEYtOCB1cmkgdGVtcGxhdGUuIE11dHVhbGx5IGV4Y2x1c2l2ZSB3aXRoICdrZXlfYmFzZTY0JyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJrZXlfYmFzZTY0IjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJCaW5hcnkgQXBhY2hlIEthZmthIGtleSBhcyBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZy4gTXV0dWFsbHkgZXhjbHVzaXZlIHdpdGggJ2tleSciCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiaGVhZGVycyI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIEFwYWNoZSBLYWZrYSBoZWFkZXJzIiwKICAgICAgICAgICAgICAgICAgICAgICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkthZmthIGhlYWRlciBuYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJLYWZrYSBoZWFkZXIgdmFsdWUgY29uc3RyYWludCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkthZmthIGhlYWRlciByZXF1aXJlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAicHJvdG9jb2wiCiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAicHJvdG9jb2wiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJQcm90b2NvbCBpZGVudGlmaWVyLiBUaGlzIGF0dHJpYnV0ZSBNVVNUIGJlIHRoZSBzYW1lIGFzIHRoZSAncHJvdG9jb2wnIGF0dHJpYnV0ZSBvZiB0aGUgZGVmaW5pdGlvbiBncm91cCwgYnV0IGlzIG5vdCBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBiZWNhdXNlIGRlZmluaXRpb25zIG1heSBiZSBjcm9zcy1yZWZlcmVuY2VkIGFjcm9zcyBncm91cHMiLAogICAgICAgICAgICAgICAgICAiZW51bSI6IFsKICAgICAgICAgICAgICAgICAgICAiSFRUUCIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJwcm90b2NvbG9wdGlvbnMiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgSFRUUCBtZXNzYWdlIG1ldGFkYXRhIGNvbnN0cmFpbnRzIiwKICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgImhlYWRlcnMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIEhUVFAgaGVhZGVycyIsCiAgICAgICAgICAgICAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgSFRUUCBoZWFkZXIgbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIEhUVFAgaGVhZGVyIHZhbHVlIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIEhUVFAgaGVhZGVyIHJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJxdWVyeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgSFRUUCBxdWVyeSBwYXJhbWV0ZXJzIiwKICAgICAgICAgICAgICAgICAgICAgICJpdGVtcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBIVFRQIHF1ZXJ5IHBhcmFtZXRlciIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIEhUVFAgcXVlcnkgcGFyYW1ldGVyIHZhbHVlIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIEhUVFAgcXVlcnkgcGFyYW1ldGVyIHJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJwYXRoIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAidXJpLXRlbXBsYXRlIiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgSFRUUCBwYXRoIGFzIGEgdXJpIHRlbXBsYXRlIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgIm1ldGhvZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIEhUVFAgbWV0aG9kIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgInByb3RvY29sIgogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgInByb3RvY29sIjogewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiUHJvdG9jb2wgaWRlbnRpZmllci4gVGhpcyBhdHRyaWJ1dGUgTVVTVCBiZSB0aGUgc2FtZSBhcyB0aGUgJ3Byb3RvY29sJyBhdHRyaWJ1dGUgb2YgdGhlIGRlZmluaXRpb24gZ3JvdXAsIGJ1dCBpcyBub3QgYXV0b21hdGljYWxseSBpbmhlcml0ZWQgYmVjYXVzZSBkZWZpbml0aW9ucyBtYXkgYmUgY3Jvc3MtcmVmZXJlbmNlZCBhY3Jvc3MgZ3JvdXBzIiwKICAgICAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAgICAgIk5BVFMiCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAicHJvdG9jb2xvcHRpb25zIjogewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTkFUUyBtZXNzYWdlIG1ldGFkYXRhIGNvbnN0cmFpbnRzIiwKICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgInN1YmplY3QiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJ1cmktdGVtcGxhdGUiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBOQVRTIHN1YmplY3QiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAicmVwbHkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJ1cmktdGVtcGxhdGUiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBOQVRTIHJlcGx5IHN1YmplY3QiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiaGVhZGVycyI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgTkFUUyBoZWFkZXJzIiwKICAgICAgICAgICAgICAgICAgICAgICJpdGVtcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBOQVRTIGhlYWRlciBuYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgTkFUUyBoZWFkZXIgdmFsdWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgTkFUUyBoZWFkZXIgcmVxdWlyZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIgogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAicHJvdG9jb2wiCiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgImVuZHBvaW50IjogewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAiZW5kcG9pbnRpZCI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSUQgb2YgdGhlIGVuZHBvaW50IG9iamVjdCIKICAgICAgICB9LAogICAgICAgICJuYW1lIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJOYW1lIG9mIHRoZSBvYmplY3QiCiAgICAgICAgfSwKICAgICAgICAiZXBvY2giOiB7CiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJFcG9jaCB0aW1lIG9mIHRoZSBvYmplY3QgY3JlYXRpb24iCiAgICAgICAgfSwKICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZm9ybWF0IjogInVyaSIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVVJMIG9mIHRoZSBvYmplY3QiCiAgICAgICAgfSwKICAgICAgICAieGlkIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJmb3JtYXQiOiAieGlkIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJSZWxhdGl2ZSBVUkwgb2YgdGhlIG9iamVjdCIKICAgICAgICB9LAogICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRGVzY3JpcHRpb24gb2YgdGhlIG9iamVjdCIKICAgICAgICB9LAogICAgICAgICJkb2N1bWVudGF0aW9uIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJmb3JtYXQiOiAidXJpIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJVUkkgb2YgdGhlIGRvY3VtZW50YXRpb24gb2YgdGhlIG9iamVjdCIKICAgICAgICB9LAogICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkxhYmVscyBmb3IgdGhlIG9iamVjdCIKICAgICAgICB9LAogICAgICAgICJjcmVhdGVkYXQiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImZvcm1hdCI6ICJkYXRlLXRpbWUiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRpbWUgb2YgdGhlIG9iamVjdCBjcmVhdGlvbiIKICAgICAgICB9LAogICAgICAgICJtb2RpZmllZGF0IjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJmb3JtYXQiOiAiZGF0ZS10aW1lIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaW1lIG9mIHRoZSBvYmplY3QgbW9kaWZpY2F0aW9uIgogICAgICAgIH0sCiAgICAgICAgInVzYWdlIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJDbGllbnQncyBleHBlY3RlZCB1c2FnZSBvZiB0aGlzIGVuZHBvaW50IgogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWwiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogInRiZCIKICAgICAgICB9LAogICAgICAgICJkZXByZWNhdGVkIjogewogICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJ0YmQiLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICJlZmZlY3RpdmUiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAiZm9ybWF0IjogImRhdGUtdGltZSIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogInRiZCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInJlbW92YWwiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAiZm9ybWF0IjogImRhdGUtdGltZSIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogInRiZCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImFsdGVybmF0aXZlIjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgImZvcm1hdCI6ICJ1cmkiLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJ0YmQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb2NzIjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgImZvcm1hdCI6ICJ1cmkiLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJ0YmQiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJtZXNzYWdlZ3JvdXBzIjogewogICAgICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBtZXNzYWdlIGdyb3VwcyB0aGF0IGFyZSBzdXBwb3J0ZWQgYnkgdGhpcyBlbmRwb2ludCIsCiAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICJmb3JtYXQiOiAidXJpIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgIm1lc3NhZ2VzIjogewogICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IHsKICAgICAgICAgICAgIiRyZWYiOiAiIy9kZWZpbml0aW9ucy9tZXNzYWdlIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgImFsbE9mIjogWwogICAgICAgIHsKICAgICAgICAgICJvbmVPZiI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgImVudmVsb3BlIjogewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRW52ZWxvcGUgbWV0YWRhdGEgZm9ybWF0IGlkZW50aWZpZXIuIElmIHNldCwgYWxsIGRlZmluaXRpb25zIE1VU1QgdXNlIHRoaXMgZm9ybWF0IHZhbHVlIiwKICAgICAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAgICAgIkNsb3VkRXZlbnRzLzEuMCIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJlbnZlbG9wZW9wdGlvbnMiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJFbnZlbG9wZSBtZXRhZGF0YSBjb25zdHJhaW50cyIsCiAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICJtb2RlIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICJlbnZlbG9wZSIKICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJvbmVPZiI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgInByb3RvY29sIjogewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRW5kcG9pbnQgcHJvdG9jb2wgaWRlbnRpZmllci4gSWYgc2V0LCBhbGwgZGVmaW5pdGlvbnMgTVVTVCB1c2UgdGhpcyBwcm90b2NvbCB2YWx1ZSIsCiAgICAgICAgICAgICAgICAgICJlbnVtIjogWwogICAgICAgICAgICAgICAgICAgICJBTVFQLzEuMCIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJwcm90b2NvbG9wdGlvbnMiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJDb25maWd1cmF0aW9uIGluZm9ybWF0aW9uIGZvciB0aGlzIGVuZHBvaW50IiwKICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgImVuZHBvaW50cyI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbmV0d29yayBhZGRyZXNzZXMgdGhhdCBhcmUgZm9yIGNvbW11bmljYXRpb24gd2l0aCB0aGUgZW5kcG9pbnQuIFRoZSBlbmRwb2ludHMgYXJlIG9yZGVyZWQgYnkgcHJlZmVyZW5jZSwgd2l0aCB0aGUgZmlyc3QgZW5kcG9pbnQgYmVpbmcgdGhlIHByZWZlcnJlZCBlbmRwb2ludC4gU29tZSBwcm90b2NvbCBpbXBsZW1lbnRhdGlvbnMgbWlnaHQgbm90IHN1cHBvcnQgbXVsdGlwbGUgZW5kcG9pbnRzLCBpbiB3aGljaCBjYXNlIGFsbCBidXQgdGhlIGZpcnN0IGVuZHBvaW50IG1pZ2h0IGJlIGlnbm9yZWQuIFdoZXRoZXIgdGhlIFVSSSBqdXN0IGlkZW50aWZpZXMgYSBuZXR3b3JrIGhvc3Qgb3IgbGlua3MgZGlyZWN0bHkgdG8gYSByZXNvdXJjZSBtYW5hZ2VkIGJ5IHRoZSBuZXR3b3JrIGhvc3QgaXMgcHJvdG9jb2wgc3BlY2lmaWMiLAogICAgICAgICAgICAgICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidXJsIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAidXJpIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBTVFQIEFkZHJlc3NpbmcgVVJMIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImF1dGhvcml6YXRpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQXV0aG9yaXphdGlvbiBvcHRpb25zLiBUaGVzZSBhcmUgaGludHMgZm9yIHRoZSBhZGFwdGVyIGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBhdXRob3JpemF0aW9uIGVuZHBvaW50LiBUaGlzIGlzIG5vdCBhIGNyZWRlbnRpYWxzIGNvbmZpZ3VyYXRpb24iLAogICAgICAgICAgICAgICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGF1dGhlbnRpY2F0aW9uL2F1dGhvcml6YXRpb24gdHlwZS4gT0F1dGgyLCBQbGFpbiwgQVBJS2V5LCBhbmQgWDUwOUNlcnQgYXJlIHdlbGwtZGVmaW5lZCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJyZXNvdXJjZXVyaSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IjogInVyaSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHJlc291cmNlIHVyaSBmb3Igd2hpY2ggYXV0aG9yaXphdGlvbiBzaGFsbCBiZSBncmFudGVkIChpZiBhcHBsaWNhYmxlKSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJhdXRob3JpdHl1cmkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJ1cmkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBhdXRob3JpdHkgdXJpIHdoZXJlIGF1dGhvcml6YXRpb24gc2hhbGwgYmUgcmVxdWVzdGVkIChpZiBhcHBsaWNhYmxlKSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJncmFudHR5cGVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBncmFudCB0eXBlcyB0aGF0IGNhbiBiZSByZXF1ZXN0ZWQgKGlmIGFwcGxpY2FibGUpIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpdGVtcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImRlcGxveWVkIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSWYgYHRydWVgLCB0aGUgZW5kcG9pbnQgbWV0YWRhdGEgcmVwcmVzZW50cyBhIHB1YmxpYywgbGl2ZSBlbmRwb2ludCB0aGF0IGlzIGF2YWlsYWJsZSBmb3IgY29tbXVuaWNhdGlvbiBhbmQgYSBzdHJpY3QgdmFsaWRhdG9yIE1BWSB0ZXN0IHRoZSBsaXZlbmVzcyBvZiB0aGUgZW5kcG9pbnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibm9kZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIEFNUVAgbm9kZSBuYW1lLiBDb21tb25seSB0aGUgbmFtZSBvZiBhIHF1ZXVlIG9yIGEgdG9waWMuIENvcnJlc3BvbmRzIHRvIHRoZSAnYWRkcmVzcycgaW4gc291cmNlIG9yIHRhcmdldCBvZiB0aGUgYXR0YWNoIGZyYW1lLiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJkdXJhYmxlIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIEFNUVAgZHVyYWJsZSBmbGFnLiBXaGV0aGVyIHRoZSBub2RlIGlzIGR1cmFibGUgb3IgdHJhbnNpZW50IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxpbmstcHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQW4gb3B0aW9uYWwgbWFwIG9mIEFNUVAgbGluayBwcm9wZXJ0aWVzIHRvIHVzZSB3aXRoIHRoZSBlbmRwb2ludCIsCiAgICAgICAgICAgICAgICAgICAgICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJjb25uZWN0aW9uLXByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFuIG9wdGlvbmFsIG1hcCBvZiBBTVFQIGNvbm5lY3Rpb24gcHJvcGVydGllcyB0byB1c2Ugd2l0aCB0aGUgZW5kcG9pbnQiLAogICAgICAgICAgICAgICAgICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZGlzdHJpYnV0aW9uLW1vZGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBBTVFQIGRpc3RyaWJ1dGlvbiBtb2RlIGZvciByZWNlaXZlcnMuIENhbiBiZSAnbW92ZScgb3IgJ2NvcHknLiAgQSB2YWx1ZSBvZiAnbW92ZScgaW5kaWNhdGVzIGFuIGV4Y2x1c2l2ZSBsb2NrIG9uIHRoZSBtZXNzYWdlLiBBIHZhbHVlIG9mICdjb3B5JyBpbmRpY2F0ZXMgYSBub24tZXhjbHVzaXZlIGxvY2sgb24gdGhlIG1lc3NhZ2UiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiY29ubmVjdGlvbi1jYXBhYmlsaXRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIEFNUVAgY2FwYWJpbGl0aWVzIHRvIHVzZSB3aXRoIHRoZSBlbmRwb2ludCIsCiAgICAgICAgICAgICAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJub2RlLWNhcGFiaWxpdGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgQU1RUCBub2RlIGNhcGFiaWxpdGllcyB0byB1c2Ugd2l0aCB0aGUgZW5kcG9pbnQiLAogICAgICAgICAgICAgICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgImRlcGxveWVkIiwKICAgICAgICAgICAgICAgICAgICAiZHVyYWJsZSIsCiAgICAgICAgICAgICAgICAgICAgImRpc3RyaWJ1dGlvbi1tb2RlIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAicHJvdG9jb2wiCiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAicHJvdG9jb2wiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJFbmRwb2ludCBwcm90b2NvbCBpZGVudGlmaWVyLiBJZiBzZXQsIGFsbCBkZWZpbml0aW9ucyBNVVNUIHVzZSB0aGlzIHByb3RvY29sIHZhbHVlIiwKICAgICAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAgICAgIk1RVFQvNS4wIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24gZm9yIHRoaXMgZW5kcG9pbnQiLAogICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAiZW5kcG9pbnRzIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuZXR3b3JrIGFkZHJlc3NlcyB0aGF0IGFyZSBmb3IgY29tbXVuaWNhdGlvbiB3aXRoIHRoZSBlbmRwb2ludC4gVGhlIGVuZHBvaW50cyBhcmUgb3JkZXJlZCBieSBwcmVmZXJlbmNlLCB3aXRoIHRoZSBmaXJzdCBlbmRwb2ludCBiZWluZyB0aGUgcHJlZmVycmVkIGVuZHBvaW50LiBTb21lIHByb3RvY29sIGltcGxlbWVudGF0aW9ucyBtaWdodCBub3Qgc3VwcG9ydCBtdWx0aXBsZSBlbmRwb2ludHMsIGluIHdoaWNoIGNhc2UgYWxsIGJ1dCB0aGUgZmlyc3QgZW5kcG9pbnQgbWlnaHQgYmUgaWdub3JlZC4gV2hldGhlciB0aGUgVVJJIGp1c3QgaWRlbnRpZmllcyBhIG5ldHdvcmsgaG9zdCBvciBsaW5rcyBkaXJlY3RseSB0byBhIHJlc291cmNlIG1hbmFnZWQgYnkgdGhlIG5ldHdvcmsgaG9zdCBpcyBwcm90b2NvbCBzcGVjaWZpYyIsCiAgICAgICAgICAgICAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ1cmkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJ1cmkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1RVFQgVVJJIChtcXR0LCBtcXR0cywgb3Igd3Mgc2NoZW1lKSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJhdXRob3JpemF0aW9uIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkF1dGhvcml6YXRpb24gb3B0aW9ucy4gVGhlc2UgYXJlIGhpbnRzIGZvciB0aGUgYWRhcHRlciBmb3IgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgYXV0aG9yaXphdGlvbiBlbmRwb2ludC4gVGhpcyBpcyBub3QgYSBjcmVkZW50aWFscyBjb25maWd1cmF0aW9uIiwKICAgICAgICAgICAgICAgICAgICAgICJpdGVtcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBhdXRoZW50aWNhdGlvbi9hdXRob3JpemF0aW9uIHR5cGUuIE9BdXRoMiwgUGxhaW4sIEFQSUtleSwgYW5kIFg1MDlDZXJ0IGFyZSB3ZWxsLWRlZmluZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAicmVzb3VyY2V1cmwiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJ1cmkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSByZXNvdXJjZSB1cmkgZm9yIHdoaWNoIGF1dGhvcml6YXRpb24gc2hhbGwgYmUgZ3JhbnRlZCAoaWYgYXBwbGljYWJsZSkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAiYXV0aG9yaXR5dXJpIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAidXJpIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgYXV0aG9yaXR5IHVyaSB3aGVyZSBhdXRob3JpemF0aW9uIHNoYWxsIGJlIHJlcXVlc3RlZCAoaWYgYXBwbGljYWJsZSkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZ3JhbnR0eXBlcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgZ3JhbnQgdHlwZXMgdGhhdCBjYW4gYmUgcmVxdWVzdGVkIChpZiBhcHBsaWNhYmxlKSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJkZXBsb3llZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIklmIGB0cnVlYCwgdGhlIGVuZHBvaW50IG1ldGFkYXRhIHJlcHJlc2VudHMgYSBwdWJsaWMsIGxpdmUgZW5kcG9pbnQgdGhhdCBpcyBhdmFpbGFibGUgZm9yIGNvbW11bmljYXRpb24gYW5kIGEgc3RyaWN0IHZhbGlkYXRvciBNQVkgdGVzdCB0aGUgbGl2ZW5lc3Mgb2YgdGhlIGVuZHBvaW50IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInRvcGljIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgTVFUVCB0b3BpYyBwYXRoIHRoYXQgaXMgdXNlZCBmb3IgY29tbXVuaWNhdGlvbiB3aXRoIHRoZSBlbmRwb2ludCB1bmxlc3Mgb3ZlcnJpZGRlbiBieSB0aGUgbWVzc2FnZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJxb3MiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAgICAgICAgICJtaW5pbXVtIjogMCwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgTVFUVCBRb1MgbGV2ZWwuIE1heSBiZSAwLCAxLCBvciAyIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInJldGFpbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBNUVRUIHJldGFpbiBmbGFnIHRvIHVzZSBmb3IgcHVibGlzaGVycyBvbiB0aHMgZW5kcG9pbnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiY2xlYW5zZXNzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIE1RVFQgY2xlYW4gc2Vzc2lvbiBmbGFnIHRvIHVzZSBmb3IgcHVibGlzaGVycyBvbiB0aGlzIGVuZHBvaW50IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgIndpbGx0b3BpYyI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIE1RVFQgd2lsbCB0b3BpYyB0byBjb25maWd1cmUgZm9yIHB1Ymxpc2hlcnMgb24gdGhpcyBlbmRwb2ludCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ3aWxsbWVzc2FnZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IjogInVyaSIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIE1RVFQgd2lsbCBtZXNzYWdlIGRlZmluaXRpb24gdG8gY29uZmlndXJlIGZvciBwdWJsaXNoZXJzIG9uIHRoaXMgZW5kcG9pbnQuIFRoaXMgTVVTVCBiZSBhIHJlZmVyZW5jZSB0byBhIG1lc3NhZ2UgZGVmaW5pdGlvbiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAiZGVwbG95ZWQiLAogICAgICAgICAgICAgICAgICAgICJxb3MiLAogICAgICAgICAgICAgICAgICAgICJyZXRhaW4iLAogICAgICAgICAgICAgICAgICAgICJjbGVhbnNlc3Npb24iCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICJwcm90b2NvbCIKICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICJwcm90b2NvbCI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkVuZHBvaW50IHByb3RvY29sIGlkZW50aWZpZXIuIElmIHNldCwgYWxsIGRlZmluaXRpb25zIE1VU1QgdXNlIHRoaXMgcHJvdG9jb2wgdmFsdWUiLAogICAgICAgICAgICAgICAgICAiZW51bSI6IFsKICAgICAgICAgICAgICAgICAgICAiTVFUVC8zLjEuMSIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJwcm90b2NvbG9wdGlvbnMiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJDb25maWd1cmF0aW9uIGluZm9ybWF0aW9uIGZvciB0aGlzIGVuZHBvaW50IiwKICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgImVuZHBvaW50cyI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbmV0d29yayBhZGRyZXNzZXMgdGhhdCBhcmUgZm9yIGNvbW11bmljYXRpb24gd2l0aCB0aGUgZW5kcG9pbnQuIFRoZSBlbmRwb2ludHMgYXJlIG9yZGVyZWQgYnkgcHJlZmVyZW5jZSwgd2l0aCB0aGUgZmlyc3QgZW5kcG9pbnQgYmVpbmcgdGhlIHByZWZlcnJlZCBlbmRwb2ludC4gU29tZSBwcm90b2NvbCBpbXBsZW1lbnRhdGlvbnMgbWlnaHQgbm90IHN1cHBvcnQgbXVsdGlwbGUgZW5kcG9pbnRzLCBpbiB3aGljaCBjYXNlIGFsbCBidXQgdGhlIGZpcnN0IGVuZHBvaW50IG1pZ2h0IGJlIGlnbm9yZWQuIFdoZXRoZXIgdGhlIFVSSSBqdXN0IGlkZW50aWZpZXMgYSBuZXR3b3JrIGhvc3Qgb3IgbGlua3MgZGlyZWN0bHkgdG8gYSByZXNvdXJjZSBtYW5hZ2VkIGJ5IHRoZSBuZXR3b3JrIGhvc3QgaXMgcHJvdG9jb2wgc3BlY2lmaWMiLAogICAgICAgICAgICAgICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidXJpIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAidXJpIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJNUVRUIFVSSSAobXF0dCwgbXF0dHMsIG9yIHdzIHNjaGVtZSkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiYXV0aG9yaXphdGlvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBdXRob3JpemF0aW9uIG9wdGlvbnMuIFRoZXNlIGFyZSBoaW50cyBmb3IgdGhlIGFkYXB0ZXIgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIGF1dGhvcml6YXRpb24gZW5kcG9pbnQuIFRoaXMgaXMgbm90IGEgY3JlZGVudGlhbHMgY29uZmlndXJhdGlvbiIsCiAgICAgICAgICAgICAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgYXV0aGVudGljYXRpb24vYXV0aG9yaXphdGlvbiB0eXBlLiBPQXV0aDIsIFBsYWluLCBBUElLZXksIGFuZCBYNTA5Q2VydCBhcmUgd2VsbC1kZWZpbmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInJlc291cmNldXJsIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAidXJpIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcmVzb3VyY2UgdXJpIGZvciB3aGljaCBhdXRob3JpemF0aW9uIHNoYWxsIGJlIGdyYW50ZWQgKGlmIGFwcGxpY2FibGUpIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgImF1dGhvcml0eXVyaSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IjogInVyaSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGF1dGhvcml0eSB1cmkgd2hlcmUgYXV0aG9yaXphdGlvbiBzaGFsbCBiZSByZXF1ZXN0ZWQgKGlmIGFwcGxpY2FibGUpIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgImdyYW50dHlwZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGdyYW50IHR5cGVzIHRoYXQgY2FuIGJlIHJlcXVlc3RlZCAoaWYgYXBwbGljYWJsZSkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZGVwbG95ZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJJZiBgdHJ1ZWAsIHRoZSBlbmRwb2ludCBtZXRhZGF0YSByZXByZXNlbnRzIGEgcHVibGljLCBsaXZlIGVuZHBvaW50IHRoYXQgaXMgYXZhaWxhYmxlIGZvciBjb21tdW5pY2F0aW9uIGFuZCBhIHN0cmljdCB2YWxpZGF0b3IgTUFZIHRlc3QgdGhlIGxpdmVuZXNzIG9mIHRoZSBlbmRwb2ludCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ0b3BpYyI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTVFUVCB0b3BpYyBwYXRoIHRoYXQgaXMgdXNlZCBmb3IgY29tbXVuaWNhdGlvbiB3aXRoIHRoZSBlbmRwb2ludCB1bmxlc3Mgb3ZlcnJpZGRlbiBieSB0aGUgbWVzc2FnZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJxb3MiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAgICAgICAgICJtaW5pbXVtIjogMCwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgTVFUVCBRb1MgbGV2ZWwuIE1heSBiZSAwLCAxLCBvciAyIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInJldGFpbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBNUVRUIHJldGFpbiBmbGFnIHRvIHVzZSBmb3IgcHVibGlzaGVycyBvbiB0aHMgZW5kcG9pbnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiY2xlYW5zZXNzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIE1RVFQgY2xlYW4gc2Vzc2lvbiBmbGFnIHRvIHVzZSBmb3IgcHVibGlzaGVycyBvbiB0aGlzIGVuZHBvaW50IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgIndpbGx0b3BpYyI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIE1RVFQgd2lsbCB0b3BpYyB0byBjb25maWd1cmUgZm9yIHB1Ymxpc2hlcnMgb24gdGhpcyBlbmRwb2ludCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ3aWxsbWVzc2FnZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IjogInVyaSIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIE1RVFQgd2lsbCBtZXNzYWdlIGRlZmluaXRpb24gdG8gY29uZmlndXJlIGZvciBwdWJsaXNoZXJzIG9uIHRoaXMgZW5kcG9pbnQuIFRoaXMgTVVTVCBiZSBhIHJlZmVyZW5jZSB0byBhIG1lc3NhZ2UgZGVmaW5pdGlvbiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAiZGVwbG95ZWQiLAogICAgICAgICAgICAgICAgICAgICJxb3MiLAogICAgICAgICAgICAgICAgICAgICJyZXRhaW4iLAogICAgICAgICAgICAgICAgICAgICJjbGVhbnNlc3Npb24iCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICJwcm90b2NvbCIKICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICJwcm90b2NvbCI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkVuZHBvaW50IHByb3RvY29sIGlkZW50aWZpZXIuIElmIHNldCwgYWxsIGRlZmluaXRpb25zIE1VU1QgdXNlIHRoaXMgcHJvdG9jb2wgdmFsdWUiLAogICAgICAgICAgICAgICAgICAiZW51bSI6IFsKICAgICAgICAgICAgICAgICAgICAiSFRUUCIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJwcm90b2NvbG9wdGlvbnMiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJDb25maWd1cmF0aW9uIGluZm9ybWF0aW9uIGZvciB0aGlzIGVuZHBvaW50IiwKICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgImVuZHBvaW50cyI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbmV0d29yayBhZGRyZXNzZXMgdGhhdCBhcmUgZm9yIGNvbW11bmljYXRpb24gd2l0aCB0aGUgZW5kcG9pbnQuIFRoZSBlbmRwb2ludHMgYXJlIG9yZGVyZWQgYnkgcHJlZmVyZW5jZSwgd2l0aCB0aGUgZmlyc3QgZW5kcG9pbnQgYmVpbmcgdGhlIHByZWZlcnJlZCBlbmRwb2ludC4gU29tZSBwcm90b2NvbCBpbXBsZW1lbnRhdGlvbnMgbWlnaHQgbm90IHN1cHBvcnQgbXVsdGlwbGUgZW5kcG9pbnRzLCBpbiB3aGljaCBjYXNlIGFsbCBidXQgdGhlIGZpcnN0IGVuZHBvaW50IG1pZ2h0IGJlIGlnbm9yZWQuIFdoZXRoZXIgdGhlIFVSSSBqdXN0IGlkZW50aWZpZXMgYSBuZXR3b3JrIGhvc3Qgb3IgbGlua3MgZGlyZWN0bHkgdG8gYSByZXNvdXJjZSBtYW5hZ2VkIGJ5IHRoZSBuZXR3b3JrIGhvc3QgaXMgcHJvdG9jb2wgc3BlY2lmaWMiLAogICAgICAgICAgICAgICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidXJpIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAidXJpIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIVFRQIFVSSSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJhdXRob3JpemF0aW9uIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkF1dGhvcml6YXRpb24gb3B0aW9ucy4gVGhlc2UgYXJlIGhpbnRzIGZvciB0aGUgYWRhcHRlciBmb3IgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgYXV0aG9yaXphdGlvbiBlbmRwb2ludC4gVGhpcyBpcyBub3QgYSBjcmVkZW50aWFscyBjb25maWd1cmF0aW9uIiwKICAgICAgICAgICAgICAgICAgICAgICJpdGVtcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBhdXRoZW50aWNhdGlvbi9hdXRob3JpemF0aW9uIHR5cGUuIE9BdXRoMiwgUGxhaW4sIEFQSUtleSwgYW5kIFg1MDlDZXJ0IGFyZSB3ZWxsLWRlZmluZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAicmVzb3VyY2V1cmwiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJ1cmkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSByZXNvdXJjZSB1cmkgZm9yIHdoaWNoIGF1dGhvcml6YXRpb24gc2hhbGwgYmUgZ3JhbnRlZCAoaWYgYXBwbGljYWJsZSkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAiYXV0aG9yaXR5dXJpIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAidXJpIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgYXV0aG9yaXR5IHVyaSB3aGVyZSBhdXRob3JpemF0aW9uIHNoYWxsIGJlIHJlcXVlc3RlZCAoaWYgYXBwbGljYWJsZSkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZ3JhbnR0eXBlcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgZ3JhbnQgdHlwZXMgdGhhdCBjYW4gYmUgcmVxdWVzdGVkIChpZiBhcHBsaWNhYmxlKSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJkZXBsb3llZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIklmIGB0cnVlYCwgdGhlIGVuZHBvaW50IG1ldGFkYXRhIHJlcHJlc2VudHMgYSBwdWJsaWMsIGxpdmUgZW5kcG9pbnQgdGhhdCBpcyBhdmFpbGFibGUgZm9yIGNvbW11bmljYXRpb24gYW5kIGEgc3RyaWN0IHZhbGlkYXRvciBNQVkgdGVzdCB0aGUgbGl2ZW5lc3Mgb2YgdGhlIGVuZHBvaW50IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgIm1ldGhvZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIEhUVFAgbWV0aG9kIG5hbWUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiaGVhZGVycyI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIVFRQIGhlYWRlcnMgdG8gdXNlIHdpdGggdGhlIGVuZHBvaW50LiBUaGUgc2FtZSBoZWFkZXIgbWF5IGJlIHNwZWNpZmllZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCB2YWx1ZXMuIFRoZSBIVFRQIGhlYWRlciBuYW1lcyBhcmUgY2FzZSBpbnNlbnNpdGl2ZSIsCiAgICAgICAgICAgICAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIVFRQIGhlYWRlciBuYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIVFRQIGhlYWRlciB2YWx1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInF1ZXJ5IjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIVFRQIHF1ZXJ5IHBhcmFtZXRlcnMiLAogICAgICAgICAgICAgICAgICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgImRlcGxveWVkIiwKICAgICAgICAgICAgICAgICAgICAibWV0aG9kIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAicHJvdG9jb2wiCiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAicHJvdG9jb2wiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJFbmRwb2ludCBwcm90b2NvbCBpZGVudGlmaWVyLiBJZiBzZXQsIGFsbCBkZWZpbml0aW9ucyBNVVNUIHVzZSB0aGlzIHByb3RvY29sIHZhbHVlIiwKICAgICAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAgICAgIktBRktBIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24gZm9yIHRoaXMgZW5kcG9pbnQiLAogICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAiZW5kcG9pbnRzIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuZXR3b3JrIGFkZHJlc3NlcyB0aGF0IGFyZSBmb3IgY29tbXVuaWNhdGlvbiB3aXRoIHRoZSBlbmRwb2ludC4gVGhlIGVuZHBvaW50cyBhcmUgb3JkZXJlZCBieSBwcmVmZXJlbmNlLCB3aXRoIHRoZSBmaXJzdCBlbmRwb2ludCBiZWluZyB0aGUgcHJlZmVycmVkIGVuZHBvaW50LiBTb21lIHByb3RvY29sIGltcGxlbWVudGF0aW9ucyBtaWdodCBub3Qgc3VwcG9ydCBtdWx0aXBsZSBlbmRwb2ludHMsIGluIHdoaWNoIGNhc2UgYWxsIGJ1dCB0aGUgZmlyc3QgZW5kcG9pbnQgbWlnaHQgYmUgaWdub3JlZC4gV2hldGhlciB0aGUgVVJJIGp1c3QgaWRlbnRpZmllcyBhIG5ldHdvcmsgaG9zdCBvciBsaW5rcyBkaXJlY3RseSB0byBhIHJlc291cmNlIG1hbmFnZWQgYnkgdGhlIG5ldHdvcmsgaG9zdCBpcyBwcm90b2NvbCBzcGVjaWZpYyIsCiAgICAgICAgICAgICAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJib290c3RyYXAuc2VydmVycyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgS2Fma2EgYm9vdHN0cmFwIHNlcnZlcnMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAic2VjdXJpdHkucHJvdG9jb2wiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBLYWZrYSBzZWN1cml0eSBwcm90b2NvbCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJzYXNsLm1lY2hhbmlzbSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIEthZmthIFNBU0wgbWVjaGFuaXNtIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICJzZWN1cml0eS5wcm90b2NvbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInNhc2wubWVjaGFuaXNtIgogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiYXV0aG9yaXphdGlvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBdXRob3JpemF0aW9uIG9wdGlvbnMuIFRoZXNlIGFyZSBoaW50cyBmb3IgdGhlIGFkYXB0ZXIgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIGF1dGhvcml6YXRpb24gZW5kcG9pbnQuIFRoaXMgaXMgbm90IGEgY3JlZGVudGlhbHMgY29uZmlndXJhdGlvbiIsCiAgICAgICAgICAgICAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgYXV0aGVudGljYXRpb24vYXV0aG9yaXphdGlvbiB0eXBlLiBPQXV0aDIsIFBsYWluLCBBUElLZXksIGFuZCBYNTA5Q2VydCBhcmUgd2VsbC1kZWZpbmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInJlc291cmNldXJsIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAidXJpIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcmVzb3VyY2UgdXJpIGZvciB3aGljaCBhdXRob3JpemF0aW9uIHNoYWxsIGJlIGdyYW50ZWQgKGlmIGFwcGxpY2FibGUpIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgImF1dGhvcml0eXVyaSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IjogInVyaSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGF1dGhvcml0eSB1cmkgd2hlcmUgYXV0aG9yaXphdGlvbiBzaGFsbCBiZSByZXF1ZXN0ZWQgKGlmIGFwcGxpY2FibGUpIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgImdyYW50dHlwZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGdyYW50IHR5cGVzIHRoYXQgY2FuIGJlIHJlcXVlc3RlZCAoaWYgYXBwbGljYWJsZSkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZGVwbG95ZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJJZiBgdHJ1ZWAsIHRoZSBlbmRwb2ludCBtZXRhZGF0YSByZXByZXNlbnRzIGEgcHVibGljLCBsaXZlIGVuZHBvaW50IHRoYXQgaXMgYXZhaWxhYmxlIGZvciBjb21tdW5pY2F0aW9uIGFuZCBhIHN0cmljdCB2YWxpZGF0b3IgTUFZIHRlc3QgdGhlIGxpdmVuZXNzIG9mIHRoZSBlbmRwb2ludCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ0b3BpYyI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQXBhY2hlIEthZmthIHRvcGljIG5hbWUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiYWNrcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBBcGFjaGUgS2Fma2EgYWNrcyBzZXR0aW5nIHRvIHVzZS4gSWYgbm8gYWNrcyBzZXR0aW5nIGlzIHNwZWNpZmllZCwgdGhlIGRlZmF1bHQgaXMgLTEiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAia2V5IjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgQXBhY2hlIEthZmthIHJlY29yZCBrZXkiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAicGFydGl0aW9uIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIEFwYWNoZSBLYWZrYSBwYXJ0aXRpb24gbnVtYmVyIHRvIHVzZSB3aGVuIHdyaXRpbmcgdG8gb3IgcmVjZWl2aW5nIGZyb20gQXBhY2hlIEthZmthIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImNvbnN1bWVyZ3JvdXAiOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBBcGFjaGUgS2Fma2EgY29uc3VtZXIgZ3JvdXAgbmFtZSB0byB1c2UgZm9yIGNvbnN1bWVycyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJoZWFkZXJzIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgQXBhY2hlIEthZmthIGhlYWRlcnMgZm9yIHB1Ymxpc2hlcnMgb24gdGhpcyBlbmRwb2ludCIsCiAgICAgICAgICAgICAgICAgICAgICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJrZXlzZXJpYWxpemVyIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgS2Fma2Ega2V5IHNlcmlhbGl6ZXIiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmFsdWVzZXJpYWxpemVyIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgS2Fma2EgdmFsdWUgc2VyaWFsaXplciIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAiZGVwbG95ZWQiLAogICAgICAgICAgICAgICAgICAgICJhY2tzIiwKICAgICAgICAgICAgICAgICAgICAia2V5c2VyaWFsaXplciIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlc2VyaWFsaXplciIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgInByb3RvY29sIgogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgInByb3RvY29sIjogewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRW5kcG9pbnQgcHJvdG9jb2wgaWRlbnRpZmllci4gSWYgc2V0LCBhbGwgZGVmaW5pdGlvbnMgTVVTVCB1c2UgdGhpcyBwcm90b2NvbCB2YWx1ZSIsCiAgICAgICAgICAgICAgICAgICJlbnVtIjogWwogICAgICAgICAgICAgICAgICAgICJOQVRTIgogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24gZm9yIHRoaXMgZW5kcG9pbnQiLAogICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAiZW5kcG9pbnRzIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuZXR3b3JrIGFkZHJlc3NlcyB0aGF0IGFyZSBmb3IgY29tbXVuaWNhdGlvbiB3aXRoIHRoZSBlbmRwb2ludC4gVGhlIGVuZHBvaW50cyBhcmUgb3JkZXJlZCBieSBwcmVmZXJlbmNlLCB3aXRoIHRoZSBmaXJzdCBlbmRwb2ludCBiZWluZyB0aGUgcHJlZmVycmVkIGVuZHBvaW50LiBTb21lIHByb3RvY29sIGltcGxlbWVudGF0aW9ucyBtaWdodCBub3Qgc3VwcG9ydCBtdWx0aXBsZSBlbmRwb2ludHMsIGluIHdoaWNoIGNhc2UgYWxsIGJ1dCB0aGUgZmlyc3QgZW5kcG9pbnQgbWlnaHQgYmUgaWdub3JlZC4gV2hldGhlciB0aGUgVVJJIGp1c3QgaWRlbnRpZmllcyBhIG5ldHdvcmsgaG9zdCBvciBsaW5rcyBkaXJlY3RseSB0byBhIHJlc291cmNlIG1hbmFnZWQgYnkgdGhlIG5ldHdvcmsgaG9zdCBpcyBwcm90b2NvbCBzcGVjaWZpYyIsCiAgICAgICAgICAgICAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ1cmkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJ1cmkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIk5BVFMgVVJJIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImF1dGhvcml6YXRpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQXV0aG9yaXphdGlvbiBvcHRpb25zLiBUaGVzZSBhcmUgaGludHMgZm9yIHRoZSBhZGFwdGVyIGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBhdXRob3JpemF0aW9uIGVuZHBvaW50LiBUaGlzIGlzIG5vdCBhIGNyZWRlbnRpYWxzIGNvbmZpZ3VyYXRpb24iLAogICAgICAgICAgICAgICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGF1dGhlbnRpY2F0aW9uL2F1dGhvcml6YXRpb24gdHlwZS4gT0F1dGgyLCBQbGFpbiwgQVBJS2V5LCBhbmQgWDUwOUNlcnQgYXJlIHdlbGwtZGVmaW5lZCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJyZXNvdXJjZXVybCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IjogInVyaSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHJlc291cmNlIHVyaSBmb3Igd2hpY2ggYXV0aG9yaXphdGlvbiBzaGFsbCBiZSBncmFudGVkIChpZiBhcHBsaWNhYmxlKSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJhdXRob3JpdHl1cmkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJ1cmkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBhdXRob3JpdHkgdXJpIHdoZXJlIGF1dGhvcml6YXRpb24gc2hhbGwgYmUgcmVxdWVzdGVkIChpZiBhcHBsaWNhYmxlKSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJncmFudHR5cGVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBncmFudCB0eXBlcyB0aGF0IGNhbiBiZSByZXF1ZXN0ZWQgKGlmIGFwcGxpY2FibGUpIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpdGVtcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImRlcGxveWVkIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSWYgYHRydWVgLCB0aGUgZW5kcG9pbnQgbWV0YWRhdGEgcmVwcmVzZW50cyBhIHB1YmxpYywgbGl2ZSBlbmRwb2ludCB0aGF0IGlzIGF2YWlsYWJsZSBmb3IgY29tbXVuaWNhdGlvbiBhbmQgYSBzdHJpY3QgdmFsaWRhdG9yIE1BWSB0ZXN0IHRoZSBsaXZlbmVzcyBvZiB0aGUgZW5kcG9pbnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic3ViamVjdCI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIE5BVFMgc3ViamVjdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAiZGVwbG95ZWQiCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICJwcm90b2NvbCIKICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0KICB9Cn0="
            }
          },
          "versionscount": 1
        }
      },
      "schemascount": 2
    },
    "message-v1": {
      "specid": "message-v1",
      "self": "#/specs/message-v1",
      "xid": "/specs/message-v1",
      "epoch": 5,
      "createdat": "2025-04-22T02:33:09.591829534Z",
      "modifiedat": "2025-04-22T02:33:10.018873232Z",
      "docsurl": "#/specs/message-v1/docs",
      "docs": {
        "model.json": {
          "docid": "model.json",
          "self": "#/specs/message-v1/docs/model.json",
          "xid": "/specs/message-v1/docs/model.json",
          "metaurl": "#/specs/message-v1/docs/model.json/meta",
          "meta": {
            "docid": "model.json",
            "self": "#/specs/message-v1/docs/model.json/meta",
            "xid": "/specs/message-v1/docs/model.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:09.591829534Z",
            "modifiedat": "2025-04-22T02:33:09.591829534Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/message-v1/docs/model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/message-v1/docs/model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "model.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/message-v1/docs/model.json/versions/v1.0-rc1",
              "xid": "/specs/message-v1/docs/model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:09.591829534Z",
              "modifiedat": "2025-04-22T02:33:09.591829534Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        },
        "spec.md": {
          "docid": "spec.md",
          "self": "#/specs/message-v1/docs/spec.md",
          "xid": "/specs/message-v1/docs/spec.md",
          "metaurl": "#/specs/message-v1/docs/spec.md/meta",
          "meta": {
            "docid": "spec.md",
            "self": "#/specs/message-v1/docs/spec.md/meta",
            "xid": "/specs/message-v1/docs/spec.md/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:09.696584917Z",
            "modifiedat": "2025-04-22T02:33:09.696584917Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/message-v1/docs/spec.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/message-v1/docs/spec.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "spec.md",
              "versionid": "v1.0-rc1",
              "self": "#/specs/message-v1/docs/spec.md/versions/v1.0-rc1",
              "xid": "/specs/message-v1/docs/spec.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:09.696584917Z",
              "modifiedat": "2025-04-22T02:33:09.696584917Z",
              "ancestor": "v1.0-rc1",
              "docbase64": "IyBNZXNzYWdlIERlZmluaXRpb25zIFJlZ2lzdHJ5IFNlcnZpY2UgLSBWZXJzaW9uIDEuMC1yYzEKCiMjIEFic3RyYWN0CgpUaGlzIHNwZWNpZmljYXRpb24gZGVmaW5lcyBhIG1lc3NhZ2UgYW5kIGV2ZW50IGNhdGFsb2cgZXh0ZW5zaW9uIHRvIHRoZQp4UmVnaXN0cnkgZG9jdW1lbnQgZm9ybWF0IGFuZCBBUEkgW3NwZWNpZmljYXRpb25dKC4uL2NvcmUvc3BlYy5tZCkuCgojIyBUYWJsZSBvZiBDb250ZW50cwoKLSBbT3ZlcnZpZXddKCNvdmVydmlldykKLSBbTm90YXRpb25zIGFuZCBUZXJtaW5vbG9neV0oI25vdGF0aW9ucy1hbmQtdGVybWlub2xvZ3kpCiAgLSBbTm90YXRpb25hbCBDb252ZW50aW9uc10oI25vdGF0aW9uYWwtY29udmVudGlvbnMpCiAgLSBbVGVybWlub2xvZ3ldKCN0ZXJtaW5vbG9neSkKLSBbTWVzc2FnZSBEZWZpbml0aW9ucyBSZWdpc3RyeV0oI21lc3NhZ2UtZGVmaW5pdGlvbnMtcmVnaXN0cnkpCiAgLSBbTWVzc2FnZSBEZWZpbml0aW9uIEdyb3Vwc10oI21lc3NhZ2UtZGVmaW5pdGlvbi1ncm91cHMpCiAgLSBbTWVzc2FnZSBEZWZpbml0aW9uc10oI21lc3NhZ2UtZGVmaW5pdGlvbnMpCgojIyBPdmVydmlldwoKVGhpcyBzcGVjaWZpY2F0aW9uIGRlZmluZXMgYSBtZXNzYWdlIGFuZCBldmVudCBjYXRhbG9nIGV4dGVuc2lvbiB0byB0aGUKeFJlZ2lzdHJ5IGRvY3VtZW50IGZvcm1hdCBhbmQgQVBJIFtzcGVjaWZpY2F0aW9uXSguLi9jb3JlL3NwZWMubWQpLiBUaGUgcHVycG9zZQpvZiB0aGUgY2F0YWxvZyBpcyB0byBwcm92aWRlIGEgbWFjaGluZS1yZWFkYWJsZSBkZWZpbml0aW9ucyBmb3IgbWVzc2FnZSBhbmQgZXZlbnQKZW52ZWxvcGVzIGFuZCBsb2dpY2FsIGdyb3VwaW5nIG9mIHJlbGF0ZWQgbWVzc2FnZXMgYW5kIGV2ZW50cy4KCk1hbmFnaW5nIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgcGF5bG9hZHMgb2YgdGhvc2UgbWVzc2FnZXMgYW5kIGV2ZW50cyBpcyBub3QgaW4Kc2NvcGUsIGJ1dCBkZWxlZ2F0ZWQgdG8gdGhlIFtzY2hlbWEgcmVnaXN0cnkgZXh0ZW5zaW9uXSguLi9zY2hlbWEvc3BlYy5tZCkgZm9yCnhSZWdpc3RyeS4gU2NoZW1hcyBhcmUgbGlua2VkIHRvIG1lc3NhZ2VzIGFuZCBldmVudCBkZWNsYXJhdGlvbnMgYnkgYSBVUkkKcmVmZXJlbmNlLgoKRm9yIGVhc3kgcmVmZXJlbmNlLCB0aGUgSlNPTiBzZXJpYWxpemF0aW9uIG9mIGEgTWVzc2FnZSBSZWdpc3RyeSBhZGhlcmVzIHRvCnRoaXMgZm9ybToKCmBgYHlhbWwKewogICJzcGVjdmVyc2lvbiI6ICJTVFJJTkciLAogICJyZWdpc3RyeWlkIjogIlNUUklORyIsCiAgInNlbGYiOiAiVVJMIiwKICAic2hvcnRzZWxmIjogIlVSTCIsCiAgInhpZCI6ICJYSUQiLAogICJlcG9jaCI6IFVJTlRFR0VSLAogICJuYW1lIjogIlNUUklORyIsID8KICAiZGVzY3JpcHRpb24iOiAiU1RSSU5HIiwgPwogICJkb2N1bWVudGF0aW9uIjogIlVSTCIsID8KICAibGFiZWxzIjogewogICAgIlNUUklORyI6ICJTVFJJTkciICoKICB9LCA/CiAgImNyZWF0ZWRhdCI6ICJUSU1FU1RBTVAiLAogICJtb2RpZmllZGF0IjogIlRJTUVTVEFNUCIsCgogICJtb2RlbCI6IHsgLi4uIH0sID8KCiAgIm1lc3NhZ2Vncm91cHN1cmwiOiAiVVJMIiwKICAibWVzc2FnZWdyb3Vwc2NvdW50IjogVUlOVEVHRVIsCiAgIm1lc3NhZ2Vncm91cHMiOiB7CiAgICAiS0VZIjogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgbWVzc2FnZWdyb3VwaWQKICAgICAgIm1lc3NhZ2Vncm91cGlkIjogIlNUUklORyIsICAgICAgICAgICAgICAgIyB4UmVnaXN0cnkgY29yZSBhdHRyaWJ1dGVzCiAgICAgICJzZWxmIjogIlVSTCIsCiAgICAgICJzaG9ydHNlbGYiOiAiVVJMIiwKICAgICAgInhpZCI6ICJYSUQiLAogICAgICAjIFN0YXJ0IG9mIGRlZmF1bHQgVmVyc2lvbidzIGF0dHJpYnV0ZXMKICAgICAgImVwb2NoIjogVUlOVEVHRVIsCiAgICAgICJuYW1lIjogIlNUUklORyIsID8KICAgICAgImRlc2NyaXB0aW9uIjogIlNUUklORyIsID8KICAgICAgImRvY3VtZW50YXRpb24iOiAiVVJMIiwgPwogICAgICAibGFiZWxzIjogeyAiU1RSSU5HIjogIlNUUklORyIgKiB9LCA/CiAgICAgICJjcmVhdGVkYXQiOiAiVElNRVNUQU1QIiwKICAgICAgIm1vZGlmaWVkYXQiOiAiVElNRVNUQU1QIiwKCiAgICAgICJlbnZlbG9wZSI6ICJTVFJJTkciLCA/ICAgICAgICAgICAgICAgICAgIyBlLmcuIENsb3VkRXZlbnRzLzEuMAogICAgICAicHJvdG9jb2wiOiAiU1RSSU5HIiwgPyAgICAgICAgICAgICAgICAgICMgZS5nLiBIVFRQLzEuMQoKICAgICAgIm1lc3NhZ2VzdXJsIjogIlVSTCIsCiAgICAgICJtZXNzYWdlc2NvdW50IjogVUlOVEVHRVIsCiAgICAgICJtZXNzYWdlcyIgOiB7CiAgICAgICAgIktFWSI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBtZXNzYWdlaWQKICAgICAgICAgICJtZXNzYWdlaWQiOiAiU1RSSU5HIiwgICAgICAgICAgICAgICAjIHhSZWdpc3RyeSBjb3JlIGF0dHJpYnV0ZXMKICAgICAgICAgICJ2ZXJzaW9uaWQiOiAiU1RSSU5HIiwKICAgICAgICAgICJzZWxmIjogIlVSTCIsCiAgICAgICAgICAic2hvcnRzZWxmIjogIlVSTCIsCiAgICAgICAgICAieGlkIjogIlhJRCIsCiAgICAgICAgICAjIFN0YXJ0IG9mIGRlZmF1bHQgVmVyc2lvbidzIGF0dHJpYnV0ZXMKICAgICAgICAgICJlcG9jaCI6IFVJTlRFR0VSLAogICAgICAgICAgIm5hbWUiOiAiU1RSSU5HIiwgPwogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlNUUklORyIsID8KICAgICAgICAgICJkb2N1bWVudGF0aW9uIjogIlVSTCIsID8KICAgICAgICAgICJsYWJlbHMiOiB7ICJTVFJJTkciOiAiU1RSSU5HIiAqIH0sID8KICAgICAgICAgICJjcmVhdGVkYXQiOiAiVElNRVNUQU1QIiwKICAgICAgICAgICJtb2RpZmllZGF0IjogIlRJTUVTVEFNUCIsCiAgICAgICAgICAiYW5jZXN0b3IiOiAiU1RSSU5HIiwKCiAgICAgICAgICAiYmFzZW1lc3NhZ2V1cmwiOiAiVVJMIiwgPyAgICAgICAgICAgIyBNZXNzYWdlIGJlaW5nIGV4dGVuZGVkCgogICAgICAgICAgImVudmVsb3BlIjogIlNUUklORyIsID8gICAgICAgICAgICAgICMgZS5nLiBDbG91ZEV2ZW50cy8xLjAKICAgICAgICAgICJlbnZlbG9wZW1ldGFkYXRhIjogewogICAgICAgICAgICAiU1RSSU5HIjogSlNPTi1WQUxVRSAqCgogICAgICAgICAgICAjIENsb3VkRXZlbnRzLzEuMCAiZW52ZWxvcGUiIHRoZSAiZW52ZWxvcGVtZXRhZGF0YSIgaXMgb2YgdGhlIGZvcm06CiAgICAgICAgICAgICJTVFJJTkciOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiVFlQRSIsID8KICAgICAgICAgICAgICAidmFsdWUiOiBBTlksID8KICAgICAgICAgICAgICAicmVxdWlyZWQiOiBCT09MRUFOICAgICAgICAgICAgICAjIERlZmF1bHQ9ZmFsc2UKICAgICAgICAgICAgfSAqCiAgICAgICAgICB9LCA/CiAgICAgICAgICAiZW52ZWxvcGVvcHRpb25zIjogewogICAgICAgICAgICAiU1RSSU5HIjogSlNPTi1WQUxVRSAqCiAgICAgICAgICB9LCA/CgogICAgICAgICAgInByb3RvY29sIjogIlNUUklORyIsID8gICAgICAgICAgICAgICMgZS5nLiBIVFRQLzEuMQogICAgICAgICAgInByb3RvY29sb3B0aW9ucyI6IHsgLi4uIH0sID8KCiAgICAgICAgICAiZGF0YXNjaGVtYWZvcm1hdCI6ICJTVFJJTkciLCA/CiAgICAgICAgICAiZGF0YXNjaGVtYSI6IEFOWSwgPwogICAgICAgICAgImRhdGFzY2hlbWF1cmkiOiAiVVJJIiwgPwogICAgICAgICAgImRhdGFjb250ZW50dHlwZSI6ICJTVFJJTkciLCA/CiAgICAgICAgICAjIEVuZCBvZiBkZWZhdWx0IFZlcnNpb24ncyBhdHRyaWJ1dGVzCgogICAgICAgICAgIm1ldGF1cmwiOiAiVVJMIiwKICAgICAgICAgICJtZXRhIjogeyAuLi4gfSwgPwogICAgICAgICAgInZlcnNpb25zdXJsIjogIlVSTCIsCiAgICAgICAgICAidmVyc2lvbnNjb3VudCI6IFVJTlRFR0VSLAogICAgICAgICAgInZlcnNpb25zIjogeyAuLi4gfSA/CiAgICAgIH0gPwogICAgfSAqCiAgfSA/Cn0KYGBgCgojIyBOb3RhdGlvbnMgYW5kIFRlcm1pbm9sb2d5CgojIyMgTm90YXRpb25hbCBDb252ZW50aW9ucwoKVGhlIGtleSB3b3JkcyAiTVVTVCIsICJNVVNUIE5PVCIsICJSRVFVSVJFRCIsICJTSEFMTCIsICJTSEFMTCBOT1QiLCAiU0hPVUxEIiwKIlNIT1VMRCBOT1QiLCAiUkVDT01NRU5ERUQiLCAiTUFZIiwgYW5kICJPUFRJT05BTCIgaW4gdGhpcyBkb2N1bWVudCBhcmUgdG8gYmUKaW50ZXJwcmV0ZWQgYXMgZGVzY3JpYmVkIGluIFtSRkMgMjExOV0oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzIxMTkpLgoKRm9yIGNsYXJpdHksIE9QVElPTkFMIGF0dHJpYnV0ZXMgKHNwZWNpZmljYXRpb24tZGVmaW5lZCBhbmQgZXh0ZW5zaW9ucykgYXJlCk9QVElPTkFMIGZvciBjbGllbnRzIHRvIHVzZSwgYnV0IHRoZSBzZXJ2ZXJzJyByZXNwb25zaWJpbGl0eSB3aWxsIHZhcnkuClNlcnZlci11bmtub3duIGV4dGVuc2lvbiBhdHRyaWJ1dGVzIE1VU1QgYmUgc2lsZW50bHkgc3RvcmVkIGluIHRoZSBiYWNraW5nCmRhdGFzdG9yZS4gU3BlY2lmaWNhdGlvbi1kZWZpbmVkLCBhbmQgc2VydmVyLWtub3duIGV4dGVuc2lvbiwgYXR0cmlidXRlcyBNVVNUCmdlbmVyYXRlIGFuIGVycm9yIGlmIGNvcnJlc3BvbmRpbmcgZmVhdHVyZSBpcyBub3Qgc3VwcG9ydGVkIG9yIGVuYWJsZWQuCkhvd2V2ZXIsIGFzIHdpdGggYWxsIGF0dHJpYnV0ZXMsIGlmIGFjY2VwdGluZyB0aGUgYXR0cmlidXRlIHdvdWxkIHJlc3VsdCBpbiBhCmJhZCBzdGF0ZSAoc3VjaCBhcyBleGNlZWRpbmcgYSBzaXplIGxpbWl0LCBvciByZXN1bHRzIGluIGEgc2VjdXJpdHkgaXNzdWUpLAp0aGVuIHRoZSBzZXJ2ZXIgTUFZIGNob29zZSB0byByZWplY3QgdGhlIHJlcXVlc3QuCgpJbiB0aGUgcHNldWRvIEpTT04gZm9ybWF0IHNuaXBwZXRzIGA/YCBtZWFucyB0aGUgcHJlY2VkaW5nIGF0dHJpYnV0ZSBpcwpPUFRJT05BTCwgYCpgIG1lYW5zIHRoZSBwcmVjZWRpbmcgYXR0cmlidXRlIE1BWSBhcHBlYXIgemVybyBvciBtb3JlIHRpbWVzLAphbmQgYCtgIG1lYW5zIHRoZSBwcmVjZWRpbmcgYXR0cmlidXRlIE1VU1QgYXBwZWFyIGF0IGxlYXN0IG9uY2UuIFRoZSBwcmVzZW5jZQpvZiB0aGUgYCNgIGNoYXJhY3RlciBtZWFucyB0aGUgcmVtYWluaW5nIHBvcnRpb24gb2YgdGhlIGxpbmUgaXMgYSBjb21tZW50LgpXaGl0ZXNwYWNlIGNoYXJhY3RlcnMgaW4gdGhlIEpTT04gc25pcHBldHMgYXJlIHVzZWQgZm9yIHJlYWRhYmlsaXR5IGFuZCBhcmUKbm90IG5vcm1hdGl2ZS4KCiMjIyBUZXJtaW5vbG9neQoKVGhpcyBzcGVjaWZpY2F0aW9uIGRlZmluZXMgdGhlIGZvbGxvd2luZyB0ZXJtczoKCiMjIyMgTWVzc2FnZSBhbmQgRXZlbnQKCkEgKiptZXNzYWdlKiogaXMgYSB0cmFuc3BvcnQgd3JhcHBlciBhcm91bmQgYSAqKm1lc3NhZ2UgYm9keSoqIChpbnRlcmNoYW5nZWFibHkKcmVmZXJyZWQgdG8gYXMgcGF5bG9hZCkgdGhhdCBpcyBkZWNvcmF0ZWQgd2l0aCAqKm1ldGFkYXRhKiouIFRoZSBtZXRhZGF0YQpkZXNjcmliZXMgdGhlIG1lc3NhZ2UgYm9keSB3aXRob3V0IGFuIGludGVybWVkaWFyeSBoYXZpbmcgdG8gaW5zcGVjdCBpdCBhbmQKY2FycmllcyBmdXJ0aGVyIGluZm9ybWF0aW9uIHVzZWZ1bCBmb3IgaWRlbnRpZmljYXRpb24sIHJvdXRpbmcsIGFuZCBkaXNwYXRjaC4KCkluIHRoaXMgc3BlY2lmaWNhdGlvbiwgKiptZXNzYWdlKiogaXMgYW4gdW1icmVsbGEgdGVybSB0aGF0IHJlZmVycyB0byBhbGwga2luZHMKb2YgbWVzc2FnZXMgYXMgd2VsbCBhcyB0byAqKmV2ZW50cyoqIGFzIGEgc3BlY2lhbCBmb3JtIG9mIG1lc3NhZ2VzLgoKVGhlIGRlZmluaXRpb24gb2YgW21lc3NhZ2VdW21lc3NhZ2VdIGZyb20gdGhlIENsb3VkRXZlbnRzIHNwZWNpZmljYXRpb24gYXBwbGllcy4KCiMjIyMgRW52ZWxvcGVzIGFuZCBQcm90b2NvbHMKCkFuICoqZW52ZWxvcGUqKiBpcyBhIHRyYW5zcG9ydCBwcm90b2NvbC1pbmRlcGVuZGVudCBtZXNzYWdlIG1ldGFkYXRhIGNvbnZlbnRpb24uClRoZSBbQ05DRiBDbG91ZEV2ZW50c11bQ2xvdWRFdmVudHNdIHNwZWNpZmljYXRpb24gaXMgYW4gZXhhbXBsZSBvZiBhIG1lc3NhZ2UKZW52ZWxvcGUgYW5kIGlzIHRoZSBvbmx5IGVudmVsb3BlIGV4cGxpY2l0bHkgZGVmaW5lZCBpbiB0aGlzIHNwZWNpZmljYXRpb24uCgpBIHNpbWlsYXIgdHJhbnNwb3J0IHByb3RvY29sLWluZGVwZW5kZW50IG1lc3NhZ2UgbWV0YWRhdGEgY29udmVudGlvbiBpcywgZm9yCmV4YW1wbGUsIHRoZSBbVzNDIFNPQVAgMS4yIGVudmVsb3BlXVtTT0FQXSBmb3Igd2hpY2ggc3VwcG9ydCBjb3VsZCBiZSBhZGRlZCBieQphbiBleHRlbnNpb24uCgpUaGlzIHNwZWNpZmljYXRpb24gdXNlcyAqKnByb3RvY29sKiogdG8gcmVmZXIgdG8gYSB0cmFuc3BvcnQgcHJvdG9jb2wtc3BlY2lmaWMKbWVzc2FnZSBtZXRhZGF0YSBjb252ZW50aW9uLiBXaGVuIGEga25vd24gcHJvdG9jb2wgaXMgZXhwbGljaXRseSBzcGVjaWZpZWQgZm9yIGEKbWVzc2FnZSBkZWZpbml0aW9uLCB0aGUgInByb3RvY29sb3B0aW9ucyIgc2VjdGlvbiBNQVkgY29udGFpbiBjb25zdHJhaW50cyBmb3IKdGhlIHByb3RvY29sLXNwZWNpZmljIG1ldGFkYXRhLgoKIyMgTWVzc2FnZSBEZWZpbml0aW9ucyBSZWdpc3RyeQoKVGhlIE1lc3NhZ2UgRGVmaW5pdGlvbnMgUmVnaXN0cnkgKG9yICJNZXNzYWdlIENhdGFsb2ciKSBpcyBhIHJlZ2lzdHJ5IG9mCm1ldGFkYXRhIGRlZmluaXRpb25zIGZvciBtZXNzYWdlcyBhbmQgZXZlbnRzLiBUaGUgZW50cmllcyBpbiB0aGUgcmVnaXN0cnkKZGVzY3JpYmUgY29uc3RyYWludHMgZm9yIHRoZSBtZXRhZGF0YSBvZiBtZXNzYWdlcyBhbmQgZXZlbnRzLCBmb3IgaW5zdGFuY2UgdGhlCmNvbmNyZXRlIHZhbHVlcyBhbmQgcGF0dGVybnMgZm9yIHRoZSBgdHlwZWAsIGBzb3VyY2VgLCBhbmQgYHN1YmplY3RgIGF0dHJpYnV0ZXMKb2YgYSBDbG91ZEV2ZW50LgoKTWVzc2FnZSBkZWZpbml0aW9ucyBjYW4gYmUgdXNlZCBpbiB2YXJpb3VzIGNvbnRleHRzLiBBIGNvZGUgZ2VuZXJhdG9yIGZvcgptZXNzYWdlIHByb2R1Y2VycyBjYW4gYmUgaW5mb3JtZWQsIHdoaWNoIHByb3BlcnRpZXMgb3IgaGVhZGVycyBoYXZlIHRvIGJlIHNldCwKYW5kIHdoaWNoIGRhdGEgdHlwZXMsIHZhbHVlcywgb3IgcGF0dGVybnMgYXJlIGV4cGVjdGVkIHRvIHByb2R1Y2UgYSBjb25mb3JtYW50Cm1lc3NhZ2UuIEEgbWVzc2FnZSBjb25zdW1lciBjYW4gdXNlIHRoZSBkZWZpbml0aW9ucyB0byB2YWxpZGF0ZSBpbmNvbWluZwptZXNzYWdlcyBhbmQgdG8gZXh0cmFjdCB0aGUgbWV0YWRhdGEgZm9yIHJvdXRpbmcgb3IgcHJvY2Vzc2luZy4KCkEgbWVzc2FnZSBncm91cCBpcyBhIGNvbGxlY3Rpb24gb2YgbWVzc2FnZSBkZWZpbml0aW9ucyB0aGF0IGFyZSByZWxhdGVkIHRvCmVhY2ggb3RoZXIgaW4gc29tZSBhcHBsaWNhdGlvbi1zcGVjaWZpYyB3YXkuIEZvciBpbnN0YW5jZSwgYSBtZXNzYWdlIGdyb3VwCmNhbiBiZSB1c2VkIHRvIGdyb3VwIGFsbCBldmVudHMgcmFpc2VkIGJ5IGEgcGFydGljdWxhciBhcHBsaWNhdGlvbiBtb2R1bGUgb3IgYnkKYSBwYXJ0aWN1bGFyIHJvbGUgb2YgYW4gYXBwbGljYXRpb24gcHJvdG9jb2wgZXhjaGFuZ2UgcGF0dGVybi4KCkFsbCBtZXNzYWdlIGRlZmluaXRpb25zIE1VU1QgYmUgZGVmaW5lZCBpbnNpZGUgbWVzc2FnZSBncm91cHMuCgpBIG1lc3NhZ2UgcHJvY2Vzc29yIGZvciBhIG1lc3NhZ2luZyBvciBldmVudGluZyBjaGFubmVsIGNhbiB1c2UgYSBtZXNzYWdlIGdyb3VwCmFuZCBpdHMgY29udGFpbmVkIG1lc3NhZ2UgZGVmaW5pdGlvbnMgdG8gbWF0Y2ggaW5jb21pbmcgbWVzc2FnZXMgdG8gdGhlIGRlY2xhcmVkCm1lc3NhZ2UgZGVmaW5pdGlvbnMgYW5kIGRldGVybWluZSB3aGV0aGVyIGFuIGluY29taW5nIG1lc3NhZ2UgY29uZm9ybXMgdG8KdGhlIGV4cGVjdGVkIG1ldGFkYXRhIGNvbnN0cmFpbnRzLiBJZiBhIGNvbmZvcm1hbnQgbWVzc2FnZSBoYXMgYmVlbiBpZGVudGlmaWVkLAp0aGUgcHJvY2Vzc29yIG1pZ2h0IHRoZW4gdXNlIHRoZSBsaW5rZWQgc2NoZW1hIHRvIGhhbmRsZSB0aGUgbWVzc2FnZSBib2R5LiBUaGlzCmlzIGVzcGVjaWFsbHkgdXNlZnVsIGluIHNjZW5hcmlvcyB3aGVyZSB0aGUgbWVzc2FnZSBpdHNlbGYgZG9lcyBub3QgY29udGFpbiBhCnNjaGVtYSBoaW50IG9yIGV2ZW4gY29udGVudCB0eXBlIGluZm9ybWF0aW9uIGFzIGl0IGlzIHRoZSBjYXNlLCBmb3IgaW5zdGFuY2UsIGluCk1RVFQgMy4xLjEuCgpXaGV0aGVyIGEgbWVzc2FnZSBpcyBjb25mb3JtYW50IHRvIGEgbWVzc2FnZSBkZWZpbml0aW9uIGlzIGRldGVybWluZWQgYnkgdGhlCm1lc3NhZ2UgcHJvY2Vzc29yIGFuZCBpdHMgaW1wbGVtZW50YXRpb24tc3BlY2lmaWMgcnVsZXMuIENvbmZvcm1hbmNlIHJ1bGVzIGFyZQpvdXQgb2YgdGhlIHNjb3BlIG9mIHRoaXMgc3BlY2lmaWNhdGlvbi4KClRoZSBbRW5kcG9pbnQgUmVnaXN0cnldKC4uL2VuZHBvaW50L3NwZWMubWQpIGlzIGEgcmVsYXRlZCByZWdpc3RyeSB0aGF0IGxlYW5zIG9uCnRoaXMgY29uY2VwdCBhbmQgYWxsb3dzIGFzc29jaWF0aW5nIG9uZSBvciBtb3JlIG1lc3NhZ2UgZGVmaW5pdGlvbiBncm91cHMgd2l0aAphbiBlbmRwb2ludCwgdGh1cyBlZmZlY3RpdmVseSBkZWZpbmluZyBhIGNvbnRyYWN0IGZvciB0aGUgZW5kcG9pbnQuIEFuICJlbmRwb2ludCIKYXMgZGVmaW5lZCBpbiB0aGF0IHNwZWNpZmljYXRpb24gaXMgYWxzbyBhIG1lc3NhZ2UgZGVmaW5pdGlvbiBncm91cCBpbiBpdHNlbGYsCndpdGggdGhlIG1lc3NhZ2UgZGVmaW5pdGlvbnMgZm9sbG93aW5nIHRoZSBydWxlcyBvZiB0aGlzIHNwZWNpZmljYXRpb24uCgojIyBNZXNzYWdlIERlZmluaXRpb24gUmVnaXN0cnkgTW9kZWwKClRoZSBmb3JtYWwgeFJlZ2lzdHJ5IGV4dGVuc2lvbiBtb2RlbCBvZiB0aGUgTWVzc2FnZSBEZWZpbml0aW9ucyBSZWdpc3RyeQpyZXNpZGVzIGluIHRoZSBbbW9kZWwuanNvbl0obW9kZWwuanNvbikgZmlsZS4KCiMjIyBNZXNzYWdlIERlZmluaXRpb24gR3JvdXBzCgpUaGUgR3JvdXAgKEdST1VQKSBuYW1lIGlzIGBtZXNzYWdlZ3JvdXBzYC4gVGhlIHR5cGUgb2YgYSBncm91cCBpcwpgbWVzc2FnZWdyb3VwYC4KClRoZSBmb2xsb3dpbmcgYXR0cmlidXRlcyBhcmUgZGVmaW5lZCBmb3IgdGhlIGBtZXNzYWdlZ3JvdXBgIG9iamVjdCBpbiBhZGRpdGlvbgp0byB0aGUgeFJlZ2lzdHJ5LWRlZmluZWQgY29yZQpbYXR0cmlidXRlc10oLi4vY29yZS9zcGVjLm1kI2F0dHJpYnV0ZXMtYW5kLWV4dGVuc2lvbnMpOgoKIyMjIyBgZW52ZWxvcGVgIChNZXNzYWdlIEdyb3VwKQoKLSBUeXBlOiBTdHJpbmcKLSBEZXNjcmlwdGlvbjogSWRlbnRpZmllcyB0aGUgY29tbW9uLCB0cmFuc3BvcnQgcHJvdG9jb2wgaW5kZXBlbmRlbnQgbWVzc2FnZQogIG1ldGFkYXRhIGZvcm1hdC4gTWVzc2FnZSBtZXRhZGF0YSBlbnZlbG9wZXMgYXJlIHJlZmVyZW5jZWQgYnkgbmFtZSBhbmQgdmVyc2lvbgogIGFzIGB7TkFNRX0ve1ZFUlNJT059YC4gVGhpcyBzcGVjaWZpY2F0aW9uIGRlZmluZXMgYSBzZXQgb2YgY29tbW9uCiAgW21ldGFkYXRhIGVudmVsb3BlIG5hbWVzXSgjbWV0YWRhdGEtZW52ZWxvcGVzKSB0aGF0IE1VU1QgYmUgdXNlZCBmb3IgdGhlIGdpdmVuCiAgZW52ZWxvcGVzLCBidXQgYXBwbGljYXRpb25zIE1BWSBkZWZpbmUgZXh0ZW5zaW9ucyBmb3Igb3RoZXIgZW52ZWxvcGVzIG9uIHRoZWlyCiAgb3duLiBBbGwgZGVmaW5pdGlvbnMgaW5zaWRlIGEgZ3JvdXAgTVVTVCB1c2UgdGhpcyBzYW1lIGVudmVsb3BlLgotIENvbnN0cmFpbnRzOgogIC0gQXQgbGVhc3Qgb25lIG9mIGBlbnZlbG9wZW1ldGFkYXRhYCBhbmQgYHByb3RvY29sYCBNVVNUIGJlIHNwZWNpZmllZC4KICAtIElmIHByZXNlbnQsIE1VU1QgYmUgYSBub24tZW1wdHkgc3RyaW5nCiAgLSBJZiBwcmVzZW50LCBNVVNUIGZvbGxvdyB0aGUgbmFtaW5nIGNvbnZlbnRpb24gYHtOQU1FfS97VkVSU0lPTn1gLCB3aGVyZWJ5CiAgICBge05BTUV9YCBpcyB0aGUgbmFtZSBvZiB0aGUgbWV0YWRhdGEgZW52ZWxvcGUgYW5kIGB7VkVSU0lPTn1gIGlzIHRoZQogICAgdmVyc2lvbiBvZiB0aGUgbWV0YWRhdGEgZW52ZWxvcGUuCi0gRXhhbXBsZXM6CiAgLSBgQ2xvdWRFdmVudHMvMS4wYAoKIyMjIyBgcHJvdG9jb2xgIChNZXNzYWdlIEdyb3VwKQoKLSBUeXBlOiBTdHJpbmcKLSBEZXNjcmlwdGlvbjogSWRlbnRpZmllcyBhIHRyYW5zcG9ydCBwcm90b2NvbCB0byBiZSB1c2VkIGZvciB0aGlzIE1lc3NhZ2UuCiAgUHJvdG9jb2xzIGFyZSByZWZlcmVuY2VkIGJ5IG5hbWUgYW5kIHZlcnNpb24gYXMgYHtOQU1FfS97VkVSU0lPTn1gLiBUaGlzCiAgc3BlY2lmaWNhdGlvbiBkZWZpbmVzIGEgc2V0IG9mIGNvbW1vbiBbbWVzc2FnZSBwcm90b2NvbAogIG5hbWVzXSgjbWVzc2FnZS1wcm90b2NvbHMpIHRoYXQgTVVTVCBiZSB1c2VkIGZvciB0aGUgZ2l2ZW4gcHJvdG9jb2xzLCBidXQKICBhcHBsaWNhdGlvbnMgTUFZIGRlZmluZSBleHRlbnNpb25zIGZvciBvdGhlciBwcm90b2NvbHMgb24gdGhlaXIgb3duLiBBbGwKICBtZXNzYWdlcyBpbnNpZGUgYSBncm91cCBNVVNUIHVzZSB0aGlzIHNhbWUgcHJvdG9jb2wuCi0gQ29uc3RyYWludHM6CiAgLSBBdCBsZWFzdCBvbmUgb2YgYGVudmVsb3BlbWV0YWRhdGFgIGFuZCBgcHJvdG9jb2xgIE1VU1QgYmUgc3BlY2lmaWVkLgogIC0gSWYgcHJlc2VudCwgTVVTVCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcKICAtIElmIHByZXNlbnQsIE1VU1QgZm9sbG93IHRoZSBuYW1pbmcgY29udmVudGlvbiBge05BTUV9YCBvcgogICAgYHtOQU1FfS97VkVSU0lPTn1gLCB3aGVyZWJ5IGB7TkFNRX1gIGlzIHRoZSBuYW1lIG9mIHRoZSBwcm90b2NvbCBhbmQKICAgIGB7VkVSU0lPTn1gIGlzIHRoZSB2ZXJzaW9uIG9mIHByb3RvY29sLiBUaGUgdmVyc2lvbiBpcyBSRVFVSVJFRCBpZiBtdWx0aXBsZSwKICAgIG11dHVhbGx5IGluY29tcGF0aWJsZSB2ZXJzaW9ucyBvZiB0aGUgcHJvdG9jb2wgZXhpc3QgYW5kIHByb3RvY29sIG9wdGlvbnMKICAgIGRpZmZlciBiZXR3ZWVuIHZlcnNpb25zLgotIEV4YW1wbGVzOgogIC0gYE1RVFQvMy4xLjFgCiAgLSBgQU1RUC8xLjBgCiAgLSBgS0FGS0FgCgojIyMgTWVzc2FnZSBEZWZpbml0aW9ucwoKVGhlIHJlc291cmNlIChSRVNPVVJDRSkgY29sbGVjdGlvbiBuYW1lIGluc2lkZSBgbWVzc2FnZWdyb3VwYCBpcwpgbWVzc2FnZXNgLiBUaGUgcmVzb3VyY2UgbmFtZSBpcyBgbWVzc2FnZWAuCgpEaWZmZXJlbnQgZnJvbSBzY2hlbWFzLCBtZXNzYWdlIGRlZmluaXRpb25zIGRvIG5vdCBjb250YWluIGEKdmVyc2lvbiBoaXN0b3J5LiBJZiB0aGUgbWV0YWRhdGEgb2YgdHdvIG1lc3NhZ2VzIGRpZmZlcnMsIHRoZXkgYXJlIGNvbnNpZGVyZWQKZGlmZmVyZW50IG1lc3NhZ2VzLgoKV2hlbiBbQ2xvdWRFdmVudHNdKGh0dHBzOi8vY2xvdWRldmVudHMuaW8pIGlzIGJlaW5nIHVzZWQgZm9yIGEgcGFydGljdWxhcgptZXNzYWdlLCBpdCBpcyBSRUNPTU1FTkRFRCB0aGF0IHRoZSBtZXNzYWdlJ3MgYG1lc3NhZ2VpZGAgYXR0cmlidXRlIGJlIHRoZQpzYW1lIGFzIHRoZSBbQ2xvdWRFdmVudHMgYHR5cGVgCmF0dHJpYnV0ZV0oaHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkZXZlbnRzL3NwZWMvYmxvYi9tYWluL2Nsb3VkZXZlbnRzL3NwZWMubWQjdHlwZSkuIERvaW5nIHNvIG1ha2VzIGZvciBlYXNpZXIgbWFuYWdlbWVudCBvZiB0aGUgbWV0YS1tb2RlbCBieSBjb3JyZWxhdGluZwp0aGUgbG9vay11cCB2YWx1ZSAoaWQpIG9mIG1lc3NhZ2VzIHdpdGggdGhlaXIgcmVsYXRlZCBldmVudHMuCgpUaGUgZm9sbG93aW5nIGV4dGVuc2lvbnMgYXJlIGRlZmluZWQgZm9yIHRoZSBgbWVzc2FnZWAgUmVzb3VyY2UgaW4gYWRkaXRpb24gdG8KdGhlIGNvcmUgeFJlZ2lzdHJ5IFJlc291cmNlClthdHRyaWJ1dGVzXSguLi9jb3JlL3NwZWMubWQjYXR0cmlidXRlcy1hbmQtZXh0ZW5zaW9ucyk6CgojIyMjIGBiYXNlbWVzc2FnZXVybGAKCi0gVHlwZTogVVJJLXJlZmVyZW5jZQotIERlc2NyaXB0aW9uOiBpZiBwcmVzZW50LCB0aGUgVVJMIHBvaW50cyB0byBhIG1lc3NhZ2UgZGVmaW5pdGlvbiB0aGF0IGlzIHRoZQogIGJhc2UgZm9yIHRoaXMgbWVzc2FnZSBkZWZpbml0aW9uLiBCeSBmb2xsb3dpbmcgdGhlIFVSTCwgdGhlIGJhc2UgbWVzc2FnZQogIGNhbiBiZSByZXRyaWV2ZWQgYW5kIGV4dGVuZGVkIHdpdGggdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBtZXNzYWdlLiBUaGlzIGlzCiAgdXNlZnVsIGZvciBkZWZpbmluZyB2YXJpYW50cyBvZiBtZXNzYWdlcyB0aGF0IG9ubHkgZGlmZmVyIGluIG1pbm9yIGFzcGVjdHMgdG8KICBhdm9pZCByZXBldGl0aW9uLCBvciBtZXNzYWdlcyB0aGF0IG9ubHkgaGF2ZSBhIGBlbnZlbG9wZWAgd2l0aCBhc3NvY2lhdGVkCiAgYGVudmVsb3BlbWV0YWRhdGFgIHRvIGJlIGJvdW5kIHRvIHZhcmlvdXMgcHJvdG9jb2xzLgogIEF0dHJpYnV0ZXMgZGVmaW5lZCBpbiB0aGlzIG1lc3NhZ2UgZnVsbHkgb3ZlcnJpZGUgdGhlIGF0dHJpYnV0ZXMgb2YgdGhlIGJhc2UKICBtZXNzYWdlLgotIENvbnN0cmFpbnRzOgogIC0gT1BUSU9OQUwKICAtIElmIHByZXNlbnQsIE1VU1QgYmUgYSB2YWxpZCBVUkktcmVmZXJlbmNlCiAgLSBJZiBwcmVzZW50LCBNVVNUIHBvaW50IHRvIGEgcmVzb3VyY2Ugb2YgdHlwZSBgbWVzc2FnZWAgdXNpbmcgSlNPTiBQb2ludGVyCiAgICBbUkZDNjkwMV1bSlNPTiBQb2ludGVyXSBub3RhdGlvbi4KCiMjIyMgYGVudmVsb3BlYAoKU2FtZSBhcyB0aGUgW2BlbnZlbG9wZWBdKCNlbnZlbG9wZS1tZXNzYWdlLWdyb3VwKSBhdHRyaWJ1dGUgb2YgdGhlCmBtZXNzYWdlZ3JvdXBgIG9iamVjdC4KClNpbmNlIG1lc3NhZ2VzIE1BWSBiZSBjcm9zcy1yZWZlcmVuY2VkICgiYm9ycm93ZWQiKSBhY3Jvc3MgbWVzc2FnZSBncm91cApib3VuZGFyaWVzLCB0aGlzIGF0dHJpYnV0ZSBpcyBhbHNvIFJFUVVJUkVEIGFuZCBNVVNUIGJlIHRoZSBzYW1lIGFzIHRoZQpgZW52ZWxvcGVgIGF0dHJpYnV0ZSBvZiB0aGUgYG1lc3NhZ2Vncm91cGAgb2JqZWN0IGludG8gd2hpY2ggdGhlIG1lc3NhZ2UgaXMKZW1iZWRkZWQgb3IgcmVmZXJlbmNlZC4KCklsbHVzdHJhdGluZyBleGFtcGxlOgoKYGBgeWFtbAoKIm1lc3NhZ2Vncm91cHN1cmwiOiAiLi4uIiwKIm1lc3NhZ2Vncm91cHNjb3VudCI6IDIsCiJtZXNzYWdlZ3JvdXBzIjogewogICJjb20uZXhhbXBsZS5hYmMiOiB7CiAgICAibWVzc2FnZWdyb3VwaWQiOiAiY29tLmV4YW1wbGUuYWJjIiwKICAgICJlbnZlbG9wZSI6ICJDbG91ZEV2ZW50cy8xLjAiLAoKICAgICJtZXNzYWdlc3VybCI6ICIuLi4iLAogICAgIm1lc3NhZ2VzY291bnQiOiAyLAogICAgIm1lc3NhZ2VzIjogewogICAgICAiY29tLmV4YW1wbGUuYWJjLmV2ZW50MSI6IHsKICAgICAgICAibWVzc2FnZWlkIjogImNvbS5leGFtcGxlLmFiYy5ldmVudDEiLAogICAgICAgICJlbnZlbG9wZSI6ICJDbG91ZEV2ZW50cy8xLjAiLAogICAgICAgICAjIC4uLiBkZXRhaWxzIC4uLgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbS5leGFtcGxlLmFiYy5ldmVudDIiOiB7CiAgICAgICAgIm1lc3NhZ2VpZCI6ICJjb20uZXhhbXBsZS5hYmMuZXZlbnQxIiwKICAgICAgICAiZW52ZWxvcGUiOiAiQ2xvdWRFdmVudHMvMS4wIiwKICAgICAgICAjIC4uLiBkZXRhaWxzIC4uLgogICAgICB9CiAgfSwKICAiY29tLmV4YW1wbGUuZGVmIjogewogICAgIm1lc3NhZ2Vncm91cGlkIjogImNvbS5leGFtcGxlLmRlZiIsCiAgICAiZW52ZWxvcGUiOiAiQ2xvdWRFdmVudHMvMS4wIiwKCiAgICAibWVzc2FnZXN1cmwiOiAiLi4uIiwKICAgICJtZXNzYWdlc2NvdW50IjogMSwKICAgICJtZXNzYWdlcyI6IHsKICAgICAgImNvbS5leGFtcGxlLmFiYy5ldmVudDEiOiB7CiAgICAgICAgInVyaSI6ICIjL21lc3NhZ2Vncm91cHMvY29tLmV4YW1wbGUuYWJjL21lc3NhZ2VzL2NvbS5leGFtcGxlLmFiYy5ldmVudDEiLAogICAgICAgICMgLi4uIGRldGFpbHMgLi4uCiAgICAgIH0KICAgIH0KICB9Cn0KYGBgCgojIyMjIGBlbnZlbG9wZW1ldGFkYXRhYAoKLSBUeXBlOiBPYmplY3QKLSBEZXNjcmlwdGlvbjogRGVzY3JpYmVzIHRoZSBtZXRhZGF0YSBjb25zdHJhaW50cyBmb3IgbWVzc2FnZXMgb2YgdGhpcyB0eXBlLiBUaGUKICBjb250ZW50IG9mIHRoaXMgcHJvcGVydHkgaXMgZGVmaW5lZCBieSB0aGUgbWVzc2FnZSBlbnZlbG9wZSwgYnV0IGFsbAogIGVudmVsb3BlcyB1c2UgYSBjb21tb24gc2NoZW1hIGZvciB0aGUgY29uc3RyYWludHMgZGVmaW5lZCBmb3IgdGhlaXIKICBtZXRhZGF0YSBoZWFkZXJzLCBwcm9wZXJ0aWVzIG9yIGF0dHJpYnV0ZXMuCi0gQ29uc3RyYWludHM6CiAgLSBSRVFVSVJFRCBpZiBgZW52ZWxvcGVgIGlzIHNwZWNpZmllZC4KLSBFeGFtcGxlczoKICAtIFNlZSBbTWV0YWRhdGEgRW52ZWxvcGVzXSgjbWV0YWRhdGEtZW52ZWxvcGVzKQoKIyMjIyBgZW52ZWxvcGVvcHRpb25zYAoKU2VlIFtgZW52ZWxvcGVvcHRpb25zYF0oLi4vZW5kcG9pbnQvc3BlYy5tZCNlbnZlbG9wZW9wdGlvbnMpIGluIHRoZSBFbmRwb2ludApzcGVjaWZpY2F0aW9uLgoKIyMjIyBgcHJvdG9jb2xgCgotIFNhbWUgYXMgdGhlIFtgcHJvdG9jb2xgXSgjcHJvdG9jb2wtbWVzc2FnZS1ncm91cCkgYXR0cmlidXRlIG9mIHRoZQogIGBtZXNzYWdlZ3JvdXBgIG9iamVjdC4KCiMjIyMgYHByb3RvY29sb3B0aW9uc2AKCi0gVHlwZTogT2JqZWN0Ci0gRGVzY3JpcHRpb246IERlc2NyaWJlcyB0aGUgbWVzc2FnZSBjb25zdHJhaW50cyBmb3IgdGhlIHByb3RvY29sIGJlaW5nIHVzZWQuCiAgVGhlIGNvbnRlbnQgb2YgdGhpcyBwcm9wZXJ0eSBpcyBkZWZpbmVkIGJ5IHRoZSBwcm90b2NvbCBtZXNzYWdlIGJpbmRpbmcsCiAgYnV0IGFsbCBwcm90b2NvbHMgdXNlIGEgY29tbW9uIHNjaGVtYSBtb2RlbCBmb3IgdGhlCiAgY29uc3RyYWludHMgZGVmaW5lZCBmb3IgdGhlaXIgbWV0YWRhdGEgaGVhZGVycywgcHJvcGVydGllcyBvciBhdHRyaWJ1dGVzLgotIENvbnN0cmFpbnRzOgogIC0gUkVRVUlSRUQgaWYgYHByb3RvY29sYCBpcyBzcGVjaWZpZWQuCi0gRXhhbXBsZXM6CiAgLSBTZWUgW01lc3NhZ2UgcHJvdG9jb2xzXSgjbWVzc2FnZS1wcm90b2NvbHMpCgojIyMjIGBkYXRhc2NoZW1hZm9ybWF0YAoKLSBUeXBlOiBTdHJpbmcKLSBEZXNjcmlwdGlvbjogSWRlbnRpZmllcyB0aGUgc2NoZW1hIGZvcm1hdCBhcHBsaWNhYmxlIHRvIHRoZSBtZXNzYWdlIHBheWxvYWQsCiAgZXF1aXZhbGVudCB0byB0aGUgc2NoZW1hIFsnZm9ybWF0J10oLi4vc2NoZW1hL3NwZWMubWQjZm9ybWF0KQogIGF0dHJpYnV0ZS4KLSBDb25zdHJhaW50czoKICAtIE9QVElPTkFMCiAgLSBJZiBwcmVzZW50LCBNVVNUIGJlIGEgbm9uLWVtcHR5IHN0cmluZwogIC0gSWYgcHJlc2VudCwgTVVTVCBmb2xsb3cgdGhlIG5hbWluZyBjb252ZW50aW9uIGB7TkFNRX0ve1ZFUlNJT059YCwgd2hlcmVieQogICAgYHtOQU1FfWAgaXMgdGhlIG5hbWUgb2YgdGhlIHNjaGVtYSBmb3JtYXQgYW5kIGB7VkVSU0lPTn1gIGlzIHRoZSB2ZXJzaW9uIG9mCiAgICB0aGUgc2NoZW1hIGZvcm1hdCBpbiB0aGUgZm9ybWF0IGRlZmluZWQgYnkgdGhlIHNjaGVtYSBmb3JtYXQgaXRzZWxmLgotIEV4YW1wbGVzOgogIC0gJ0pTT05TY2hlbWEvZHJhZnQtMDcnCiAgLSAnQXZyby8xLjkuMCcKICAtICdQcm90b2J1Zi8zJwoKIyMjIyBgZGF0YXNjaGVtYWAKCi0gVHlwZTogQW55Ci0gRGVzY3JpcHRpb246IENvbnRhaW5zIHRoZSBpbmxpbmUgc2NoZW1hIGZvciB0aGUgbWVzc2FnZSBwYXlsb2FkLiBUaGUgc2NoZW1hCiAgZm9ybWF0IGlzIGlkZW50aWZpZWQgYnkgdGhlIGBkYXRhc2NoZW1hZm9ybWF0YCBhdHRyaWJ1dGUuIEVxdWl2YWxlbnQgdG8gdGhlCiAgc2NoZW1hdmVyc2lvbgogIFsnc2NoZW1hJ10oLi4vc2NoZW1hL3NwZWMubWQjc2NoZW1hKSBhdHRyaWJ1dGUKLSBDb25zdHJhaW50czoKICAtIE9QVElPTkFMLgogIC0gTXV0dWFsbHkgZXhjbHVzaXZlIHdpdGggdGhlIGBkYXRhc2NoZW1hdXJpYCBhdHRyaWJ1dGUuCiAgLSBJZiBwcmVzZW50LCBgZGF0YXNjaGVtYWZvcm1hdGAgTVVTVCBiZSBwcmVzZW50LgotIEV4YW1wbGVzOgogIC0gU2VlIFtTY2hlbWEgRm9ybWF0c10oLi4vc2NoZW1hL3NwZWMubWQjc2NoZW1hLWZvcm1hdHMpCgojIyMjIGBkYXRhc2NoZW1hdXJpYAoKLSBUeXBlOiBVUkktcmVmZXJlbmNlCi0gRGVzY3JpcHRpb246IENvbnRhaW5zIGEgcmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJJIHRoYXQgcG9pbnRzIHRvIHRoZSBzY2hlbWEKICBvYmplY3QgdG8gdXNlIGZvciB0aGUgbWVzc2FnZSBwYXlsb2FkLiBUaGUgc2NoZW1hIGZvcm1hdCBpcyBpZGVudGlmaWVkIGJ5IHRoZQogIGBkYXRhc2NoZW1hZm9ybWF0YCBhdHRyaWJ1dGUuIFNlZQogIFtTY2hlbWEgRm9ybWF0c10oLi4vc2NoZW1hL3NwZWMubWQjc2NoZW1hLWZvcm1hdHMpIGZvciBkZXRhaWxzIG9uCiAgaG93IHRvIHJlZmVyZW5jZSBzcGVjaWZpYyBzY2hlbWEgb2JqZWN0cyBmb3IgdGhlIG1lc3NhZ2UgcGF5bG9hZC4gSXQgaXMgbm90CiAgc3VmZmljaWVudCBmb3IgdGhlIFVSSS1yZWZlcmVuY2UgdG8gcG9pbnQgdG8gYSBzY2hlbWEgZG9jdW1lbnQ7IGl0IE1VU1QKICByZXNvbHZlIHRvIGEgY29uY3JldGUgc2NoZW1hIG9iamVjdC4KLSBDb25zdHJhaW50czoKICAtIE9QVElPTkFMLgogIC0gTXV0dWFsbHkgZXhjbHVzaXZlIHdpdGggdGhlIGBkYXRhc2NoZW1hYCBhdHRyaWJ1dGUuCiAgLSBJZiBwcmVzZW50LCBgZGF0YXNjaGVtYWZvcm1hdGAgTVVTVCBiZSBwcmVzZW50LgoKIyMjIyBgZGF0YWNvbnRlbnR0eXBlYAoKLSBUeXBlOiBgU3RyaW5nYCBwZXIgW1JGQyAyMDQ2XShodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMjA0NikKLSBEZXNjcmlwdGlvbjogQ29udGVudCB0eXBlIG9mIHRoZSBtZXNzYWdlIHBheWxvYWQuIFRoaXMgYXR0cmlidXRlIE1BWSBiZQogIGR1cGxpY2F0aXZlIHdpdGggc29tZSBvdGhlciBtZXRhZGF0YSB3aXRoaW4gdGhlIG1lc3NhZ2UgZGVmaW5pdGlvbi4gRm9yCiAgZXhhbXBsZSwgaW4gdGhlIGNhc2Ugb2YgdXNpbmcgQ2xvdWRFdmVudHMsIHRoZSBgZW52ZWxvcGVtZXRhZGF0YWAgYXR0cmlidXRlCiAgbWlnaHQgaW5jbHVkZSB0aGUgYGRhdGFjb250ZW50dHlwZWAgYXR0cmlidXRlLiBUaGlzIHBvc3NpYmxlIGR1cGxpY2F0aW9uCiAgb2YgZGF0YSBpcyBleHBlY3RlZCBzbyBhcyB0byBhbGxvdyBmb3IgYSBtb3JlIGNvbnNpc3RlbnQsIGFuZCBlYXN5LCBkaXNjb3ZlcnkKICBvZiB0aGUgbWVzc2FnZSdzIGZvcm1hdC4gVGhpcyBtZWFucyB0aGF0IGlmIHRoaXMgaW5mb3JtYXRpb24gZG9lcyBhcHBlYXIgaW4KICBtb3JlIHRoYW4gb25lIGxvY2F0aW9uIHdpdGhpbiB0aGUgbWVzc2FnZSBtZXRhZGF0YSB0aGV5IE1VU1QgYWxsIGhhdmUgdGhlCiAgc2FtZSB2YWx1ZXMuCgogIE5vdGUgdGhhdCB3aGVuIGFuIGBlbnZlbG9wZWAgaXMgZGVmaW5lZCBmb3IgYSBtZXNzYWdlIGFuZCB0aGUgZGF0YSBvZgogIGludGVyZXN0IGlzIHNlcmlhbGl6ZWQgYXMgYmVpbmcgbmVzdGVkIHdpdGhpbiB0aGUgZW52ZWxvcGUgKGUuZy4KICBDbG91ZEV2ZW50cyAic3RydWN0dXJlZCIgbW9kZSksIHRoZW4gdGhpcyBhdHRyaWJ1dGUgTVVTVCBiZSB0aGUgY29udGVudCB0eXBlCiAgb2YgdGhlIG1lc3NhZ2UgZW52ZWxvcGUgYW5kIG5vdCBvZiB0aGUgZGF0YSBuZXN0ZWQgd2l0aGluIHRoZSBlbnZlbG9wZS4KCiAgQXMgc3BlY2lmaWVkIGluIFtSRkMgMjA0NV0oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzIwNDUpLCB0aGUgbWVkaWEKICB0eXBlIHBhcnQgb2YgdGhlIGNvbnRlbnQgdHlwZSBNVVNUIGJlIHRyZWF0ZWQgaW4gYSBjYXNlLWluc2Vuc2l0aXZlIG1hbm5lcgogIGJ5IGNvbnN1bWVycywgYWxvbmcgd2l0aCB0aGUgYXR0cmlidXRlIG5hbWVzIGluIHBhcmFtZXRlcnMuIEZvciBleGFtcGxlLAogIGEgYGRhdGFjb250ZW50dHlwZWAgb2YgYHRleHQvcGxhaW47IGNoYXJzZXQ9dXRmLThgIE1VU1QgYmUgdHJlYXRlZCBpbiB0aGUKICBzYW1lIHdheSBhcyBgVEVYVC9QbGFpbjsgQ2hhclNldD11dGYtOGAuCi0gQ29uc3RyYWludHM6CiAgLSBPUFRJT05BTAogIC0gSWYgcHJlc2VudCwgTVVTVCBhZGhlcmUgdG8gdGhlIGZvcm1hdCBzcGVjaWZpZWQgaW4KICAgIFtSRkMgMjA0Nl0oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzIwNDYpCi0gRm9yIE1lZGlhIFR5cGUgZXhhbXBsZXMgc2VlCiAgW0lBTkEgTWVkaWEgVHlwZXNdKGh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvbWVkaWEtdHlwZXMvbWVkaWEtdHlwZXMueGh0bWwpCgojIyMgTWV0YWRhdGEgRW52ZWxvcGVzIGFuZCBNZXNzYWdlIFByb3RvY29scwoKVGhpcyBzZWN0aW9uIGRlZmluZXMgdGhlIG1ldGFkYXRhIGVudmVsb3BlcyBhbmQgbWVzc2FnZSBwcm90b2NvbHMgdGhhdCBhcmUKZGlyZWN0bHkgc3VwcG9ydGVkIGJ5IHRoaXMgc3BlY2lmaWNhdGlvbi4KCk1ldGFkYXRhIGVudmVsb3BlcyBsZWFuIG9uIGEgcHJvdG9jb2wtbmV1dHJhbCBtZXRhZGF0YSBkZWZpbml0aW9uIGxpa2UKQ2xvdWRFdmVudHMuIE1lc3NhZ2UgcHJvdG9jb2xzIGxlYW4gb24gYSBtZXNzYWdlIG1vZGVsIGRlZmluaXRpb24gb2YgYSBzcGVjaWZpYwpwcm90b2NvbCBsaWtlIEFNUVAgb3IgTVFUVCBvciBLYWZrYS4KCkEgbWVzc2FnZSBjYW4gdXNlIGVpdGhlciBhIG1ldGFkYXRhIGBlbnZlbG9wZWAsIGEgbWVzc2FnZSBgcHJvdG9jb2xgLCBvciBib3RoLgoKSWYgYSBtZXNzYWdlIG9ubHkgdXNlcyBhIG1ldGFkYXRhIGBlbnZlbG9wZWAsIGFueSBpbXBsaWNpdCBwcm90b2NvbCBiaW5kaW5ncwpkZWZpbmVkIGJ5IHRoZSBlbnZlbG9wZSBhcHBseS4gRm9yIGluc3RhbmNlLCBhIG1lc3NhZ2UgZGVmaW5pdGlvbiB0aGF0IHVzZXMgdGhlCiJDbG91ZEV2ZW50cy8xLjAiIGVudmVsb3BlIGJ1dCBubyBleHBsaWNpdCBgcHJvdG9jb2xgIGltcGxpY2l0bHkgYXBwbGllcyB0byBhbGwKcHJvdG9jb2xzIGZvciB3aGljaCBDbG91ZEV2ZW50cyBiaW5kaW5ncyBleGlzdCwgYW5kIHVzaW5nIHRoZSByZXNwZWN0aXZlCnByb3RvY29sIGJpbmRpbmcgcnVsZXMuCgpJZiBhIG1lc3NhZ2UgdXNlcyBib3RoIGEgbWV0YWRhdGEgYGVudmVsb3BlYCBhbmQgYSBtZXNzYWdlIGBwcm90b2NvbGAsIHRoZQptZXNzYWdlIGJpbmRpbmcgcnVsZXMgYXBwbHkgb3ZlciB0aGUgbWV0YWRhdGEgZW52ZWxvcGUgcnVsZXMuIEZvciBpbnN0YW5jZSwgaWYKYSBtZXNzYWdlIGRlZmluaXRpb24gdXNlcyB0aGUgIkNsb3VkRXZlbnRzLzEuMCIgZW52ZWxvcGUgYW5kIGFuICJBTVFQLzEuMCIKcHJvdG9jb2wsIHRoZW4gdGhlIGltcGxpY2l0IHByb3RvY29sIGJpbmRpbmdzIG9mIHRoZSAiQ2xvdWRFdmVudHMvMS4wIiBlbnZlbG9wZQphcmUgb3ZlcnJpZGRlbiBieSB0aGUgIkFNUVAvMS4wIiBwcm90b2NvbCBydWxlcy4KCklmIGEgbWVzc2FnZSB1c2VzIG9ubHkgYSBtZXNzYWdlIGBwcm90b2NvbGAsIG9ubHkgdGhlIG1ldGFkYXRhIGNvbnN0cmFpbnRzCmRlZmluZWQgYnkgdGhlIG1lc3NhZ2UgYHByb3RvY29sYCBydWxlcyBhcHBseS4KCiMjIyMgQ29tbW9uIHByb3BlcnRpZXMKClRoZSBmb2xsb3dpbmcgcHJvcGVydGllcyBhcmUgY29tbW9uIHRvIGFsbCBtZXNzYWdlcyB3aXRoCmhlYWRlcnMvcHJvcGVydGllcy9hdHRyaWJ1dGVzIGNvbnN0cmFpbnRzOgoKIyMjIyMgYGRlc2NyaXB0aW9uYAoKLSBUeXBlOiBTdHJpbmcKLSBEZXNjcmlwdGlvbjogQSBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGUgcHJvcGVydHkuCi0gQ29uc3RyYWludHM6CiAgLSBPUFRJT05BTC4KICAtIElmIHByZXNlbnQsIE1VU1QgYmUgYSBub24tZW1wdHkgc3RyaW5nLgoKIyMjIyMgYHJlcXVpcmVkYAoKLSBUeXBlOiBCb29sZWFuCi0gRGVzY3JpcHRpb246IEluZGljYXRlcyB3aGV0aGVyIHRoZSBwcm9wZXJ0eSBpcyBSRVFVSVJFRCB0byBiZSBwcmVzZW50IGluIGEKICBtZXNzYWdlIG9mIHRoaXMgdHlwZS4KLSBDb25zdHJhaW50czoKICAtIE9QVElPTkFMLiBEZWZhdWx0cyBNVVNUIGJlIGBmYWxzZWAuCiAgLSBJZiBwcmVzZW50LCBNVVNUIGJlIGEgYm9vbGVhbiB2YWx1ZS4KCiMjIyMjIGBzcGVjdXJsYAoKLSBUeXBlOiBVUkktcmVmZXJlbmNlCi0gRGVzY3JpcHRpb246IENvbnRhaW5zIGEgcmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJJIHRoYXQgcG9pbnRzIHRvIHRoZQogIGh1bWFuLXJlYWRhYmxlIHNwZWNpZmljYXRpb24gb2YgdGhlIHByb3BlcnR5LgotIENvbnN0cmFpbnRzOgogIC0gT1BUSU9OQUwKCiMjIyMjIGB0eXBlYAoKLSBUeXBlOiBTdHJpbmcKLSBEZXNjcmlwdGlvbjogVGhlIHR5cGUgb2YgdGhlIHByb3BlcnR5LiBUaGlzIGlzIHVzZWQgdG8gY29uc3RyYWluIHRoZSB2YWx1ZSBvZgogIHRoZSBwcm9wZXJ0eS4KLSBDb25zdHJhaW50czoKICAtIE9QVElPTkFMLgogIC0gRGVmYXVsdCB2YWx1ZSBNVVNUIGJlICJzdHJpbmciLgogIC0gVGhlIHZhbGlkIHR5cGVzIGFyZSB0aG9zZSBkZWZpbmVkIGluIHRoZSBbQ2xvdWRFdmVudHNdW0Nsb3VkRXZlbnRzIFR5cGVzXQogICAgY29yZSBzcGVjaWZpY2F0aW9uLCB3aXRoIHNvbWUgYWRkaXRpb25zOgogICAgLSBgYW55YDogQW55IHR5cGUgb2YgdmFsdWUsIGluY2x1ZGluZyBgbnVsbGAuCiAgICAtIGBib29sZWFuYDogQ2xvdWRFdmVudHMgIkJvb2xlYW4iIHR5cGUuCiAgICAtIGBzdHJpbmdgOiBDbG91ZEV2ZW50cyAiU3RyaW5nIiB0eXBlLgogICAgLSBgc3ltYm9sYDogQSBgc3RyaW5nYCB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gYWxwaGFudW1lcmljYWwgY2hhcmFjdGVycyBhbmQKICAgICAgdW5kZXJzY29yZXMuCiAgICAtIGBiaW5hcnlgOiBDbG91ZEV2ZW50cyAiQmluYXJ5IiB0eXBlLgogICAgLSBgdGltZXN0YW1wYDogQ2xvdWRFdmVudHMgIlRpbWVzdGFtcCIgdHlwZSAoUkZDMzMzOSBEYXRlVGltZSkKICAgIC0gYGR1cmF0aW9uYDogUkZDMzMzOSBEdXJhdGlvbgogICAgLSBgdXJpdGVtcGxhdGVgOiBbUkZDNjU3MF1bUkZDNjU3MF0gTGV2ZWwgMSBVUkkgVGVtcGxhdGUKICAgIC0gYHVyaWA6IENsb3VkRXZlbnRzICJVUkkiIHR5cGUgKFJGQzM5ODYgVVJJKQogICAgLSBgdXJpcmVmZXJlbmNlYDogQ2xvdWRFdmVudHMgIlVSSS1yZWZlcmVuY2UiIHR5cGUgKFJGQzM5ODYgVVJJLXJlZmVyZW5jZSkKICAgIC0gYG51bWJlcmA6IElFRUU3NTQgRG91YmxlCiAgICAtIGBpbnRlZ2VyYDogQ2xvdWRFdmVudHMgIkludGVnZXIiIHR5cGUgKFJGQyA3MTU5LCBTZWN0aW9uIDYpCgojIyMjIyBgdmFsdWVgCgotIFR5cGU6IEFueQotIERlc2NyaXB0aW9uOiBUaGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5LiBXaXRoIGEgZmV3IGV4Y2VwdGlvbnMsIHNlZSBiZWxvdywgdGhpcwogIGlzIHRoZSB2YWx1ZSB0aGF0IE1VU1QgYmUgbGl0ZXJhbGx5IHByZXNlbnQgaW4gdGhlIG1lc3NhZ2UgZm9yIHRoZSBtZXNzYWdlIHRvCiAgYmUgY29uc2lkZXJlZCBjb25mb3JtYW50IHdpdGggdGhpcyBtZXRhc2NoZW1hLgotIENvbnN0cmFpbnRzOgogIC0gT1BUSU9OQUwuCiAgLSBJZiBwcmVzZW50LCBNVVNUIGJlIGEgdmFsaWQgdmFsdWUgZm9yIHRoZSBwcm9wZXJ0eS4KCklmIHRoZSBgdHlwZWAgcHJvcGVydHkgaGFzIHRoZSB2YWx1ZSBgdXJpdGVtcGxhdGVgLCBgdmFsdWVgIE1BWSBjb250YWluCnBsYWNlaG9sZGVycy4gQXMgZGVmaW5lZCBpbiBbUkZDNjU3MF1bUkZDNjU3MF0gKExldmVsIDEpLCB0aGUgcGxhY2Vob2xkZXJzIE1VU1QKYmUgZW5jbG9zZWQgaW4gY3VybHkgYnJhY2VzIChge2AgYW5kIGB9YCkgYW5kIE1VU1QgYmUgYSB2YWxpZCBgc3ltYm9sYC4KUGxhY2Vob2xkZXJzIHRoYXQgYXJlIHVzZWQgbXVsdGlwbGUgdGltZXMgaW4gdGhlIHNhbWUgbWVzc2FnZSBkZWZpbml0aW9uIE1VU1QgdG8KcmVwcmVzZW50IGlkZW50aWNhbCB2YWx1ZXMuCgpXaGVuIHZhbGlkYXRpbmcgYSBtZXNzYWdlIHByb3BlcnR5IGFnYWluc3QgdGhpcyB2YWx1ZSwgdGhlIHBsYWNlaG9sZGVycyBhY3QgYXMKd2lsZGNhcmRzLiBGb3IgZXhhbXBsZSwgdGhlIHZhbHVlIGB7Zm9vfS9iYXJgIHdvdWxkIG1hdGNoIHRoZSB2YWx1ZSBgYWJjL2JhcmAgb3IKYHh5ei9iYXJgLgoKV2hlbiBjcmVhdGluZyBhIG1lc3NhZ2UgYmFzZWQgb24gYSBtZXRhc2NoZW1hIHdpdGggc3VjaCBhIHZhbHVlLCB0aGUKcGxhY2Vob2xkZXJzIE1VU1QgYmUgcmVwbGFjZWQgd2l0aCB2YWxpZCB2YWx1ZXMuIEZvciBleGFtcGxlLCB0aGUgdmFsdWUKYHtmb299L2JhcmAgd291bGQgYmUgcmVwbGFjZWQgd2l0aCBgYWJjL2JhcmAgb3IgYHh5ei9iYXJgIHdoZW4gY3JlYXRpbmcgYQptZXNzYWdlLgoKSWYgdGhlIGB0eXBlYCBwcm9wZXJ0eSBoYXMgdGhlIHZhbHVlIGB0aW1lc3RhbXBgIGFuZCB0aGUgYHZhbHVlYCBwcm9wZXJ0eSBpcwpzZXQgdG8gYSB2YWx1ZSBvZiBgMDAwMC0wMS0wMVQwMDowMDowMFpgLCB0aGUgdmFsdWUgTVVTVCBiZSByZXBsYWNlZCB3aXRoIHRoZQpjdXJyZW50IHRpbWVzdGFtcCB3aGVuIGNyZWF0aW5nIGEgbWVzc2FnZS4KCiMjIyMgTWV0YWRhdGEgRW52ZWxvcGVzCgpUaGlzIHNwZWNpZmljYXRpb24gb25seSBkZWZpbmVzIG9uZSBtZXRhZGF0YSBlbnZlbG9wZTogIkNsb3VkRXZlbnRzLzEuMCIuCgojIyMjIyBDbG91ZEV2ZW50cy8xLjAKCkZvciB0aGUgIkNsb3VkRXZlbnRzLzEuMCIgZW52ZWxvcGUsIHRoZQpbYGVudmVsb3BlbWV0YWRhdGFgXSgjZW52ZWxvcGVtZXRhZGF0YSkgb2JqZWN0IGNvbnRhaW5zIGEgcHJvcGVydHkKYGF0dHJpYnV0ZXNgLCB3aGljaCBpcyBhbiBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyBjb3JyZXNwb25kIHRvIHRoZQpDbG91ZEV2ZW50cyBjb250ZXh0IGF0dHJpYnV0ZXMuCgpBcyB3aXRoIHRoZSBbQ2xvdWRFdmVudHMgc3BlY2lmaWNhdGlvbl1bQ2xvdWRFdmVudHNdLCB0aGUgYXR0cmlidXRlcyBmb3JtIGEKZmxhdCBsaXN0IGFuZCBleHRlbnNpb24gYXR0cmlidXRlcyBhcmUgYWxsb3dlZC4gQXR0cmlidXRlIG5hbWVzIGFyZSByZXN0cmljdGVkCnRvIGxvd2VyLWNhc2UgYWxwaGFudW1lcmljYWwgY2hhcmFjdGVycyB3aXRob3V0IHNlcGFyYXRvcnMuCgpUaGUgYmFzZSBhdHRyaWJ1dGVzIGFyZSBkZWZpbmVkIGFzIGZvbGxvd3M6Cgp8IEF0dHJpYnV0ZSAgICAgICAgIHwgVHlwZSAgICAgICAgICB8CnwgLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tIHwKfCBgc3BlY3ZlcnNpb25gICAgICB8IGBzdHJpbmdgICAgICAgfAp8IGBpZGAgICAgICAgICAgICAgIHwgYHN0cmluZ2AgICAgICB8CnwgYHR5cGVgICAgICAgICAgICAgfCBgc3RyaW5nYCAgICAgIHwKfCBgc291cmNlYCAgICAgICAgICB8IGB1cml0ZW1wbGF0ZWAgfAp8IGBzdWJqZWN0YCAgICAgICAgIHwgYHN0cmluZ2AgICAgICB8CnwgYHRpbWVgICAgICAgICAgICAgfCBgdGltZXN0YW1wYCAgIHwKfCBgZGF0YXNjaGVtYWAgICAgICB8IGB1cml0ZW1wbGF0ZWAgfAp8IGBkYXRhY29udGVudHR5cGVgIHwgYHN0cmluZ2AgICAgICB8CgpUaGUgZm9sbG93aW5nIHJ1bGVzIGFwcGx5IHRvIHRoZSBhdHRyaWJ1dGUgZGVjbGFyYXRpb25zOgoKLSBBbGwgYXR0cmlidXRlIGRlY2xhcmF0aW9ucyBhcmUgT1BUSU9OQUwuIFJlcXVpcmVtZW50cyBmb3IgYWJzZW50CiAgZGVmaW5pdGlvbnMgYXJlIGltcGxpZWQgYnkgdGhlIENsb3VkRXZlbnRzIHNwZWNpZmljYXRpb24uCi0gVGhlIGBzcGVjdmVyc2lvbmAgYXR0cmlidXRlIGlzIGltcGxpZWQgYnkgdGhlIG1lc3NhZ2UgZW52ZWxvcGUgYW5kIGlzCiAgT1BUSU9OQUwuIElmIHByZXNlbnQsIGl0IE1VU1QgYmUgZGVjbGFyZWQgd2l0aCBhIGBzdHJpbmdgIHR5cGUgYW5kIHNldCB0byB0aGUKICB2YWx1ZSAiMS4wIi4KLSBUaGUgYHR5cGVgLCBgaWRgLCBhbmQgYHNvdXJjZWAgYXR0cmlidXRlcyBpbXBsaWNpdGx5IGhhdmUgdGhlIGByZXF1aXJlZGAgZmxhZwogIHNldCB0byBgdHJ1ZWAgYW5kIE1VU1QgTk9UIGJlIGRlY2xhcmVkIGFzIGByZXF1aXJlZDogZmFsc2VgLgotIFRoZSBgaWRgIGF0dHJpYnV0ZSdzIGB2YWx1ZWAgU0hPVUxEIE5PVCBiZSBkZWZpbmVkLgotIFRoZSBgdGltZWAgYXR0cmlidXRlJ3MgYHZhbHVlYCBkZWZhdWx0IHZhbHVlIE1VU1QgYmUgYDAwMDAtMDEtMDFUMDA6MDA6MDBaYAogICgiY3VycmVudCB0aW1lIikgYW5kIFNIT1VMRCBOT1QgYmUgZGVjbGFyZWQgd2l0aCBhIGRpZmZlcmVudCB2YWx1ZS4KLSBUaGUgYGRhdGFjb250ZW50dHlwZWAgYXR0cmlidXRlJ3MgYHZhbHVlYCBpcyBpbmZlcnJlZCBmcm9tIHRoZQogIFtgZGF0YXNjaGVtYWZvcm1hdGBdKCNkYXRhc2NoZW1hZm9ybWF0KSBhdHRyaWJ1dGUgb2YgdGhlIG1lc3NhZ2UgZGVmaW5pdGlvbgogIGlmIGFic2VudC4KLSBUaGUgYGRhdGFzY2hlbWFgIGF0dHJpYnV0ZSdzIGB2YWx1ZWAgaXMgaW5mZXJyZWQgZnJvbSB0aGUKICBbYGRhdGFzY2hlbWF1cmlgXSgjZGF0YXNjaGVtYXVyaSkgYXR0cmlidXRlIG9yCiAgW2BkYXRhc2NoZW1hYF0oI2RhdGFzY2hlbWEpIGF0dHJpYnV0ZSBvZiB0aGUgbWVzc2FnZSBkZWZpbml0aW9uIGlmCiAgYWJzZW50LiBJZiBwcmVzZW50LCB0aGUgdmFsdWUgTVVTVCBtYXRjaCB0aGUgYGRhdGFzY2hlbWF1cmlgIGF0dHJpYnV0ZSBvZiB0aGUKICBtZXNzYWdlIGRlZmluaXRpb24uCi0gVGhlIGB0eXBlYCBvZiB0aGUgcHJvcGVydHkgZGVmaW5pdGlvbiBkZWZhdWx0cyB0byB0aGUgQ2xvdWRFdmVudHMgdHlwZQogIGRlZmluaXRpb24gZm9yIHRoZSBhdHRyaWJ1dGUsIGlmIGFueS4gVGhlIGB0eXBlYCBvZiBhbiBhdHRyaWJ1dGUgTUFZIGJlCiAgbW9kaWZpZWQgYmUgdG8gZnVydGhlciBjb25zdHJhaW5lZC4gRm9yIGluc3RhbmNlLCB0aGUgYHNvdXJjZWAgdHlwZQogIGB1cmlyZWZlcmVuY2VgIE1BWSBiZSBjaGFuZ2VkIHRvCiAgYHVyaXRlbXBsYXRlYCBvciB0aGUgYHN1YmplY3RgIHR5cGUgYHN0cmluZ2AgTUFZIGJlIGNvbnN0cmFpbmVkIHRvIGEKICBgdXJpcmVmZXJlbmNlYCBvciBgc3RyaW5naWZpZWQgaW50ZWdlcmAuIElmIG5vIENsb3VkRXZlbnRzIHR5cGUgZGVmaW5pdGlvbgogIGV4aXN0cywgdGhlIGRlZmF1bHQgdmFsdWUgTVVTVCBiZSBgc3RyaW5nYC4KClRoZSB2YWx1ZXMgb2YgYWxsIGBzdHJpbmdgIGFuZCBgdXJpdGVtcGxhdGVgLXR5cGVkIGF0dHJpYnV0ZXMgTUFZIGNvbnRhaW4KcGxhY2Vob2xkZXJzIHVzaW5nIHRoZSBbUkZDNjU3MF1bUkZDNjU3MF0gTGV2ZWwgMSBVUkkgVGVtcGxhdGUgc3ludGF4LiBXaGVuIHRoZQpzYW1lIHBsYWNlaG9sZGVyIGlzIHVzZWQgaW4gbXVsdGlwbGUgcHJvcGVydGllcywgdGhlIHZhbHVlIG9mIHRoZSBwbGFjZWhvbGRlciBpcwphc3N1bWVkIHRvIGJlIGlkZW50aWNhbC4KClRoZSBmb2xsb3dpbmcgc2hvd3MgdGhlIGZvcm1hdCBvZiBhIENsb3VkRXZlbnRzICJlbnZlbG9wZW1ldGFkYXRhIiBzZWN0aW9uIGZvcgphIG1lc3NhZ2UgKHNlZSB0aGUgW21vZGVsIGZpbGVdKG1vZGVsLmpzb24pIGZvciB0aGUgY29tcGxldGUgZGVmaW5pdGlvbik6CgpgYGB5YW1sCiJlbnZlbG9wZSI6ICJDbG91ZEV2ZW50cy8xLjAiLAoiZW52ZWxvcGVtZXRhZGF0YSIgewogICMgIkNsb3VkRXZlbnRzLzEuMCIgZW52ZWxvcGUgbWV0YWRhdGEKICAic3BlY3ZlcnNpb24iOiB7CiAgICAidmFsdWUiOiAiMS4wIiwKICAgICJ0eXBlIjogInN0cmluZyIKICB9LAogICJpZCI6IHsKICAgICJ2YWx1ZSI6ICJTVFJJTkciLCA/CiAgICAidHlwZSI6ICJzdHJpbmciLCA/CiAgfSwKICAidHlwZSI6IHsKICAgICJ2YWx1ZSI6ICJTVFJJTkciLCA/CiAgICAidHlwZSI6ICJzdHJpbmciLCA/CiAgfSwKICAic291cmNlIjogewogICAgInZhbHVlIjogIlNUUklORyIsID8KICAgICJ0eXBlIjogInN0cmluZyIsID8KICB9LAogICJzdWJqZWN0IjogewogICAgInZhbHVlIjogIlNUUklORyIsID8KICAgICJ0eXBlIjogInN0cmluZyIgPwogIH0sCiAgInRpbWUiOiB7CiAgICAidmFsdWUiOiAiVElNRSIsID8KICAgICJ0eXBlIjogInRpbWVzdGFtcCIgPwogIH0sCiAgImRhdGFzY2hlbWEiOiB7CiAgICAidmFsdWUiOiAiVVJJVEVNUExBVEUiLCA/CiAgICAidHlwZSI6ICJ1cml0ZW1wbGF0ZSIgPwogIH0sCiAgIioiOiB7CiAgICAidmFsdWUiOiBBTlksID8KICAgICJ0eXBlIjogIlRZUEUiCiAgfQp9CmBgYAoKVGhlIGZvbGxvd2luZyBleGFtcGxlIGRlY2xhcmVzIGEgQ2xvdWRFdmVudCB3aXRoIGEgSlNPTiBwYXlsb2FkLiBUaGUgYXR0cmlidXRlCmBpZGAgaXMgUkVRVUlSRUQgaW4gdGhlIGRlY2xhcmVkIGV2ZW50IHBlciB0aGUgQ2xvdWRFdmVudHMgc3BlY2lmaWNhdGlvbiBpbgpzcGl0ZSBvZiBzdWNoIGEgZGVjbGFyYXRpb24gYmVpbmcgYWJzZW50IGhlcmUsIHRoZSBgdHlwZWAgb2YgdGhlIGB0eXBlYAphdHRyaWJ1dGUgaXMgYHN0cmluZ2AgYW5kIHRoZSBhdHRyaWJ1dGUgaXMgYHJlcXVpcmVkYCBldmVuIHRob3VnaCB0aGUKZGVjbGFyYXRpb25zIGFyZSBhYnNlbnQuIFRoZSBgdGltZWAgYXR0cmlidXRlIGlzIG1hZGUgYHJlcXVpcmVkYCBjb250cmFyeSB0byB0aGUKQ2xvdWRFdmVudHMgYmFzZSBzcGVjaWZpY2F0aW9uLiBUaGUgaW1wbGllZCBDbG91ZEV2ZW50cyBgZGF0YWNvbnRlbnR0eXBlYAphdHRyaWJ1dGUgdmFsdWUgaXMgYGFwcGxpY2F0aW9uL2pzb25gIGFuZCB0aGUgaW1wbGllZCBDbG91ZEV2ZW50cyBgZGF0YXNjaGVtYWAKYXR0cmlidXRlIHZhbHVlIGlzIGBodHRwczovL2V4YW1wbGUuY29tL3NjaGVtYXMvY29tLmV4YW1wbGUubXlldmVudC5qc29uYDoKCmBgYHlhbWwKewogICJlbnZlbG9wZSI6ICJDbG91ZEV2ZW50cy8xLjAiLAogICJlbnZlbG9wZW1ldGFkYXRhIjogewogICAgInR5cGUiOiB7CiAgICAgICJ2YWx1ZSI6ICJjb20uZXhhbXBsZS5teWV2ZW50IgogICAgfSwKICAgICJzb3VyY2UiOiB7CiAgICAgICJ2YWx1ZSI6ICJodHRwczovL3t0ZW5hbnR9L3ttb2R1bGV9L215ZXZlbnQiLAogICAgICAidHlwZSI6ICJ1cml0ZW1wbGF0ZSIKICAgIH0sCiAgICAic3ViamVjdCI6IHsKICAgICAgInR5cGUiOiAidXJpcmVmZXJlbmNlIgogICAgfSwKICAgICJ0aW1lIjogewogICAgICAicmVxdWlyZWQiOiB0cnVlCiAgICB9LAogIH0sCiAgImRhdGFzY2hlbWFmb3JtYXQiOiAiSnNvblNjaGVtYS9kcmFmdC0wNyIsCiAgImRhdGFzY2hlbWF1cmkiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9zY2hlbWFzL2NvbS5leGFtcGxlLm15ZXZlbnQuanNvbiIsCn0KYGBgCgpGb3IgY2xhcml0eSBvZiB0aGUgZGVmaW5pdGlvbiwgeW91IE1BWSBhbHdheXMgZGVjbGFyZSBhbGwgaW1wbGllZCBhdHRyaWJ1dGUKcHJvcGVydGllcyBleHBsaWNpdGx5LCBidXQgdGhleSBNVVNUIGNvbmZvcm0gd2l0aCB0aGUgcnVsZXMgYWJvdmUuCgojIyMjIE1lc3NhZ2UgUHJvdG9jb2xzCgojIyMjIyAiSFRUUC8xLjEiLCAiSFRUUC8yIiwgIkhUVFAvMyIgcHJvdG9jb2xzCgpUaGUgIkhUVFAiIHByb3RvY29sIGlzIHVzZWQgdG8gZGVmaW5lIG1lc3NhZ2VzIHRoYXQgYXJlIHNlbnQgb3ZlciBhbiBIVFRQCmNvbm5lY3Rpb24uIFRoZSBwcm90b2NvbCBpcyBiYXNlZCBvbiB0aGUKW0hUVFAgTWVzc2FnZSBGb3JtYXRdW0hUVFAgTWVzc2FnZSBGb3JtYXRdIGFuZCBpcyBjb21tb24gYWNyb3NzIGFsbCB2ZXJzaW9ucyBvZgpIVFRQLgoKVGhlIFtgcHJvdG9jb2xvcHRpb25zYF0oI3Byb3RvY29sb3B0aW9ucykgb2JqZWN0IE1BWSBjb250YWluIHNldmVyYWwKcHJvcGVydGllczoKCnwgUHJvcGVydHkgIHwgVHlwZSAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgfAp8IC0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwKfCBgaGVhZGVyc2AgfCBBcnJheSAgICAgICAgIHwgVGhlIEhUVFAgaGVhZGVycy4gU2VlIGJlbG93LiB8CnwgYHF1ZXJ5YCAgIHwgTWFwICAgICAgICAgICB8IFRoZSBIVFRQIHF1ZXJ5IHBhcmFtZXRlcnMuICAgfAp8IGBwYXRoYCAgICB8IGB1cml0ZW1wbGF0ZWAgfCBUaGUgSFRUUCBwYXRoLiAgICAgICAgICAgICAgIHwKfCBgbWV0aG9kYCAgfCBgc3RyaW5nYCAgICAgIHwgVGhlIEhUVFAgbWV0aG9kICAgICAgICAgICAgICB8CnwgYHN0YXR1c2AgIHwgYHN0cmluZ2AgICAgICB8IFRoZSBIVFRQIHN0YXR1cyBjb2RlICAgICAgICAgfAoKSFRUUCBhbGxvd3MgZm9yIG11bHRpcGxlIGhlYWRlcnMgd2l0aCB0aGUgc2FtZSBuYW1lLiBUaGUgYGhlYWRlcnNgIHByb3BlcnR5IGlzCnRoZXJlZm9yZSBhbiBhcnJheSBvZiBvYmplY3RzIHdpdGggYG5hbWVgIGFuZCBgdmFsdWVgIHByb3BlcnRpZXMuIFRoZSBgbmFtZWAKcHJvcGVydHkgaXMgYSBzdHJpbmcgdGhhdCBNVVNUIGJlIGEgdmFsaWQgSFRUUCBoZWFkZXIgbmFtZS4KClRoZSBgcXVlcnlgIHByb3BlcnR5IGlzIGEgbWFwIG9mIHN0cmluZyBrZXlzIHRvIHN0cmluZyB2YWx1ZXMuCgpUaGUgYHBhdGhgIHByb3BlcnR5IGlzIGEgVVJJIHRlbXBsYXRlLgoKVGhlIGBtZXRob2RgIHByb3BlcnR5IGlzIGEgc3RyaW5nIHRoYXQgTVVTVCBiZSBhIHZhbGlkIEhUVFAgbWV0aG9kLgoKVGhlIGBzdGF0dXNgIHByb3BlcnR5IGlzIGEgc3RyaW5nIHRoYXQgTVVTVCBiZSBhIHZhbGlkIEhUVFAgcmVzcG9uc2UKY29kZS4gVGhlIGBzdGF0dXNgIGFuZCBgbWV0aG9kYCBwcm9wZXJ0aWVzIGFyZSBtdXR1YWxseSBleGNsdXNpdmUgYW5kCk1VU1QgTk9UIGJlIHByZXNlbnQgYXQgdGhlIHNhbWUgdGltZS4KClRoZSB2YWx1ZXMgb2YgYWxsIGBzdHJpbmdgIGFuZCBgdXJpdGVtcGxhdGVgLXR5cGVkIHByb3BlcnRpZXMgYW5kIGhlYWRlcnMgYW5kCnF1ZXJ5IGVsZW1lbnRzIE1BWSBjb250YWluIHBsYWNlaG9sZGVycyB1c2luZyB0aGUgW1JGQzY1NzBdW1JGQzY1NzBdIExldmVsIDEgVVJJClRlbXBsYXRlIHN5bnRheC4gV2hlbiB0aGUgc2FtZSBwbGFjZWhvbGRlciBpcyB1c2VkIGluIG11bHRpcGxlIHByb3BlcnRpZXMsIHRoZQp2YWx1ZSBvZiB0aGUgcGxhY2Vob2xkZXIgaXMgYXNzdW1lZCB0byBiZSBpZGVudGljYWwuCgpUaGUgZm9sbG93aW5nIGV4YW1wbGUgZGVmaW5lcyBhIG1lc3NhZ2UgdGhhdCBpcyBzZW50IG92ZXIgSFRUUC8xLjE6CgpgYGB5YW1sCnsKICAicHJvdG9jb2wiOiAiSFRUUCIsCiAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICJoZWFkZXJzIjogWwogICAgICB7CiAgICAgICAgIm5hbWUiOiAiQ29udGVudC1UeXBlIiwKICAgICAgICAidmFsdWUiOiAiYXBwbGljYXRpb24vanNvbiIKICAgICAgfQogICAgXSwKICAgICJxdWVyeSI6IFsKICAgICAgewogICAgICAgICJuYW1lIjogImZvbyIsCiAgICAgICAgInZhbHVlIjogImJhciIKICAgICAgfQogICAgXSwKICAgICJwYXRoIjogIi9mb28ve2Jhcn0iLAogICAgIm1ldGhvZCI6ICJQT1NUIgogIH0sCiAgImRhdGFzY2hlbWFmb3JtYXQiOiAiSnNvblNjaGVtYS9kcmFmdC0wNyIsCiAgImRhdGFzY2hlbWF1cmkiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9zY2hlbWFzL2NvbS5leGFtcGxlLm15ZXZlbnQuanNvbiIsCn0KYGBgCgojIyMjIyAiQU1RUC8xLjAiIHByb3RvY29sCgpUaGUgIkFNUVAvMS4wIiBwcm90b2NvbCBpcyB1c2VkIHRvIGRlZmluZSBtZXNzYWdlcyB0aGF0IGFyZSBzZW50IG92ZXIgYW4KW0FNUVBdW0FNUVAgMS4wXSBjb25uZWN0aW9uLiBJdCBpcyBiYXNlZCBvbiB0aGUgZGVmYXVsdApbQU1RUCAxLjAgTWVzc2FnZSBGb3JtYXRdW0FNUVAgMS4wIE1lc3NhZ2UgRm9ybWF0XS4KClRoZSBbYHByb3RvY29sb3B0aW9uc2BdKCNwcm90b2NvbG9wdGlvbnMpIG9iamVjdCBNQVkgY29udGFpbiBzZXZlcmFsCnByb3BlcnRpZXMsIGVhY2ggb2Ygd2hpY2ggY29ycmVzcG9uZHMgdG8gYSBzZWN0aW9uIG9mIHRoZSBBTVFQIDEuMCBNZXNzYWdlOgoKfCBQcm9wZXJ0eSAgICAgICAgICAgICAgICAgfCBUeXBlIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfAp8IGBwcm9wZXJ0aWVzYCAgICAgICAgICAgICB8IE1hcCAgfCBUaGUgQU1RUCAxLjAgW01lc3NhZ2UgUHJvcGVydGllc11bQU1RUCAxLjAgTWVzc2FnZSBQcm9wZXJ0aWVzXSBzZWN0aW9uLiAgICAgICAgIHwKfCBgYXBwbGljYXRpb24tcHJvcGVydGllc2AgfCBNYXAgIHwgVGhlIEFNUVAgMS4wIFtBcHBsaWNhdGlvbiBQcm9wZXJ0aWVzXVtBTVFQIDEuMCBBcHBsaWNhdGlvbiBQcm9wZXJ0aWVzXSBzZWN0aW9uLiB8CnwgYG1lc3NhZ2UtYW5ub3RhdGlvbnNgICAgIHwgTWFwICB8IFRoZSBBTVFQIDEuMCBbTWVzc2FnZSBBbm5vdGF0aW9uc11bQU1RUCAxLjAgTWVzc2FnZSBBbm5vdGF0aW9uc10gc2VjdGlvbi4gICAgICAgfAp8IGBkZWxpdmVyeS1hbm5vdGF0aW9uc2AgICB8IE1hcCAgfCBUaGUgQU1RUCAxLjAgW0RlbGl2ZXJ5IEFubm90YXRpb25zXVtBTVFQIDEuMCBEZWxpdmVyeSBBbm5vdGF0aW9uc10gc2VjdGlvbi4gICAgIHwKfCBgaGVhZGVyYCAgICAgICAgICAgICAgICAgfCBNYXAgIHwgVGhlIEFNUVAgMS4wIFtNZXNzYWdlIEhlYWRlcl1bQU1RUCAxLjAgTWVzc2FnZSBIZWFkZXJdIHNlY3Rpb24uICAgICAgICAgICAgICAgICB8CnwgYGZvb3RlcmAgICAgICAgICAgICAgICAgIHwgTWFwICB8IFRoZSBBTVFQIDEuMCBbTWVzc2FnZSBGb290ZXJdW0FNUVAgMS4wIE1lc3NhZ2UgRm9vdGVyXSBzZWN0aW9uLiAgICAgICAgICAgICAgICAgfAoKQXMgaW4gQU1RUCwgYWxsIHNlY3Rpb25zIGFuZCBwcm9wZXJ0aWVzIGFyZSBPUFRJT05BTC4KClRoZSB2YWx1ZXMgb2YgYWxsIGBzdHJpbmdgLCBgc3ltYm9sYCwgYHVyaWAsIGFuZCBgdXJpdGVtcGxhdGVgLXR5cGVkIHByb3BlcnRpZXMKTUFZIGNvbnRhaW4gcGxhY2Vob2xkZXJzIHVzaW5nIHRoZSBbUkZDNjU3MF1bUkZDNjU3MF0gTGV2ZWwgMSBVUkkgVGVtcGxhdGUKc3ludGF4LiBXaGVuIHRoZSBzYW1lIHBsYWNlaG9sZGVyIGlzIHVzZWQgaW4gbXVsdGlwbGUgcHJvcGVydGllcywgdGhlIHZhbHVlIG9mCnRoZSBwbGFjZWhvbGRlciBpcyBhc3N1bWVkIHRvIGJlIGlkZW50aWNhbC4KCkV4YW1wbGUgZm9yIGFuIEFNUVAgMS4wIG1lc3NhZ2UgdHlwZSB0aGF0IGRlY2xhcmVzIGEgZml4ZWQgYHN1YmplY3RgIChhbmFsb2dvdXMKdG8gQ2xvdWRFdmVudHMnIGB0eXBlYCksIGEgY3VzdG9tIHByb3BlcnR5LCBhbmQgYSBgY29udGVudC10eXBlYCBvZgpgYXBwbGljYXRpb24vanNvbmAgd2l0aG91dCBkZWNsYXJpbmcgYSBzY2hlbWEgcmVmZXJlbmNlIGluIHRoZSBtZXNzYWdlCmRlZmluaXRpb246CgpgYGB5YW1sCnsKICAicHJvdG9jb2wiOiAiQU1RUC8xLjAiLAogICJwcm90b2NvbG9wdGlvbnMiOiB7CiAgICAicHJvcGVydGllcyI6IHsKICAgICAgIm1lc3NhZ2UtaWQiOiB7CiAgICAgICAgInJlcXVpcmVkIjogdHJ1ZQogICAgICB9LAogICAgICAidG8iOiB7CiAgICAgICAgInZhbHVlIjogImh0dHBzOi8ve2hvc3R9L3txdWV1ZX0iCiAgICAgIH0sCiAgICAgICJzdWJqZWN0IjogewogICAgICAgICJ2YWx1ZSI6ICJNeU1lc3NhZ2VUeXBlIiwKICAgICAgICAicmVxdWlyZWQiOiB0cnVlCiAgICAgIH0sCiAgICAgICJjb250ZW50LXR5cGUiOiB7CiAgICAgICAgInZhbHVlIjogImFwcGxpY2F0aW9uL2pzb24iCiAgICAgIH0sCiAgICAgICJjb250ZW50LWVuY29kaW5nIjogewogICAgICAgICJ2YWx1ZSI6ICJnemlwIgogICAgICB9CiAgICB9LAogICAgImFwcGxpY2F0aW9uLXByb3BlcnRpZXMiOiB7CiAgICAgICJteS1hcHBsaWNhdGlvbi1wcm9wZXJ0eSI6IHsKICAgICAgICAidmFsdWUiOiAibXktYXBwbGljYXRpb24tcHJvcGVydHktdmFsdWUiCiAgICAgIH0KICAgIH0KICB9Cn0KYGBgCgojIyMjIyBgcHJvcGVydGllc2AgKEFNUVAgMS4wKQoKVGhlIGBwcm9wZXJ0aWVzYCBwcm9wZXJ0eSBpcyBhbiBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgZml4ZWQgcHJvcGVydGllcyBvZiB0aGUKQU1RUCAxLjAgW01lc3NhZ2UgUHJvcGVydGllc11bQU1RUCAxLjAgTWVzc2FnZSBQcm9wZXJ0aWVzXSBzZWN0aW9uLiBUaGUKZm9sbG93aW5nIHByb3BlcnRpZXMgYXJlIGRlZmluZWQsIHdpdGggdHlwZSBjb25zdHJhaW50czoKCnwgUHJvcGVydHkgICAgICAgICAgICAgICB8IFR5cGUgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8CnwgYG1lc3NhZ2UtaWRgICAgICAgICAgICB8IChzZWUgbm90ZSBiZWxvdykgfCB1bmlxdWVseSBpZGVudGlmaWVzIGEgbWVzc2FnZSB3aXRoaW4gdGhlIG1lc3NhZ2Ugc3lzdGVtICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgYHVzZXItaWRgICAgICAgICAgICAgICB8IGBiaW5hcnlgICAgICAgfCBpZGVudGl0eSBvZiB0aGUgdXNlciByZXNwb25zaWJsZSBmb3IgcHJvZHVjaW5nIHRoZSBtZXNzYWdlICAgICAgICAgICAgICAgICAgICAgICB8CnwgYHRvYCAgICAgICAgICAgICAgICAgICB8IGB1cml0ZW1wbGF0ZWAgfCBhZGRyZXNzIG9mIHRoZSBub2RlIHRvIHNlbmQgdGhlIG1lc3NhZ2UgdG8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgYHN1YmplY3RgICAgICAgICAgICAgICB8IGBzdHJpbmdgICAgICAgfCBtZXNzYWdlIHN1YmplY3QgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgYHJlcGx5LXRvYCAgICAgICAgICAgICB8IGB1cml0ZW1wbGF0ZWAgfCBhZGRyZXNzIG9mIHRoZSBub2RlIHRvIHdoaWNoIHRoZSByZWNlaXZlciBvZiB0aGlzIG1lc3NhZ2Ugb3VnaHQgdG8gc2VuZCByZXBsaWVzICB8CnwgYGNvcnJlbGF0aW9uLWlkYCAgICAgICB8IGBzdHJpbmdgICAgICAgfCBjbGllbnQtc3BlY2lmaWMgaWQgdGhhdCBjYW4gYmUgdXNlZCB0byBtYXJrIG9yIGlkZW50aWZ5IG1lc3NhZ2VzIGJldHdlZW4gY2xpZW50cyB8CnwgYGNvbnRlbnQtdHlwZWAgICAgICAgICB8IGBzeW1ib2xgICAgICAgfCBNSU1FIGNvbnRlbnQgdHlwZSBmb3IgdGhlIG1lc3NhZ2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgYGNvbnRlbnQtZW5jb2RpbmdgICAgICB8IGBzeW1ib2xgICAgICAgfCBNSU1FIGNvbnRlbnQgZW5jb2RpbmcgZm9yIHRoZSBtZXNzYWdlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgYGFic29sdXRlLWV4cGlyeS10aW1lYCB8IGB0aW1lc3RhbXBgICAgfCB0aW1lIHdoZW4gdGhpcyBtZXNzYWdlIGlzIGNvbnNpZGVyZWQgZXhwaXJlZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgYGdyb3VwLWlkYCAgICAgICAgICAgICB8IGBzdHJpbmdgICAgICAgfCBncm91cCB0aGlzIG1lc3NhZ2UgYmVsb25ncyB0byAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgYGdyb3VwLXNlcXVlbmNlYCAgICAgICB8IGBpbnRlZ2VyYCAgICAgfCBwb3NpdGlvbiBvZiB0aGlzIG1lc3NhZ2Ugd2l0aGluIGl0cyBncm91cCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgYHJlcGx5LXRvLWdyb3VwLWlkYCAgICB8IGB1cml0ZW1wbGF0ZWAgfCBncm91cC1pZCB0byB3aGljaCB0aGUgcmVjZWl2ZXIgb2YgdGhpcyBtZXNzYWdlIG91Z2h0IHRvIHNlbmQgcmVwbGllcyB0byAgICAgICAgICB8CgpUaGUgYG1lc3NhZ2UtaWRgIHBlcm1pdHMgdGhlIHR5cGVzIGB1bG9uZ2AsIGB1dWlkYCwgYGJpbmFyeWAsIGBzdHJpbmdgLCBhbmQKYHVyaXRlbXBsYXRlYC4gQSBgdmFsdWVgIGNvbnN0cmFpbnQgZm9yIGBtZXNzYWdlLWlkYCBwcm9wZXJ0eSBTSE9VTEQgTk9UIGJlIGRlZmluZWQgaW4KdGhlIG1lc3NhZ2UgZGVmaW5pdGlvbiBleGNlcHQgZm9yIHRoZSBjYXNlIHdoZXJlIHRoZSBgbWVzc2FnZS1pZGAgaXMgYSBgdXJpdGVtcGxhdGVgLgoKIyMjIyMgYGFwcGxpY2F0aW9uLXByb3BlcnRpZXNgIChBTVFQIDEuMCkKClRoZSBgYXBwbGljYXRpb24tcHJvcGVydGllc2AgcHJvcGVydHkgaXMgYSBtYXAgdGhhdCBjb250YWlucyB0aGUgY3VzdG9tCnByb3BlcnRpZXMgb2YgdGhlIEFNUVAgMS4wIFtBcHBsaWNhdGlvbiBQcm9wZXJ0aWVzXVtBTVFQIDEuMCBBcHBsaWNhdGlvbgpQcm9wZXJ0aWVzXSBzZWN0aW9uLgoKVGhlIG5hbWVzIG9mIHRoZSBwcm9wZXJ0aWVzIE1VU1QgYmUgb2YgdHlwZSBgc3ltYm9sYCBhbmQgTVVTVCBiZSB1bmlxdWUuClRoZSB2YWx1ZXMgb2YgdGhlIHByb3BlcnRpZXMgTUFZIGJlIG9mIGFueSBwZXJtaXR0ZWQgdHlwZS4KCiMjIyMjIGBtZXNzYWdlLWFubm90YXRpb25zYCAoQU1RUCAxLjApCgpUaGUgYG1lc3NhZ2UtYW5ub3RhdGlvbnNgIHByb3BlcnR5IGlzIGEgbWFwIHRoYXQgY29udGFpbnMgdGhlIGN1c3RvbQpwcm9wZXJ0aWVzIG9mIHRoZSBBTVFQIDEuMCBbTWVzc2FnZSBBbm5vdGF0aW9uc11bQU1RUCAxLjAgTWVzc2FnZSBBbm5vdGF0aW9uc10Kc2VjdGlvbi4KClRoZSBuYW1lcyBvZiB0aGUgcHJvcGVydGllcyBNVVNUIGJlIG9mIHR5cGUgYHN5bWJvbGAgYW5kIE1VU1QgYmUgdW5pcXVlLgpUaGUgdmFsdWVzIG9mIHRoZSBwcm9wZXJ0aWVzIE1BWSBiZSBvZiBhbnkgcGVybWl0dGVkIHR5cGUuCgojIyMjIyBgZGVsaXZlcnktYW5ub3RhdGlvbnNgIChBTVFQIDEuMCkKClRoZSBgZGVsaXZlcnktYW5ub3RhdGlvbnNgIHByb3BlcnR5IGlzIGEgbWFwIHRoYXQgY29udGFpbnMgdGhlIGN1c3RvbQpwcm9wZXJ0aWVzIG9mIHRoZSBBTVFQIDEuMApbRGVsaXZlcnkgQW5ub3RhdGlvbnNdW0FNUVAgMS4wIERlbGl2ZXJ5IEFubm90YXRpb25zXSBzZWN0aW9uLgoKVGhlIG5hbWVzIG9mIHRoZSBwcm9wZXJ0aWVzIE1VU1QgYmUgb2YgdHlwZSBgc3ltYm9sYCBhbmQgTVVTVCBiZSB1bmlxdWUuClRoZSB2YWx1ZXMgb2YgdGhlIHByb3BlcnRpZXMgTUFZIGJlIG9mIGFueSBwZXJtaXR0ZWQgdHlwZS4KCiMjIyMjIyBgaGVhZGVyYCAoQU1RUCAxLjApCgpUaGUgYGhlYWRlcmAgcHJvcGVydHkgaXMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIHByb3BlcnRpZXMgb2YgdGhlCkFNUVAgMS4wIFtNZXNzYWdlIEhlYWRlcl1bQU1RUCAxLjAgTWVzc2FnZSBIZWFkZXJdIHNlY3Rpb24uIFRoZQpmb2xsb3dpbmcgcHJvcGVydGllcyBhcmUgZGVmaW5lZCwgd2l0aCB0eXBlIGNvbnN0cmFpbnRzOgoKfCBQcm9wZXJ0eSAgICAgICAgIHwgVHlwZSAgICAgIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAp8IC0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8CnwgYGR1cmFibGVgICAgICAgICB8IGBib29sZWFuYCB8IHNwZWNpZnkgZHVyYWJpbGl0eSByZXF1aXJlbWVudHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCBgcHJpb3JpdHlgICAgICAgIHwgYGludGVnZXJgIHwgcmVsYXRpdmUgbWVzc2FnZSBwcmlvcml0eSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAp8IGB0dGxgICAgICAgICAgICAgfCBgaW50ZWdlcmAgfCBtZXNzYWdlIHRpbWUtdG8tbGl2ZSBpbiBtaWxsaXNlY29uZHMgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgYGZpcnN0LWFjcXVpcmVyYCB8IGBib29sZWFuYCB8IGluZGljYXRlcyB3aGV0aGVyIHRoZSBtZXNzYWdlIGhhcyBub3QgYmVlbiBhY3F1aXJlZCBwcmV2aW91c2x5IHwKfCBgZGVsaXZlcnktY291bnRgIHwgYGludGVnZXJgIHwgbnVtYmVyIG9mIHByaW9yIHVuc3VjY2Vzc2Z1bCBkZWxpdmVyeSBhdHRlbXB0cyAgICAgICAgICAgICAgICAgfAoKIyMjIyMjIGBmb290ZXJgIChBTVFQIDEuMCkKClRoZSBgZm9vdGVyYCBwcm9wZXJ0eSBpcyBhIG1hcCB0aGF0IGNvbnRhaW5zIHRoZSBjdXN0b20gcHJvcGVydGllcyBvZiB0aGUgQU1RUAoxLjAgW01lc3NhZ2UgRm9vdGVyXVtBTVFQIDEuMCBNZXNzYWdlIEZvb3Rlcl0gc2VjdGlvbi4KClRoZSBuYW1lcyBvZiB0aGUgcHJvcGVydGllcyBNVVNUIGJlIG9mIHR5cGUgYHN5bWJvbGAgYW5kIE1VU1QgYmUgdW5pcXVlLgpUaGUgdmFsdWVzIG9mIHRoZSBwcm9wZXJ0aWVzIE1BWSBiZSBvZiBhbnkgcGVybWl0dGVkIHR5cGUuCgojIyMjIyAiTVFUVC8zLjEuMSIgYW5kICJNUVRULzUuMCIgcHJvdG9jb2xzCgpUaGUgIk1RVFQvMy4xLjEiIGFuZCAiTVFUVC81LjAiIHByb3RvY29scyBhcmUgdXNlZCB0byBkZWZpbmUgbWVzc2FnZXMgdGhhdCBhcmUKc2VudCBvdmVyIFtNUVRUIDMuMS4xXVtNUVRUIDMuMS4xXSBvciBbTVFUVCA1LjBdW01RVFQgNS4wXSBjb25uZWN0aW9ucy4gVGhlCmZvcm1hdCBkZXNjcmliZXMgdGhlIFtNUVRUIFBVQkxJU0ggcGFja2V0XVtNUVRUIDUuMF0gY29udGVudC4KClRoZSBbYHByb3RvY29sb3B0aW9uc2BdKCNwcm90b2NvbG9wdGlvbnMpIG9iamVjdCBjb250YWlucyB0aGUgZWxlbWVudHMgb2YgdGhlCk1RVFQgUFVCTElTSCBwYWNrZXQgZGlyZWN0bHksIHdpdGggdGhlIGB1c2VyLXByb3BlcnRpZXNgIGVsZW1lbnQgY29ycmVzcG9uZGluZwp0byB0aGUgYXBwbGljYXRpb24gcHJvcGVydGllcyBjb2xsZWN0aW9uIG9mIG90aGVyIHByb3RvY29scy4KClRoZSBmb2xsb3dpbmcgcHJvcGVydGllcyBhcmUgZGVmaW5lZC4gVGhlIE1RVFQgMy4xLjEgYW5kIE1RVFQgNS4wIGNvbHVtbnMKaW5kaWNhdGUgd2hldGhlciB0aGUgcHJvcGVydHkgaXMgc3VwcG9ydGVkIGZvciB0aGUgcmVzcGVjdGl2ZSBNUVRUIHZlcnNpb24uCgp8IFByb3BlcnR5ICAgICAgICAgICAgICAgICAgfCBUeXBlICAgICAgICAgIHwgTVFUVCAzLjEuMSB8IE1RVFQgNS4wIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgfAp8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLSB8IC0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfAp8IGBxb3NgICAgICAgICAgICAgICAgICAgICAgfCBgaW50ZWdlcmAgICAgIHwgeWVzICAgICAgICB8IHllcyAgICAgIHwgUXVhbGl0eSBvZiBTZXJ2aWNlIGxldmVsICAgICAgICAgfAp8IGByZXRhaW5gICAgICAgICAgICAgICAgICAgfCBgYm9vbGVhbmAgICAgIHwgeWVzICAgICAgICB8IHllcyAgICAgIHwgUmV0YWluIGZsYWcgICAgICAgICAgICAgICAgICAgICAgfAp8IGB0b3BpY19uYW1lYCAgICAgICAgICAgICAgfCBgc3RyaW5nYCAgICAgIHwgeWVzICAgICAgICB8IHllcyAgICAgIHwgVG9waWMgbmFtZSAgICAgICAgICAgICAgICAgICAgICAgfAp8IGBwYXlsb2FkX2Zvcm1hdGAgICAgICAgICAgfCBgaW50ZWdlcmAgICAgIHwgbm8gICAgICAgICB8IHllcyAgICAgIHwgUGF5bG9hZCBmb3JtYXQgaW5kaWNhdG9yICAgICAgICAgfAp8IGBtZXNzYWdlX2V4cGlyeV9pbnRlcnZhbGAgfCBgaW50ZWdlcmAgICAgIHwgbm8gICAgICAgICB8IHllcyAgICAgIHwgTWVzc2FnZSBleHBpcnkgaW50ZXJ2YWwgICAgICAgICAgfAp8IGByZXNwb25zZV90b3BpY2AgICAgICAgICAgfCBgdXJpdGVtcGxhdGVgIHwgbm8gICAgICAgICB8IHllcyAgICAgIHwgUmVzcG9uc2UgdG9waWMgICAgICAgICAgICAgICAgICAgfAp8IGBjb3JyZWxhdGlvbl9kYXRhYCAgICAgICAgfCBgYmluYXJ5YCAgICAgIHwgbm8gICAgICAgICB8IHllcyAgICAgIHwgQ29ycmVsYXRpb24gZGF0YSAgICAgICAgICAgICAgICAgfAp8IGBjb250ZW50X3R5cGVgICAgICAgICAgICAgfCBgc3ltYm9sYCAgICAgIHwgbm8gICAgICAgICB8IHllcyAgICAgIHwgTUlNRSBjb250ZW50IHR5cGUgb2YgdGhlIHBheWxvYWQgfAp8IGB1c2VyX3Byb3BlcnRpZXNgICAgICAgICAgfCBBcnJheSAgICAgICAgIHwgbm8gICAgICAgICB8IHllcyAgICAgIHwgVXNlciBwcm9wZXJ0aWVzICAgICAgICAgICAgICAgICAgfAoKTGlrZSBIVFRQLCB0aGUgTVFUVCBhbGxvd3MgZm9yIG11bHRpcGxlIHVzZXIgcHJvcGVydGllcyB3aXRoIHRoZSBzYW1lIG5hbWUsCnNvIHRoZSBgdXNlcl9wcm9wZXJ0aWVzYCBwcm9wZXJ0eSBpcyBhbiBhcnJheSBvZiBvYmplY3RzLCBlYWNoIG9mIHdoaWNoCmNvbnRhaW5zIGEgc2luZ2xlIHByb3BlcnR5IG5hbWUgYW5kIHZhbHVlLgoKVGhlIHZhbHVlcyBvZiBhbGwgYHN0cmluZ2AsIGBzeW1ib2xgLCBhbmQgYHVyaXRlbXBsYXRlYC10eXBlZCBwcm9wZXJ0aWVzIGFuZAp1c2VyIHByb3BlcnRpZXMgTUFZIGNvbnRhaW4gcGxhY2Vob2xkZXJzIHVzaW5nIHRoZSBbUkZDNjU3MF1bUkZDNjU3MF0gTGV2ZWwgMQpVUkkgVGVtcGxhdGUgc3ludGF4LiBXaGVuIHRoZSBzYW1lIHBsYWNlaG9sZGVyIGlzIHVzZWQgaW4gbXVsdGlwbGUgcHJvcGVydGllcywKdGhlIHZhbHVlIG9mIHRoZSBwbGFjZWhvbGRlciBpcyBhc3N1bWVkIHRvIGJlIGlkZW50aWNhbC4KClRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBhIG1lc3NhZ2Ugd2l0aCB0aGUgIk1RVFQvNS4wIiBwcm90b2NvbCwgYXNraW5nIGZvcgpRb1MgMSBkZWxpdmVyeSwgd2l0aCBhIHRvcGljIG5hbWUgb2YgIm15dG9waWMiLCBhbmQgYSB1c2VyIHByb3BlcnR5IG9mCiJteS1hcHBsaWNhdGlvbi1wcm9wZXJ0eSIgd2l0aCBhIHZhbHVlIG9mICJteS1hcHBsaWNhdGlvbi1wcm9wZXJ0eS12YWx1ZSI6CgpgYGB5YW1sCnsKICAicHJvdG9jb2wiOiAiTVFUVC81LjAiLAogICJwcm90b2NvbG9wdGlvbnMiOiB7CiAgICAicW9zIjogMSwKICAgICJyZXRhaW4iOiAgZmFsc2UsCiAgICAidG9waWNfbmFtZSI6ICJteXRvcGljIiwKICAgICJ1c2VyX3Byb3BlcnRpZXMiOiBbCiAgICAgIHsKICAgICAgICAibmFtZSI6ICJNeSBBcHBsaWNhdGlvbiBQcm9wZXJ0eSIsCiAgICAgICAgInZhbHVlIjogIlZhbHVlIDEiCiAgICAgIH0KICAgIF0KICB9Cn0KYGBgCgojIyMgIktBRktBIiBwcm90b2NvbAoKVGhlICJLQUZLQSIgcHJvdG9jb2wgaXMgdXNlZCB0byBkZWZpbmUgbWVzc2FnZXMgdGhhdCBhcmUgc2VudCB1c2luZyB0aGUgW0FwYWNoZQpLYWZrYV1bQXBhY2hlIEthZmthXSBSUEMgcHJvdG9jb2wuCgpUaGUgW2Bwcm90b2NvbG9wdGlvbnNgXSgjcHJvdG9jb2xvcHRpb25zKSBvYmplY3QgY29udGFpbnMgdGhlIGNvbW1vbiBlbGVtZW50cwpvZiB0aGUgS2Fma2EgW3Byb2R1Y2VyXVtBcGFjaGUgS2Fma2EgcHJvZHVjZXJdIGFuZApbY29uc3VtZXJdW0FwYWNoZSBLYWZrYSBjb25zdW1lcl0gcmVjb3Jkcywgd2l0aCB0aGUgYGhlYWRlcnNgIGVsZW1lbnQKY29ycmVzcG9uZGluZyB0byB0aGUgYXBwbGljYXRpb24gcHJvcGVydGllcyBjb2xsZWN0aW9uIG9mIG90aGVyIHByb3RvY29scy4KClRoZSBmb2xsb3dpbmcgcHJvcGVydGllcyBhcmUgZGVmaW5lZDoKCnwgUHJvcGVydHkgICAgfCBUeXBlICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8CnwgYHRvcGljYCAgICAgfCBgc3RyaW5nYCAgfCBUaGUgdG9waWMgdGhlIHJlY29yZCB3aWxsIGJlIGFwcGVuZGVkIHRvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgYHBhcnRpdGlvbmAgfCBgaW50ZWdlcmAgfCBUaGUgcGFydGl0aW9uIHRvIHdoaWNoIHRoZSByZWNvcmQgaXMgdG8gYmUgc2VudCBvciBoYXMgYmVlbiByZWNlaXZlZCBmcm9tICAgICAgICAgICB8CnwgYGtleWAgICAgICAgfCBgc3RyaW5nYCAgfCBUaGUga2V5IHRoYXQgaXMgYXNzb2NpYXRlZCB3aXRoIHRoZSByZWNvcmQsIFVURi04IGVuY29kZWQgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgYGtleV9iYXNlNjRgfCBgYmluYXJ5YCAgfCBUaGUga2V5IHRoYXQgaXMgYXNzb2NpYXRlZCB3aXRoIHRoZSByZWNvcmQgYXMgYSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcgICAgICAgICAgICAgICB8CnwgYGhlYWRlcnNgICAgfCBNYXAgICAgICAgfCBBIG1hcCBvZiBoZWFkZXJzIHRvIHNldCBvbiB0aGUgcmVjb3JkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CgpUaGUgYGtleWAgYW5kIGBrZXlfYmFzZTY0YCBwcm9wZXJ0aWVzIGFyZSBtdXR1YWxseSBleGNsdXNpdmUgYW5kIE1VU1QgTk9UIGJlCnByZXNlbnQgYXQgdGhlIHNhbWUgdGltZS4KClRoZSBgcGFydGl0aW9uYCBwcm9wZXJ0eSBpcyBpbmNsdWRlZCBiZWNhdXNlIHRoZXJlIGFyZSBjYXNlcyB3aGVyZSBhcHBsaWNhdGlvbnMKdXNlIHBhcnRpdGlvbnMgZXhwbGljaXRseSBmb3IgYWRkcmVzc2luZyBhbmQgcm91dGluZyBtZXNzYWdlcyB3aXRoaW4gdGhlIHNjb3BlCm9mIGEgdG9waWMuCgpUaGUgdmFsdWVzIG9mIGFsbCBgc3RyaW5nYCwgYHN5bWJvbGAsIGB1cml0ZW1wbGF0ZWAtdHlwZWQgcHJvcGVydGllcwphbmQgaGVhZGVycyBNQVkgY29udGFpbiBwbGFjZWhvbGRlcnMgdXNpbmcgdGhlIFtSRkM2NTcwXVtSRkM2NTcwXSBMZXZlbCAxIFVSSQpUZW1wbGF0ZSBzeW50YXguIFdoZW4gdGhlIHNhbWUgcGxhY2Vob2xkZXIgaXMgdXNlZCBpbiBtdWx0aXBsZSBwcm9wZXJ0aWVzLCB0aGUKdmFsdWUgb2YgdGhlIHBsYWNlaG9sZGVyIGlzIGFzc3VtZWQgdG8gYmUgaWRlbnRpY2FsLgoKRXhhbXBsZToKCmBgYHlhbWwKewogICJwcm90b2NvbCI6ICJLYWZrYSIsCiAgInByb3RvY29sb3B0aW9ucyI6IHsKICAgICJ0b3BpYyI6ICJteXRvcGljIiwKICAgICJrZXkiOiAidGhpc2RldmljZSIKICB9Cn0KYGBgCgojIyMgIk5BVFMiIHByb3RvY29sCgpUaGUgIk5BVFMiIHByb3RvY29sIGlzIHVzZWQgdG8gZGVmaW5lIG1lc3NhZ2VzIHRoYXQgYXJlIHNlbnQgdXNpbmcgdGhlIFtOQVRTXVtOQVRTXSBwcm90b2NvbC4KClRoZSBbYHByb3RvY29sb3B0aW9uc2BdKCNwcm90b2NvbG9wdGlvbnMpIG9iamVjdCBjb250YWlucyB0aGUgYXZhaWxhYmxlIGVsZW1lbnRzCm9mIHRoZSBOQVRTIG1lc3NhZ2UgZm9yIHRoZSBgSFBVQmAgb3BlcmF0aW9uLgoKVGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIGFyZSBkZWZpbmVkOgoKfCBQcm9wZXJ0eSAgICB8IFR5cGUgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCAtLS0tLS0tLS0tLSB8IC0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwKfCBgc3ViamVjdGAgICB8IGB1cml0ZW1wbGF0ZWAgIHwgVGhlIHN1YmplY3QgdGhlIG1lc3NhZ2Ugd2lsbCBiZSBwdWJsaXNoZWQgdG8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCBgcmVwbHktdG9gICB8IGB1cml0ZW1wbGF0ZWAgIHwgVGhlIHN1YmplY3QgdGhlIHJlY2VpdmVyIG91Z2h0IHRvIHJlcGx5IHRvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCBgaGVhZGVyc2AgICB8IEFycmF5ICAgICB8IEEgbGlzdCBvZiBoZWFkZXJzIHRvIHNldCBvbiB0aGUgbWVzc2FnZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKClRoZSB2YWx1ZXMgb2YgYWxsIGBzdHJpbmdgLCBgc3ltYm9sYCwgYHVyaXRlbXBsYXRlYC10eXBlZCBwcm9wZXJ0aWVzCmFuZCBoZWFkZXJzIE1BWSBjb250YWluIHBsYWNlaG9sZGVycyB1c2luZyB0aGUgW1JGQzY1NzBdW1JGQzY1NzBdIExldmVsIDEgVVJJClRlbXBsYXRlIHN5bnRheC4gV2hlbiB0aGUgc2FtZSBwbGFjZWhvbGRlciBpcyB1c2VkIGluIG11bHRpcGxlIHByb3BlcnRpZXMsIHRoZQp2YWx1ZSBvZiB0aGUgcGxhY2Vob2xkZXIgaXMgYXNzdW1lZCB0byBiZSBpZGVudGljYWwuCgpFeGFtcGxlOgoKYGBgeWFtbAp7CiAgInByb3RvY29sIjogIk5BVFMiLAogICJwcm90b2NvbG9wdGlvbnMiOiB7CiAgICAic3ViamVjdCI6ICJteXRvcGljIiwKICAgICJyZXBseS10byI6ICJyZXBseXRvcGljIgogIH0KfQpgYGAKCgpbSlNPTiBQb2ludGVyXTogaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzY5MDEKW0Nsb3VkRXZlbnRzIFR5cGVzXTogaHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkZXZlbnRzL3NwZWMvYmxvYi92MS4wLjIvY2xvdWRldmVudHMvc3BlYy5tZCN0eXBlLXN5c3RlbQpbQU1RUCAxLjBdOiBodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvYW1xcC9jb3JlL3YxLjAvb3MvYW1xcC1jb3JlLW92ZXJ2aWV3LXYxLjAtb3MuaHRtbApbQU1RUCAxLjAgTWVzc2FnZSBGb3JtYXRdOiBodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9hbXFwL2NvcmUvdjEuMC9vcy9hbXFwLWNvcmUtbWVzc2FnaW5nLXYxLjAtb3MuaHRtbCNzZWN0aW9uLW1lc3NhZ2UtZm9ybWF0CltBTVFQIDEuMCBNZXNzYWdlIFByb3BlcnRpZXNdOiBodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9hbXFwL2NvcmUvdjEuMC9vcy9hbXFwLWNvcmUtbWVzc2FnaW5nLXYxLjAtb3MuaHRtbCN0eXBlLXByb3BlcnRpZXMKW0FNUVAgMS4wIEFwcGxpY2F0aW9uIFByb3BlcnRpZXNdOiBodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9hbXFwL2NvcmUvdjEuMC9vcy9hbXFwLWNvcmUtbWVzc2FnaW5nLXYxLjAtb3MuaHRtbCN0eXBlLWFwcGxpY2F0aW9uLXByb3BlcnRpZXMKW0FNUVAgMS4wIE1lc3NhZ2UgQW5ub3RhdGlvbnNdOiBodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9hbXFwL2NvcmUvdjEuMC9vcy9hbXFwLWNvcmUtbWVzc2FnaW5nLXYxLjAtb3MuaHRtbCN0eXBlLW1lc3NhZ2UtYW5ub3RhdGlvbnMKW0FNUVAgMS4wIERlbGl2ZXJ5IEFubm90YXRpb25zXTogaHR0cDovL2RvY3Mub2FzaXMtb3Blbi5vcmcvYW1xcC9jb3JlL3YxLjAvb3MvYW1xcC1jb3JlLW1lc3NhZ2luZy12MS4wLW9zLmh0bWwjdHlwZS1kZWxpdmVyeS1hbm5vdGF0aW9ucwpbQU1RUCAxLjAgTWVzc2FnZSBIZWFkZXJdOiBodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9hbXFwL2NvcmUvdjEuMC9vcy9hbXFwLWNvcmUtbWVzc2FnaW5nLXYxLjAtb3MuaHRtbCN0eXBlLWhlYWRlcgpbQU1RUCAxLjAgTWVzc2FnZSBGb290ZXJdOiBodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9hbXFwL2NvcmUvdjEuMC9vcy9hbXFwLWNvcmUtbWVzc2FnaW5nLXYxLjAtb3MuaHRtbCN0eXBlLWZvb3RlcgpbTVFUVCA1LjBdOiBodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbXF0dC9tcXR0L3Y1LjAvbXF0dC12NS4wLmh0bWwKW01RVFQgMy4xLjFdOiBodHRwczovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbXF0dC9tcXR0L3YzLjEuMS9tcXR0LXYzLjEuMS5odG1sCltDbG91ZEV2ZW50c106IGh0dHBzOi8vZ2l0aHViLmNvbS9jbG91ZGV2ZW50cy9zcGVjL2Jsb2IvbWFpbi9jbG91ZGV2ZW50cy9zcGVjLm1kCltDbG91ZEV2ZW50cyBTdWJzY3JpcHRpb25zIEFQSV06IGh0dHBzOi8vZ2l0aHViLmNvbS9jbG91ZGV2ZW50cy9zcGVjL2Jsb2IvbWFpbi9zdWJzY3JpcHRpb25zL3NwZWMubWQKW05BVFNdOiBodHRwczovL2RvY3MubmF0cy5pby9yZWZlcmVuY2UvcmVmZXJlbmNlLXByb3RvY29scy9uYXRzLXByb3RvY29sCltBcGFjaGUgS2Fma2FdOiBodHRwczovL2thZmthLmFwYWNoZS5vcmcvcHJvdG9jb2wKW0FwYWNoZSBLYWZrYSBwcm9kdWNlcl06IGh0dHBzOi8va2Fma2EuYXBhY2hlLm9yZy8zMS9qYXZhZG9jL29yZy9hcGFjaGUva2Fma2EvY2xpZW50cy9wcm9kdWNlci9Qcm9kdWNlclJlY29yZC5odG1sCltBcGFjaGUgS2Fma2EgY29uc3VtZXJdOiBodHRwczovL2thZmthLmFwYWNoZS5vcmcvMzEvamF2YWRvYy9vcmcvYXBhY2hlL2thZmthL2NsaWVudHMvY29uc3VtZXIvQ29uc3VtZXJSZWNvcmQuaHRtbApbSFRUUCBNZXNzYWdlIEZvcm1hdF06IGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM5MTEwI3NlY3Rpb24tNgpbUkZDNjU3MF06IGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM2NTcwCltyZmMzMzM5XTogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzMzMzkKW21lc3NhZ2VdOiBodHRwczovL2dpdGh1Yi5jb20vY2xvdWRldmVudHMvc3BlYy9ibG9iL21haW4vY2xvdWRldmVudHMvc3BlYy5tZCNtZXNzYWdlCltTT0FQXTogaHR0cHM6Ly93d3cudzMub3JnL1RSL3NvYXAxMi1wYXJ0MS8K"
            }
          },
          "versionscount": 1
        }
      },
      "docscount": 2,
      "samplesurl": "#/specs/message-v1/samples",
      "samples": {},
      "samplescount": 0,
      "schemasurl": "#/specs/message-v1/schemas",
      "schemas": {
        "document-schema.avsc": {
          "schemaid": "document-schema.avsc",
          "self": "#/specs/message-v1/schemas/document-schema.avsc",
          "xid": "/specs/message-v1/schemas/document-schema.avsc",
          "metaurl": "#/specs/message-v1/schemas/document-schema.avsc/meta",
          "meta": {
            "schemaid": "document-schema.avsc",
            "self": "#/specs/message-v1/schemas/document-schema.avsc/meta",
            "xid": "/specs/message-v1/schemas/document-schema.avsc/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:09.798873738Z",
            "modifiedat": "2025-04-22T02:33:09.798873738Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/message-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/message-v1/schemas/document-schema.avsc/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.avsc",
              "versionid": "v1.0-rc1",
              "self": "#/specs/message-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "xid": "/specs/message-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:09.798873738Z",
              "modifiedat": "2025-04-22T02:33:09.798873738Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "document-schema.json": {
          "schemaid": "document-schema.json",
          "self": "#/specs/message-v1/schemas/document-schema.json",
          "xid": "/specs/message-v1/schemas/document-schema.json",
          "metaurl": "#/specs/message-v1/schemas/document-schema.json/meta",
          "meta": {
            "schemaid": "document-schema.json",
            "self": "#/specs/message-v1/schemas/document-schema.json/meta",
            "xid": "/specs/message-v1/schemas/document-schema.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:09.906305155Z",
            "modifiedat": "2025-04-22T02:33:09.906305155Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/message-v1/schemas/document-schema.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/message-v1/schemas/document-schema.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/message-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "xid": "/specs/message-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:09.906305155Z",
              "modifiedat": "2025-04-22T02:33:09.906305155Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "openapi.json": {
          "schemaid": "openapi.json",
          "self": "#/specs/message-v1/schemas/openapi.json",
          "xid": "/specs/message-v1/schemas/openapi.json",
          "metaurl": "#/specs/message-v1/schemas/openapi.json/meta",
          "meta": {
            "schemaid": "openapi.json",
            "self": "#/specs/message-v1/schemas/openapi.json/meta",
            "xid": "/specs/message-v1/schemas/openapi.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:10.018873232Z",
            "modifiedat": "2025-04-22T02:33:10.018873232Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/message-v1/schemas/openapi.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/message-v1/schemas/openapi.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "openapi.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/message-v1/schemas/openapi.json/versions/v1.0-rc1",
              "xid": "/specs/message-v1/schemas/openapi.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:10.018873232Z",
              "modifiedat": "2025-04-22T02:33:10.018873232Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "schemascount": 3
    },
    "pagination-v1": {
      "specid": "pagination-v1",
      "self": "#/specs/pagination-v1",
      "xid": "/specs/pagination-v1",
      "epoch": 1,
      "createdat": "2025-04-22T02:33:10.71424167Z",
      "modifiedat": "2025-04-22T02:33:10.71424167Z",
      "docsurl": "#/specs/pagination-v1/docs",
      "docs": {
        "spec.md": {
          "docid": "spec.md",
          "self": "#/specs/pagination-v1/docs/spec.md",
          "xid": "/specs/pagination-v1/docs/spec.md",
          "metaurl": "#/specs/pagination-v1/docs/spec.md/meta",
          "meta": {
            "docid": "spec.md",
            "self": "#/specs/pagination-v1/docs/spec.md/meta",
            "xid": "/specs/pagination-v1/docs/spec.md/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:10.71424167Z",
            "modifiedat": "2025-04-22T02:33:10.71424167Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/pagination-v1/docs/spec.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/pagination-v1/docs/spec.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "spec.md",
              "versionid": "v1.0-rc1",
              "self": "#/specs/pagination-v1/docs/spec.md/versions/v1.0-rc1",
              "xid": "/specs/pagination-v1/docs/spec.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:10.71424167Z",
              "modifiedat": "2025-04-22T02:33:10.71424167Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "docscount": 1,
      "samplesurl": "#/specs/pagination-v1/samples",
      "samples": {},
      "samplescount": 0,
      "schemasurl": "#/specs/pagination-v1/schemas",
      "schemas": {},
      "schemascount": 0
    },
    "schema-v1": {
      "specid": "schema-v1",
      "self": "#/specs/schema-v1",
      "xid": "/specs/schema-v1",
      "epoch": 5,
      "createdat": "2025-04-22T02:33:10.136784276Z",
      "modifiedat": "2025-04-22T02:33:10.593413764Z",
      "docsurl": "#/specs/schema-v1/docs",
      "docs": {
        "model.json": {
          "docid": "model.json",
          "self": "#/specs/schema-v1/docs/model.json",
          "xid": "/specs/schema-v1/docs/model.json",
          "metaurl": "#/specs/schema-v1/docs/model.json/meta",
          "meta": {
            "docid": "model.json",
            "self": "#/specs/schema-v1/docs/model.json/meta",
            "xid": "/specs/schema-v1/docs/model.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:10.136784276Z",
            "modifiedat": "2025-04-22T02:33:10.136784276Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/schema-v1/docs/model.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/schema-v1/docs/model.json/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "model.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/schema-v1/docs/model.json/versions/v1.0-rc1",
              "xid": "/specs/schema-v1/docs/model.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:10.136784276Z",
              "modifiedat": "2025-04-22T02:33:10.136784276Z",
              "ancestor": "v1.0-rc1",
              "docbase64": "ewogICJncm91cHMiOiB7CiAgICAic2NoZW1hZ3JvdXBzIjogewogICAgICAic2luZ3VsYXIiOiAic2NoZW1hZ3JvdXAiLAogICAgICAibW9kZWx2ZXJzaW9uIjogIjEuMC1yYzEiLAogICAgICAiY29tcGF0aWJsZXdpdGgiOiAiaHR0cHM6Ly94cmVnaXN0cnkuaW8veHJlZy9kb21haW5zL3NjaGVtYS9zcGVjcy9tb2RlbC5qc29uIiwKCiAgICAgICJhdHRyaWJ1dGVzIjogewogICAgICAgICIqIjogewogICAgICAgICAgIm5hbWUiOiAiKiIsCiAgICAgICAgICAidHlwZSI6ICJhbnkiCiAgICAgICAgfQogICAgICB9LAoKICAgICAgInJlc291cmNlcyI6IHsKICAgICAgICAic2NoZW1hcyI6IHsKICAgICAgICAgICJzaW5ndWxhciI6ICJzY2hlbWEiLAogICAgICAgICAgIm1vZGVsdmVyc2lvbiI6ICIxLjAtcmMxIiwKICAgICAgICAgICJjb21wYXRpYmxld2l0aCI6ICJodHRwczovL3hyZWdpc3RyeS5pby94cmVnL2RvbWFpbnMvc2NoZW1hL3NwZWNzL21vZGVsLmpzb24iLAoKICAgICAgICAgICJhdHRyaWJ1dGVzIjogewogICAgICAgICAgICAiZm9ybWF0IjogewogICAgICAgICAgICAgICJuYW1lIjogImZvcm1hdCIsCiAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU2NoZW1hIGZvcm1hdCBpZGVudGlmaWVyIGZvciB0aGlzIHNjaGVtYSB2ZXJzaW9uIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiKiI6IHsKICAgICAgICAgICAgICAibmFtZSI6ICIqIiwKICAgICAgICAgICAgICAidHlwZSI6ICJhbnkiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAibWV0YWF0dHJpYnV0ZXMiOiB7CiAgICAgICAgICAgICJ2YWxpZGF0aW9uIjogewogICAgICAgICAgICAgICJuYW1lIjogInZhbGlkYXRpb24iLAogICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJWZXJpZnkgY29tcGxpYW5jZSB3aXRoIHNwZWNpZmllZCBzY2hlbWEgJ2Zvcm1hdCciLAogICAgICAgICAgICAgICJyZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICAgImRlZmF1bHQiOiBmYWxzZQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Cg=="
            }
          },
          "versionscount": 1
        },
        "spec.md": {
          "docid": "spec.md",
          "self": "#/specs/schema-v1/docs/spec.md",
          "xid": "/specs/schema-v1/docs/spec.md",
          "metaurl": "#/specs/schema-v1/docs/spec.md/meta",
          "meta": {
            "docid": "spec.md",
            "self": "#/specs/schema-v1/docs/spec.md/meta",
            "xid": "/specs/schema-v1/docs/spec.md/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:10.250556173Z",
            "modifiedat": "2025-04-22T02:33:10.250556173Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/schema-v1/docs/spec.md/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/schema-v1/docs/spec.md/versions",
          "versions": {
            "v1.0-rc1": {
              "docid": "spec.md",
              "versionid": "v1.0-rc1",
              "self": "#/specs/schema-v1/docs/spec.md/versions/v1.0-rc1",
              "xid": "/specs/schema-v1/docs/spec.md/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:10.250556173Z",
              "modifiedat": "2025-04-22T02:33:10.250556173Z",
              "ancestor": "v1.0-rc1",
              "docbase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "docscount": 2,
      "samplesurl": "#/specs/schema-v1/samples",
      "samples": {},
      "samplescount": 0,
      "schemasurl": "#/specs/schema-v1/schemas",
      "schemas": {
        "document-schema.avsc": {
          "schemaid": "document-schema.avsc",
          "self": "#/specs/schema-v1/schemas/document-schema.avsc",
          "xid": "/specs/schema-v1/schemas/document-schema.avsc",
          "metaurl": "#/specs/schema-v1/schemas/document-schema.avsc/meta",
          "meta": {
            "schemaid": "document-schema.avsc",
            "self": "#/specs/schema-v1/schemas/document-schema.avsc/meta",
            "xid": "/specs/schema-v1/schemas/document-schema.avsc/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:10.362615978Z",
            "modifiedat": "2025-04-22T02:33:10.362615978Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/schema-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/schema-v1/schemas/document-schema.avsc/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.avsc",
              "versionid": "v1.0-rc1",
              "self": "#/specs/schema-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "xid": "/specs/schema-v1/schemas/document-schema.avsc/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:10.362615978Z",
              "modifiedat": "2025-04-22T02:33:10.362615978Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "document-schema.json": {
          "schemaid": "document-schema.json",
          "self": "#/specs/schema-v1/schemas/document-schema.json",
          "xid": "/specs/schema-v1/schemas/document-schema.json",
          "metaurl": "#/specs/schema-v1/schemas/document-schema.json/meta",
          "meta": {
            "schemaid": "document-schema.json",
            "self": "#/specs/schema-v1/schemas/document-schema.json/meta",
            "xid": "/specs/schema-v1/schemas/document-schema.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:10.475192705Z",
            "modifiedat": "2025-04-22T02:33:10.475192705Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/schema-v1/schemas/document-schema.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/schema-v1/schemas/document-schema.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "document-schema.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/schema-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "xid": "/specs/schema-v1/schemas/document-schema.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:10.475192705Z",
              "modifiedat": "2025-04-22T02:33:10.475192705Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        },
        "openapi.json": {
          "schemaid": "openapi.json",
          "self": "#/specs/schema-v1/schemas/openapi.json",
          "xid": "/specs/schema-v1/schemas/openapi.json",
          "metaurl": "#/specs/schema-v1/schemas/openapi.json/meta",
          "meta": {
            "schemaid": "openapi.json",
            "self": "#/specs/schema-v1/schemas/openapi.json/meta",
            "xid": "/specs/schema-v1/schemas/openapi.json/meta",
            "epoch": 1,
            "createdat": "2025-04-22T02:33:10.593413764Z",
            "modifiedat": "2025-04-22T02:33:10.593413764Z",
            "readonly": false,
            "compatibility": "none",
            "defaultversionid": "v1.0-rc1",
            "defaultversionurl": "#/specs/schema-v1/schemas/openapi.json/versions/v1.0-rc1",
            "defaultversionsticky": false
          },
          "versionsurl": "#/specs/schema-v1/schemas/openapi.json/versions",
          "versions": {
            "v1.0-rc1": {
              "schemaid": "openapi.json",
              "versionid": "v1.0-rc1",
              "self": "#/specs/schema-v1/schemas/openapi.json/versions/v1.0-rc1",
              "xid": "/specs/schema-v1/schemas/openapi.json/versions/v1.0-rc1",
              "epoch": 1,
              "isdefault": true,
              "createdat": "2025-04-22T02:33:10.593413764Z",
              "modifiedat": "2025-04-22T02:33:10.593413764Z",
              "ancestor": "v1.0-rc1",
              "schemabase64": ""
            }
          },
          "versionscount": 1
        }
      },
      "schemascount": 3
    }
  },
  "specscount": 6,
  "specsurl": "#/specs",
  "specversion": "1.0-rc1",
  "xid": "/"
}